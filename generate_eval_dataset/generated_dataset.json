[
  {
    "question": "What's Microsoft Corporation's revenue?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'}) RETURN o.revenue AS company_revenue",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "company_revenue": 198270000000.0
      }
    ],
    "answer": "Microsoft Corporation's revenue is $198.27 billion."
  },
  {
    "question": "How many employees does Microsoft Corporation have?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'}) RETURN o.nbrEmployees AS employee_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "employee_count": 221000
      }
    ],
    "answer": "Microsoft Corporation has 221,000 employees."
  },
  {
    "question": "What's the motto of Mircosoft Corporation?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'}) RETURN o.motto AS company_motto",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "company_motto": "We\u2019re on a mission to empower every person and every organization on the planet to achieve more."
      }
    ],
    "answer": "Microsoft's motto is: \"We're on a mission to empower every person and every organization on the planet to achieve more.\""
  },
  {
    "question": "Is SAP a public company?",
    "cypher": "MATCH (o:Organization {name: 'SAP'}) RETURN o.isPublic AS is_public",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "is_public": true
      }
    ],
    "answer": "Yes, SAP is a public company."
  },
  {
    "question": "Tell me Cloud Sherpas' employee count",
    "cypher": "MATCH (o:Organization {name: 'Cloud Sherpas'}) RETURN o.nbrEmployees AS employee_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "employee_count": 120
      }
    ],
    "answer": "Cloud Sherpas has 120 employees."
  },
  {
    "question": "What's New Energy Group's revenue?",
    "cypher": "MATCH (o:Organization {name: 'New Energy Group'}) RETURN o.revenue AS company_revenue",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "company_revenue": 120000000.0
      }
    ],
    "answer": "New Energy Group's revenue is $120,000,000."
  },
  {
    "question": "Is Cloud Sherpas still active?",
    "cypher": "MATCH (o:Organization {name: 'Cloud Sherpas'}) RETURN o.isDissolved AS is_dissolved",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "is_dissolved": true
      }
    ],
    "answer": "No, Cloud Sherpas is not still active. The query result shows that the organization is dissolved (is_dissolved = True)."
  },
  {
    "question": "What's the summary of Julie Spellman Sweet?",
    "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'}) RETURN p.summary AS person_summary",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "person_summary": "CEO at Accenture"
      }
    ],
    "answer": "Julie Spellman Sweet is the CEO at Accenture."
  },
  {
    "question": "Find SAP's total workforce",
    "cypher": "MATCH (o:Organization {name: 'SAP'}) RETURN o.nbrEmployees AS total_workforce",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_workforce": 111961
      }
    ],
    "answer": "SAP has a total workforce of 111,961 employees."
  },
  {
    "question": "What's the name of the Electronic Products Manufacturers category?",
    "cypher": "MATCH (i:IndustryCategory {name: 'Electronic Products Manufacturers'}) RETURN i.name AS category_name",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "category_name": "Electronic Products Manufacturers"
      }
    ],
    "answer": "Electronic Products Manufacturers"
  },
  {
    "question": "What's Seattle's summary?",
    "cypher": "MATCH (c:City {name: 'Seattle'}) RETURN c.summary AS city_summary",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_summary": "City in and county seat of King County, Washington, United States"
      }
    ],
    "answer": "Seattle is a city located in King County, Washington, United States, and serves as the county seat."
  },
  {
    "question": "Tell me the summary of United States of America",
    "cypher": "MATCH (c:Country {name: 'United States of America'}) RETURN c.summary AS country_summary",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "country_summary": "Country in North America"
      }
    ],
    "answer": "The United States of America is a country located in North America. However, the provided summary is quite brief and lacks detailed information about the country."
  },
  {
    "question": "What's the title of article ART77581575000?",
    "cypher": "MATCH (a:Article {id: 'ART77581575000'}) RETURN a.title AS article_title",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_title": "IBM's machine learning model can detect Alzheimer's, slow down its progression"
      }
    ],
    "answer": "The title of article ART77581575000 is \"IBM's machine learning model can detect Alzheimer's, slow down its progression\"."
  },
  {
    "question": "What sentiment does article ART176872705964 have?",
    "cypher": "MATCH (a:Article {id: 'ART176872705964'}) RETURN a.sentiment AS article_sentiment",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_sentiment": 0.856
      }
    ],
    "answer": "The article ART176872705964 has a positive sentiment with a score of 0.856."
  },
  {
    "question": "What's the revenue of New Enrgy Group?",
    "cypher": "MATCH (o:Organization {name: 'New Energy Group'}) RETURN o.revenue AS company_revenue",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "company_revenue": 120000000.0
      }
    ],
    "answer": "The revenue of New Energy Group is $120,000,000."
  },
  {
    "question": "Is Microsoft Corporation a public firm?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'}) RETURN o.isPublic AS is_public",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "is_public": true
      }
    ],
    "answer": "Yes, Microsoft Corporation is a public firm."
  },
  {
    "question": "What's Topsfield's summary info?",
    "cypher": "MATCH (c:City {name: 'Topsfield'}) RETURN c.summary AS city_summary",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_summary": "Town in Essex County, Massachusetts, United States of America"
      }
    ],
    "answer": "Topsfield is a town located in Essex County, Massachusetts, United States of America."
  },
  {
    "question": "Who's the CEO of Accenture?",
    "cypher": "MATCH (o:Organization {name: 'Accenture'})-[:HAS_CEO]->(p:Person) RETURN p.name AS ceo_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Julie Spellman Sweet"
      }
    ],
    "answer": "Julie Spellman Sweet is the CEO of Accenture."
  },
  {
    "question": "How many subsidiaries does SAP have?",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(s:Organization) RETURN COUNT(s) AS subsidiary_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_count": 94
      }
    ],
    "answer": "Based on the query result, SAP has 94 subsidiaries."
  },
  {
    "question": "How many suppliers does Microsoft Corporation have?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(s:Organization) RETURN COUNT(s) AS supplier_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_count": 1328
      }
    ],
    "answer": "Microsoft Corporation has 1,328 suppliers."
  },
  {
    "question": "How many articles mention Infinite Analytics?",
    "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: 'Infinite Analytics'}) RETURN COUNT(a) AS article_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_count": 10
      }
    ],
    "answer": "10 articles mention Infinite Analytics."
  },
  {
    "question": "Count the investors of Infinte Analytics",
    "cypher": "MATCH (o:Organization {name: 'Infinite Analytics'})<-[:HAS_INVESTOR]-(i) RETURN COUNT(i) AS investor_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_count": 6
      }
    ],
    "answer": "Infinite Analytics has 6 investors."
  },
  {
    "question": "What parent company owns Cloud Sherpas?",
    "cypher": "MATCH (p:Organization)-[:HAS_SUBSIDIARY]->(o:Organization {name: 'Cloud Sherpas'}) RETURN p.name AS parent_company",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_company": "Accenture"
      }
    ],
    "answer": "Accenture owns Cloud Sherpas."
  },
  {
    "question": "How many firms has IBM invested in?",
    "cypher": "MATCH (o:Organization {name: 'IBM'})-[:HAS_INVESTOR]->(i:Organization) RETURN COUNT(i) AS investment_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investment_count": 3
      }
    ],
    "answer": "According to the data, IBM has invested in 3 firms."
  },
  {
    "question": "Find the total subsidiaries of Accenture",
    "cypher": "MATCH (o:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(s:Organization) RETURN COUNT(s) AS total_subsidiaries",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_subsidiaries": 497
      }
    ],
    "answer": "Accenture has 497 subsidiaries."
  },
  {
    "question": "Who leads Accenture as chief exec?",
    "cypher": "MATCH (o:Organization {name: 'Accenture'})-[:HAS_CEO]->(p:Person) RETURN p.name AS chief_exec_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "chief_exec_name": "Julie Spellman Sweet"
      }
    ],
    "answer": "Julie Spellman Sweet leads Accenture as chief executive."
  },
  {
    "question": "How many organizations has article ART176872705964 mentioned?",
    "cypher": "MATCH (a:Article {id: 'ART176872705964'})-[:MENTIONS]->(o:Organization) RETURN COUNT(o) AS mentioned_orgs",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "mentioned_orgs": 1
      }
    ],
    "answer": "The article ART176872705964 has mentioned 1 organization."
  },
  {
    "question": "What's the parent of IBM Research?",
    "cypher": "MATCH (p:Organization)-[:HAS_SUBSIDIARY]->(o:Organization {name: 'IBM Research'}) RETURN p.name AS parent_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_name": "IBM"
      }
    ],
    "answer": "IBM is the parent of IBM Research."
  },
  {
    "question": "How many chunks does article ART176872705964 have?",
    "cypher": "MATCH (a:Article {id: 'ART176872705964'})-[:HAS_CHUNK]->(c:Chunk) RETURN COUNT(c) AS chunk_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "chunk_count": 1
      }
    ],
    "answer": "The article ART176872705964 has 1 chunk."
  },
  {
    "question": "Count New Energy Group's articles",
    "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: 'New Energy Group'}) RETURN COUNT(a) AS article_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_count": 5
      }
    ],
    "answer": "New Energy Group has been mentioned in 5 articles."
  },
  {
    "question": "What country is Topsfield located in?",
    "cypher": "MATCH (c:City {name: 'Topsfield'})-[:IN_COUNTRY]->(country:Country) RETURN country.name AS country_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "country_name": "United States of America"
      }
    ],
    "answer": "Topsfield is located in the United States of America."
  },
  {
    "question": "How many suppliers do Microsoft's suppliers have in total?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(s1:Organization)-[:HAS_SUPPLIER]->(s2:Organization) RETURN COUNT(DISTINCT s2) AS second_tier_suppliers",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "second_tier_suppliers": 10080
      }
    ],
    "answer": "According to the query result, Microsoft's suppliers have 10,080 second-tier suppliers in total."
  },
  {
    "question": "How many cities have organizations that IBM supplies to?",
    "cypher": "MATCH (o:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(s:Organization)-[:IN_CITY]->(c:City) RETURN COUNT(DISTINCT c) AS city_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_count": 3522
      }
    ],
    "answer": "Based on the query result, IBM supplies to organizations in 3,522 distinct cities."
  },
  {
    "question": "What's the revenue of the parent company of Cloud Sherpas?",
    "cypher": "MATCH (p:Organization)-[:HAS_SUBSIDIARY]->(o:Organization {name: 'Cloud Sherpas'}) RETURN p.revenue AS parent_revenue",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_revenue": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Count the subsidiaries of Microsoft's suppliers",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(s:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) RETURN COUNT(sub) AS subsidiary_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_count": 12056
      }
    ],
    "answer": "Based on the query result, Microsoft's suppliers have a total of 12,056 subsidiaries."
  },
  {
    "question": "What industry categories do Altium's subsidiaries belong to?",
    "cypher": "MATCH (o:Organization {name: 'Altium'})-[:HAS_SUBSIDIARY]->(s:Organization)-[:HAS_CATEGORY]->(i:IndustryCategory) RETURN COUNT(DISTINCT i) AS category_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "category_count": 0
      }
    ],
    "answer": "UNKNOWN\n\nThe Cypher query returned a category count of 0, which suggests that either Altium has no subsidiaries with industry categories in the database, or there is no data available about Altium's subsidiaries' industry categories."
  },
  {
    "question": "What city houses the biz that New Relic owns?",
    "cypher": "MATCH (o:Organization {name: 'New Relic'})-[:HAS_SUBSIDIARY]->(s:Organization)-[:IN_CITY]->(c:City) WHERE c.name IS NOT NULL ORDER BY c.name LIMIT 1 RETURN c.name AS subsidiary_city",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_city": "Durban"
      }
    ],
    "answer": "Durban is the city that houses a business owned by New Relic, according to the query result."
  },
  {
    "question": "How many investors do the companies mentioned in article ART176872705964 have?",
    "cypher": "MATCH (a:Article {id: 'ART176872705964'})-[:MENTIONS]->(o:Organization)<-[:HAS_INVESTOR]-(i) RETURN COUNT(DISTINCT i) AS investor_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_count": 6
      }
    ],
    "answer": "The companies mentioned in article ART176872705964 have 6 distinct investors."
  },
  {
    "question": "What's the employee count of SAP's subsidary in Topsfield?",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(s:Organization)-[:IN_CITY]->(c:City {name: 'Topsfield'}) RETURN s.nbrEmployees AS employee_count",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "employee_count": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "How many articles mention organizations that have investors?",
    "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization)<-[:HAS_INVESTOR]-(i) RETURN COUNT(DISTINCT a) AS article_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_count": 17448
      }
    ],
    "answer": "17,448 articles mention organizations that have investors."
  },
  {
    "question": "What's the motto of the firm that supplies Microsoft?",
    "cypher": "MATCH (s:Organization)-[:HAS_SUPPLIER]->(o:Organization {name: 'Microsoft Corporation'}) WHERE s.motto IS NOT NULL ORDER BY s.name LIMIT 1 RETURN s.motto AS supplier_motto",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_motto": "Trusted partner for your Digital Journey"
      }
    ],
    "answer": "The motto of the firm supplying Microsoft is \"Trusted partner for your Digital Journey\"."
  },
  {
    "question": "How many employees work for IBM's subsidiaries total?",
    "cypher": "MATCH (o:Organization {name: 'IBM'})-[:HAS_SUBSIDIARY]->(s:Organization) WHERE s.nbrEmployees IS NOT NULL RETURN SUM(s.nbrEmployees) AS total_employees",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_employees": 0
      }
    ],
    "answer": "UNKNOWN. While the query was designed to find the total number of employees in IBM's subsidiaries, the result shows zero employees, which could indicate missing data or an issue with the database."
  },
  {
    "question": "What cities are Oracle's suppliers located in?",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(s:Organization)-[:IN_CITY]->(c:City) RETURN COUNT(DISTINCT c) AS city_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_count": 1388
      }
    ],
    "answer": "Oracle has suppliers located in 1,388 distinct cities."
  },
  {
    "question": "What's the highest revenue among Microsoft suppliers?",
    "cypher": "MATCH (s:Organization)-[:HAS_SUPPLIER]->(o:Organization {name: 'Microsoft Corporation'}) WHERE s.revenue IS NOT NULL RETURN MAX(s.revenue) AS highest_revenue",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_revenue": 116609000000.0
      }
    ],
    "answer": "The highest revenue among Microsoft suppliers is $116.609 billion."
  },
  {
    "question": "How many execs lead companies in Seattle?",
    "cypher": "MATCH (c:City {name: 'Seattle'})<-[:IN_CITY]-(o:Organization)-[:HAS_CEO]->(p:Person) RETURN COUNT(p) AS ceo_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_count": 136
      }
    ],
    "answer": "136 executives lead companies in Seattle."
  },
  {
    "question": "How many subsidiaries does SAP have that are located in cities within the United States of America?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: 'United States of America'}) RETURN COUNT(DISTINCT sub) AS total_subsidiaries",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_subsidiaries": 5
      }
    ],
    "answer": "SAP has 5 subsidiaries located in cities within the United States of America."
  },
  {
    "question": "What's the total revenue of all public companies that Microsoft Corporation supplies to?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(org:Organization) WHERE org.isPublic = true AND org.revenue IS NOT NULL RETURN SUM(org.revenue) AS total_revenue",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_revenue": 372107250356.0
      }
    ],
    "answer": "The total revenue of all public companies that Microsoft Corporation supplies to is $372,107,250,356."
  },
  {
    "question": "What's the highest revenue among firms that compete with Microsoft's suppliers?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(supplier:Organization)-[:HAS_COMPETITOR]->(competitor:Organization) WHERE competitor.revenue IS NOT NULL RETURN MAX(competitor.revenue) AS highest_revenue",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_revenue": 198270000000.0
      }
    ],
    "answer": "The highest revenue among firms that compete with Microsoft's suppliers is $198,270,000,000."
  },
  {
    "question": "How many articles mention organizations that have investors from John Hancock Investments?",
    "cypher": "MATCH (jhi:Organization {name: 'John Hancock Investments'})<-[:HAS_INVESTOR]-(org:Organization)<-[:MENTIONS]-(article:Article) RETURN COUNT(DISTINCT article) AS article_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_count": 0
      }
    ],
    "answer": "Based on the query result, 0 articles mention organizations that have investors from John Hancock Investments."
  },
  {
    "question": "What's the average number of employees in dissolved companies that were subsidiaries of public organizations?",
    "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE parent.isPublic = true AND sub.isDissolved = true AND sub.nbrEmployees IS NOT NULL RETURN AVG(sub.nbrEmployees) AS average_employees",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_employees": 217.2111111111111
      }
    ],
    "answer": "Based on the query result, the average number of employees in dissolved companies that are subsidiaries of public organizations is approximately 217 employees."
  },
  {
    "question": "Find the country name where Accenture's parent company's other subsidiaries are located?",
    "cypher": "MATCH (acc:Organization {name: 'Accenture'})<-[:HAS_SUBSIDIARY]-(parent:Organization)-[:HAS_SUBSIDIARY]->(other:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) WHERE other.name <> 'Accenture' RETURN country.name AS country_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "country_name": "Germany"
      }
    ],
    "answer": "Based on the query result, the country where Accenture's parent company's other subsidiaries are located is Germany."
  },
  {
    "question": "What's the lowest employee count among companies that Oracle supplies to that also have subsidiaries?",
    "cypher": "MATCH (oracle:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(org:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE org.nbrEmployees IS NOT NULL RETURN MIN(org.nbrEmployees) AS lowest_employees",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "lowest_employees": 124
      }
    ],
    "answer": "The lowest employee count among companies that Oracle supplies to and have subsidiaries is 124."
  },
  {
    "question": "What's the sentiment score of the most positive article mentioning New Energy Group?",
    "cypher": "MATCH (neg:Organization {name: 'New Energy Group'})<-[:MENTIONS]-(article:Article) WHERE article.sentiment IS NOT NULL RETURN MAX(article.sentiment) AS highest_sentiment",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_sentiment": NaN
      }
    ],
    "answer": "UNKNOWN\n\nExplanation: The query result returned a 'nan' (Not a Number) value, which means no valid sentiment score was found for articles mentioning New Energy Group."
  },
  {
    "question": "Tell me the industry of the biz that has the most employees among SAP's subsidiaries?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) WHERE sub.nbrEmployees IS NOT NULL ORDER BY sub.nbrEmployees DESC LIMIT 1 RETURN cat.name AS industry_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "industry_name": "Financial Services Companies"
      }
    ],
    "answer": "Based on the query result, the industry of SAP's subsidiary with the most employees is Financial Services Companies."
  },
  {
    "question": "What's the total revenue of all competitors of companies that IBM invests in?",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})-[:HAS_INVESTOR]->(portfolio:Organization)-[:HAS_COMPETITOR]->(competitor:Organization) WHERE competitor.revenue IS NOT NULL RETURN SUM(competitor.revenue) AS total_competitor_revenue",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_competitor_revenue": 0
      }
    ],
    "answer": "The total revenue of all competitors of companies that IBM invests in is $0. This could mean either there are no recorded competitors for IBM's portfolio companies, or the competitors have no reported revenue in the database."
  },
  {
    "question": "How many different countries can be reached from Seattle through organizations located there?",
    "cypher": "MATCH (seattle:City {name: 'Seattle'})<-[:IN_CITY]-(org:Organization)-[:HAS_SUBSIDIARY|HAS_SUPPLIER]->(other:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN COUNT(DISTINCT country) AS country_count",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "country_count": 119
      }
    ],
    "answer": "Based on the query result, organizations located in Seattle can reach 119 different countries through their subsidiaries or suppliers."
  },
  {
    "question": "Find the average sentiment of articles that mention dissolved companys?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(org:Organization) WHERE org.isDissolved = true AND article.sentiment IS NOT NULL RETURN AVG(article.sentiment) AS average_sentiment",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_sentiment": NaN
      }
    ],
    "answer": "UNKNOWN\n\nThe query returned NaN (Not a Number), which suggests there might be no valid sentiment data for articles mentioning dissolved companies. This could mean either no such articles exist or the sentiment data is incomplete or invalid."
  },
  {
    "question": "What's the motto of the largest employer among Oracle's competitors?",
    "cypher": "MATCH (oracle:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(comp:Organization) WHERE comp.nbrEmployees IS NOT NULL AND comp.motto IS NOT NULL ORDER BY comp.nbrEmployees DESC LIMIT 1 RETURN comp.motto AS company_motto",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "company_motto": "We\u2019re on a mission to empower every person and every organization on the planet to achieve more."
      }
    ],
    "answer": "The motto of the largest employer among Oracle's competitors is \"We're on a mission to empower every person and every organization on the planet to achieve more.\""
  },
  {
    "question": "What's the minimum number of employees in public corps that compete with SAP?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(comp:Organization) WHERE comp.isPublic = true AND comp.nbrEmployees IS NOT NULL RETURN MIN(comp.nbrEmployees) AS minimum_employees",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "minimum_employees": 4603
      }
    ],
    "answer": "The minimum number of employees in public corporations that compete with SAP is 4,603."
  },
  {
    "question": "Tell me which organizations connect IBM to articles about artificial intelligence through their subsidiaries?",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})-[:HAS_SUBSIDIARY]->(sub:Organization)<-[:MENTIONS]-(article:Article) WHERE article.summary CONTAINS 'AI' OR article.summary CONTAINS 'artificial intelligence' RETURN sub.name AS connecting_organization LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connecting_organization": "IBM Watson"
      }
    ],
    "answer": "Based on the query result, IBM Watson is a subsidiary that connects IBM to articles about artificial intelligence."
  },
  {
    "question": "How many investors does the company with the most subsidiaries in the United States have?",
    "cypher": "MATCH (org:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: 'United States of America'}) WITH org, COUNT(DISTINCT sub) AS sub_count ORDER BY sub_count DESC LIMIT 1 MATCH (org)<-[:HAS_INVESTOR]-(investor) RETURN COUNT(DISTINCT investor) AS investor_count",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_count": 3
      }
    ],
    "answer": "The company with the most subsidiaries in the United States has 3 investors."
  },
  {
    "question": "What's the peak revenue among firms that share suppliers with Accenture?",
    "cypher": "MATCH (acc:Organization {name: 'Accenture'})<-[:HAS_SUPPLIER]-(supplier:Organization)-[:HAS_SUPPLIER]->(other:Organization) WHERE other.name <> 'Accenture' AND other.revenue IS NOT NULL RETURN MAX(other.revenue) AS peak_revenue",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "peak_revenue": 198270000000.0
      }
    ],
    "answer": "The peak revenue among firms that share suppliers with Accenture is $198,270,000,000."
  },
  {
    "question": "How many subsidiaries connect Microsoft Corporaton to cities in countries other than the United States?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name <> 'United States of America' RETURN COUNT(DISTINCT sub) AS subsidiary_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_count": 147
      }
    ],
    "answer": "Microsoft Corporation has 147 subsidiaries located in cities outside of the United States."
  },
  {
    "question": "What's the title of the earliest article mentioning organizations that New Relic supplies to?",
    "cypher": "MATCH (nr:Organization {name: 'New Relic'})-[:HAS_SUPPLIER]->(org:Organization)<-[:MENTIONS]-(article:Article) WHERE article.date IS NOT NULL ORDER BY article.date ASC LIMIT 1 RETURN article.title AS article_title",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_title": "Securities and Exchange Commission v. Unistar Financial Service Corp., Marc A. Sparks, F. Jeffrey Nelson, Phillip H. Clayton, Dino A. Romano, Cynthia Jackson, Intermark Investments, Inc., Turner Holdings, Inc., and Nicole Clayton Caver, Civil Action No. 3:03CV1763-L (N.D. Tex.)."
      }
    ],
    "answer": "The earliest article mentioning an organization that New Relic supplies to is a legal document titled \"Securities and Exchange Commission v. Unistar Financial Service Corp., Marc A. Sparks, F. Jeffrey Nelson, Phillip H. Clayton, Dino A. Romano, Cynthia Jackson, Intermark Investments, Inc., Turner Holdings, Inc., and Nicole Clayton Caver, Civil Action No. 3:03CV1763-L (N.D. Tex.)\"."
  },
  {
    "question": "Find the sum of employees in all dissolved subsidiaries of public companies?",
    "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE parent.isPublic = true AND sub.isDissolved = true AND sub.nbrEmployees IS NOT NULL RETURN SUM(sub.nbrEmployees) AS total_employees",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_employees": 19549
      }
    ],
    "answer": "The total number of employees in dissolved subsidiaries of public companies is 19,549."
  },
  {
    "question": "Which industry category has the most companies supplying to Microsft Corporation?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(supplier:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) WITH cat, COUNT(DISTINCT supplier) AS supplier_count ORDER BY supplier_count DESC LIMIT 1 RETURN cat.name AS industry_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "industry_name": "Software Companies"
      }
    ],
    "answer": "Based on the query result, the industry category with the most companies supplying to Microsoft Corporation is Software Companies."
  },
  {
    "question": "What's the highest employee count among companies mentioned in articles with positive sentiment?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(org:Organization) WHERE article.sentiment > 0.5 AND org.nbrEmployees IS NOT NULL RETURN MAX(org.nbrEmployees) AS highest_employees",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_employees": 1290000
      }
    ],
    "answer": "The highest employee count among companies mentioned in articles with positive sentiment is 1,290,000 employees."
  },
  {
    "question": "Tell me the summary of the organization that connects IBM to the Electronic Products Manufacturers category through supply chains?",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})-[:HAS_SUPPLIER*1..2]->(org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: 'Electronic Products Manufacturers'}) RETURN org.summary AS organization_summary LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "organization_summary": "Software company"
      }
    ],
    "answer": "The organization connecting IBM to the Electronic Products Manufacturers category is a software company, according to the query result."
  },
  {
    "question": "How many distinct countries are represented by cities where Oracle's competitors are located?",
    "cypher": "MATCH (oracle:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(comp:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN COUNT(DISTINCT country) AS country_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "country_count": 54
      }
    ],
    "answer": "Oracle has competitors located in 54 distinct countries."
  },
  {
    "question": "Find the lowest sentiment score among articles mentioning suppliers of Altium?",
    "cypher": "MATCH (altium:Organization {name: 'Altium'})<-[:HAS_SUPPLIER]-(supplier:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment IS NOT NULL RETURN MIN(article.sentiment) AS lowest_sentiment",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "lowest_sentiment": -0.952
      }
    ],
    "answer": "The lowest sentiment score among articles mentioning Altium's suppliers is -0.952, indicating a very negative sentiment."
  },
  {
    "question": "What's the total number of chunks in articles that mention both IBM and Microsoft?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(ibm:Organization {name: 'IBM'}), (article)-[:MENTIONS]->(ms:Organization {name: 'Microsoft Corporation'}), (article)-[:HAS_CHUNK]->(chunk:Chunk) RETURN COUNT(DISTINCT chunk) AS total_chunks",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_chunks": 112
      }
    ],
    "answer": "Based on the query result, there are 112 unique chunks in articles that mention both IBM and Microsoft."
  },
  {
    "question": "Tell me the city name where the biggest subsidiary of Accenture is based?",
    "cypher": "MATCH (acc:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City) WHERE sub.nbrEmployees IS NOT NULL ORDER BY sub.nbrEmployees DESC LIMIT 1 RETURN city.name AS city_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_name": "Singapore"
      }
    ],
    "answer": "The biggest subsidiary of Accenture is based in Singapore."
  },
  {
    "question": "What's the maximum revenue difference between competing companies that share the same investors?",
    "cypher": "MATCH (investor)-[:HAS_INVESTOR]->(org1:Organization)-[:HAS_COMPETITOR]->(org2:Organization)<-[:HAS_INVESTOR]-(investor) WHERE org1.revenue IS NOT NULL AND org2.revenue IS NOT NULL RETURN MAX(ABS(org1.revenue - org2.revenue)) AS max_revenue_difference",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "max_revenue_difference": 185544000000.0
      }
    ],
    "answer": "Based on the query result, the maximum revenue difference between competing companies that share the same investors is $185,544,000,000."
  },
  {
    "question": "What's the author name of the article with the highest sentiment that mentions New Energy Group?",
    "cypher": "MATCH (neg:Organization {name: 'New Energy Group'})<-[:MENTIONS]-(article:Article) WHERE article.sentiment IS NOT NULL AND article.author IS NOT NULL ORDER BY article.sentiment DESC LIMIT 1 RETURN article.author AS author_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "author_name": "Andrew Hore |"
      }
    ],
    "answer": "The author of the article with the highest sentiment mentioning New Energy Group is Andrew Hore |."
  },
  {
    "question": "Find the average number of employees in organizations that have subsidiarys in multiple countries?",
    "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(sub1:Organization)-[:IN_CITY]->(city1:City)-[:IN_COUNTRY]->(country1:Country), (parent)-[:HAS_SUBSIDIARY]->(sub2:Organization)-[:IN_CITY]->(city2:City)-[:IN_COUNTRY]->(country2:Country) WHERE country1.name <> country2.name AND parent.nbrEmployees IS NOT NULL RETURN AVG(parent.nbrEmployees) AS average_employees",
    "query_type": "Aggregation",
    "complexity": "5-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_employees": 218640.2758963425
      }
    ],
    "answer": "Based on the query result, organizations with subsidiaries in multiple countries have an average of approximately 218,640 employees."
  },
  {
    "question": "What's the name of the subsidiary that gives Microsoft the shortest path to companies in Topsfield?",
    "cypher": "MATCH path = (ms:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[*1..2]-(org:Organization)-[:IN_CITY]->(city:City {name: 'Topsfield'}) WITH sub, LENGTH(path) AS path_length ORDER BY path_length ASC LIMIT 1 RETURN sub.name AS subsidiary_name",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_name": "Skype"
      }
    ],
    "answer": "Skype is the Microsoft subsidiary that provides the shortest path to companies in Topsfield."
  },
  {
    "question": "What's the minimum sentiment score of articles mentioning companies that compete with Microsofts subsidiaries?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_COMPETITOR]->(comp:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment IS NOT NULL RETURN MIN(article.sentiment) AS minimum_sentiment",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "minimum_sentiment": -0.9920669794082642
      }
    ],
    "answer": "The minimum sentiment score of articles mentioning companies that compete with Microsoft's subsidiaries is -0.992, indicating a highly negative sentiment."
  },
  {
    "question": "How many investors connect Infinite Analytics to organizations located in cities outside India?",
    "cypher": "MATCH (ia:Organization {name: 'Infinite Analytics'})<-[:HAS_INVESTOR]-(investor)-[:HAS_INVESTOR]->(org:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name <> 'India' RETURN COUNT(DISTINCT investor) AS investor_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_count": 2
      }
    ],
    "answer": "2 investors connect Infinite Analytics to organizations located in cities outside India."
  },
  {
    "question": "How many subsidiaries does Microsoft Corporation have that are also subsidiaries of other companies?",
    "cypher": "MATCH (m:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY]->(s:Organization)<-[:HAS_SUBSIDIARY]-(other:Organization) WHERE m <> other RETURN COUNT(DISTINCT s) AS shared_subsidiaries",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "shared_subsidiaries": 31
      }
    ],
    "answer": "Based on the query result, Microsoft Corporation has 31 subsidiaries that are also subsidiaries of other companies."
  },
  {
    "question": "What's the total revenue of all public companies that supply services to IBM?",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})<-[:HAS_SUPPLIER]-(supplier:Organization) WHERE supplier.isPublic = true AND supplier.revenue IS NOT NULL RETURN SUM(supplier.revenue) AS total_supplier_revenue",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_supplier_revenue": 40089379000.0
      }
    ],
    "answer": "The total revenue of public companies supplying services to IBM is $40,089,379,000."
  },
  {
    "question": "What's the highest revenue among firms that have Julie Spellman Sweet's company as a subsidiary?",
    "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'})<-[:HAS_CEO]-(company:Organization)<-[:HAS_SUBSIDIARY]-(parent:Organization) WHERE parent.revenue IS NOT NULL RETURN MAX(parent.revenue) AS highest_parent_revenue",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_parent_revenue": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "How many organizations does Mircosoft Corporation compete with that are located in Seattle?",
    "cypher": "MATCH (m:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(competitor:Organization)-[:IN_CITY]->(city:City {name: 'Seattle'}) RETURN COUNT(DISTINCT competitor) AS seattle_competitors",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "seattle_competitors": 2
      }
    ],
    "answer": "Microsoft Corporation competes with 2 organizations located in Seattle."
  },
  {
    "question": "What's the average number of employees in companies that have suppliers who also supply Oracle?",
    "cypher": "MATCH (oracle:Organization {name: 'Oracle'})<-[:HAS_SUPPLIER]-(supplier:Organization)-[:HAS_SUPPLIER]->(company:Organization) WHERE company.nbrEmployees IS NOT NULL AND oracle <> company RETURN AVG(company.nbrEmployees) AS average_employee_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_employee_count": 19937.632686084155
      }
    ],
    "answer": "Based on the query result, the average number of employees in companies that have suppliers who also supply Oracle is approximately 19,938 employees."
  },
  {
    "question": "How many different industry categories are represented by companies that invest in the same startups as John Hancock Investments?",
    "cypher": "MATCH (jh:Organization {name: 'John Hancock Investments'})-[:HAS_INVESTOR]->(portfolio:Organization)<-[:HAS_INVESTOR]-(coinvestor:Organization)-[:HAS_CATEGORY]->(category:IndustryCategory) WHERE jh <> coinvestor RETURN COUNT(DISTINCT category) AS category_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "category_count": 0
      }
    ],
    "answer": "UNKNOWN. The query result indicates zero distinct industry categories for co-investors with John Hancock Investments, which could mean either no co-investment exists or the data is incomplete."
  },
  {
    "question": "What's the country name where companies supplying New Relic are headquartered?",
    "cypher": "MATCH (nr:Organization {name: 'New Relic'})<-[:HAS_SUPPLIER]-(supplier:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN country.name AS supplier_country LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_country": "India"
      }
    ],
    "answer": "According to the data, at least one company supplying New Relic is headquartered in India."
  },
  {
    "question": "Count how many paths connect Accenture to companies in the Electronic Products Manufacturers category through subsidiaries?",
    "cypher": "MATCH path = (acc:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY*1..3]->(company:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: 'Electronic Products Manufacturers'}) RETURN COUNT(path) AS connection_paths",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connection_paths": 0
      }
    ],
    "answer": "Based on the query result, there are 0 paths connecting Accenture to companies in the Electronic Products Manufacturers category through subsidiaries."
  },
  {
    "question": "What's the lowest number of employees among public companys that have board members?",
    "cypher": "MATCH (company:Organization)-[:HAS_BOARD_MEMBER]->(person:Person) WHERE company.isPublic = true AND company.nbrEmployees IS NOT NULL RETURN MIN(company.nbrEmployees) AS minimum_employees",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "minimum_employees": 38
      }
    ],
    "answer": "The lowest number of employees among public companies with board members is 38."
  },
  {
    "question": "Tell me the total count of articles mentioning subsidiaries of German software producer SAP?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)<-[:MENTIONS]-(article:Article) RETURN COUNT(DISTINCT article) AS article_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_count": 636
      }
    ],
    "answer": "Based on the query result, there are 636 unique articles that mention subsidiaries of SAP."
  },
  {
    "question": "What's the name of the CEO of the company that owns Cloud Sherpas?",
    "cypher": "MATCH (cs:Organization {name: 'Cloud Sherpas'})<-[:HAS_SUBSIDIARY]-(parent:Organization)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS parent_ceo_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_ceo_name": "Julie Spellman Sweet"
      }
    ],
    "answer": "Julie Spellman Sweet is the CEO of the company that owns Cloud Sherpas."
  },
  {
    "question": "How many firms mentioned in articles have investors from outside the United States?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(company:Organization)<-[:HAS_INVESTOR]-(investor:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name <> 'United States of America' RETURN COUNT(DISTINCT company) AS international_backed_companies",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "international_backed_companies": 194
      }
    ],
    "answer": "Based on the query result, 194 firms mentioned in articles have investors from outside the United States."
  },
  {
    "question": "What's the highest sentiment score of articles mentioning New Energy Group?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(org:Organization {name: 'New Energy Group'}) WHERE article.sentiment IS NOT NULL RETURN MAX(article.sentiment) AS highest_sentiment",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_sentiment": NaN
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returned NaN (Not a Number), which means no valid sentiment score was found for articles mentioning New Energy Group. This could indicate either no articles were found or the sentiment scores were not properly recorded."
  },
  {
    "question": "How many board members work for enterprises that compete with Oracl?",
    "cypher": "MATCH (oracle:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(competitor:Organization)-[:HAS_BOARD_MEMBER]->(board:Person) RETURN COUNT(DISTINCT board) AS competitor_board_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "competitor_board_count": 176
      }
    ],
    "answer": "176 board members work for enterprises that compete with Oracle."
  },
  {
    "question": "What's the total revenue of dissolved companies that were subsidiaries of public corporations?",
    "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE parent.isPublic = true AND sub.isDissolved = true AND sub.revenue IS NOT NULL RETURN SUM(sub.revenue) AS dissolved_subsidiary_revenue",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "dissolved_subsidiary_revenue": 45881000.0
      }
    ],
    "answer": "The total revenue of dissolved companies that were subsidiaries of public corporations is $45,881,000."
  },
  {
    "question": "Tell me which city connects to the most subsidiaries of Microsoft through their locations?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City) RETURN city.name AS city_name, COUNT(DISTINCT sub) AS subsidiary_count ORDER BY subsidiary_count DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_name": "San Francisco",
        "subsidiary_count": 35
      }
    ],
    "answer": "Based on the query result, San Francisco connects to the most subsidiaries of Microsoft, with 35 distinct subsidiaries located in that city."
  },
  {
    "question": "Count the subsidiaries of Infinit Analytics' investors?",
    "cypher": "MATCH (ia:Organization {name: 'Infinite Analytics'})<-[:HAS_INVESTOR]-(investor:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) RETURN COUNT(DISTINCT sub) AS investor_subsidiary_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_subsidiary_count": 0
      }
    ],
    "answer": "Based on the query result, the investors of Infinite Analytics have 0 subsidiaries."
  },
  {
    "question": "What's the company name with the highest employee count among SAP's competitors?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(competitor:Organization) WHERE competitor.nbrEmployees IS NOT NULL ORDER BY competitor.nbrEmployees DESC LIMIT 1 RETURN competitor.name AS largest_competitor",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "largest_competitor": "Microsoft Corporation"
      }
    ],
    "answer": "Based on the query result, Microsoft Corporation has the highest employee count among SAP's competitors."
  },
  {
    "question": "How many connecting companies link Julie Spellman Sweet to board members of other firms?",
    "cypher": "MATCH (julie:Person {name: 'Julie Spellman Sweet'})<-[:HAS_CEO]-(company1:Organization)-[:HAS_SUBSIDIARY|HAS_SUPPLIER|HAS_COMPETITOR*1..2]-(company2:Organization)-[:HAS_BOARD_MEMBER]->(board:Person) WHERE julie <> board RETURN COUNT(DISTINCT company2) AS connecting_companies",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connecting_companies": 1426
      }
    ],
    "answer": "Based on the query result, 1,426 connecting companies link Julie Spellman Sweet to board members of other firms."
  },
  {
    "question": "What's the summary of the organization that has New Relic as a supplier and is located in the US?",
    "cypher": "MATCH (nr:Organization {name: 'New Relic'})-[:HAS_SUPPLIER]->(customer:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: 'United States of America'}) RETURN customer.summary AS customer_summary LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "customer_summary": "Software company based in Sunnyvale, California, United States and owned by Microsoft"
      }
    ],
    "answer": "The organization with New Relic as a supplier and located in the US is a software company based in Sunnyvale, California, and owned by Microsoft."
  },
  {
    "question": "Find the average revenue of public companies that have CEOs and are mentioned in articles?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(company:Organization)-[:HAS_CEO]->(ceo:Person) WHERE company.isPublic = true AND company.revenue IS NOT NULL RETURN AVG(company.revenue) AS average_public_revenue",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_public_revenue": 106014136293.57774
      }
    ],
    "answer": "The average revenue of public companies with CEOs mentioned in articles is $106,014,136,293.58."
  },
  {
    "question": "What's the minimum number of employees in subsidiaries of subsidiaries of Accenture?",
    "cypher": "MATCH (acc:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub1:Organization)-[:HAS_SUBSIDIARY]->(sub2:Organization) WHERE sub2.nbrEmployees IS NOT NULL RETURN MIN(sub2.nbrEmployees) AS minimum_sub_employees",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "minimum_sub_employees": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "How many different countries can be reached from IBM through its business network?",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})-[:HAS_SUBSIDIARY|HAS_SUPPLIER*1..3]-(connected:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN COUNT(DISTINCT country) AS reachable_countries",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "reachable_countries": 119
      }
    ],
    "answer": "According to the data, IBM can reach 119 different countries through its business network of subsidiaries and suppliers."
  },
  {
    "question": "What city hosts the biz with the most board members among Microsoft's suppliers?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(supplier:Organization)-[:HAS_BOARD_MEMBER]->(board:Person), (supplier)-[:IN_CITY]->(city:City) WITH supplier, city, COUNT(DISTINCT board) AS board_count ORDER BY board_count DESC LIMIT 1 RETURN city.name AS supplier_city",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_city": "Berlin"
      }
    ],
    "answer": "Berlin is the city that hosts the Microsoft supplier with the most board members."
  },
  {
    "question": "What's the total employee count across all subsidiaries of companies investing in Malpani Ventures' portfolio?",
    "cypher": "MATCH (mv:Organization {name: 'Malpani Ventures'})-[:HAS_INVESTOR]->(portfolio:Organization)<-[:HAS_INVESTOR]-(coinvestor:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.nbrEmployees IS NOT NULL AND mv <> coinvestor RETURN SUM(sub.nbrEmployees) AS total_subsidiary_employees",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_subsidiary_employees": 0
      }
    ],
    "answer": "Based on the query result, the total employee count across all subsidiaries of companies investing in Malpani Ventures' portfolio is 0. This could mean that either no employee data is available for the subsidiaries or there are no recorded subsidiaries for the co-investing companies."
  },
  {
    "question": "Find the highest revenue among suppliers of suppliers of Oracle?",
    "cypher": "MATCH (oracle:Organization {name: 'Oracle'})<-[:HAS_SUPPLIER]-(tier1:Organization)<-[:HAS_SUPPLIER]-(tier2:Organization) WHERE tier2.revenue IS NOT NULL RETURN MAX(tier2.revenue) AS max_tier2_revenue",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "max_tier2_revenue": 198270000000.0
      }
    ],
    "answer": "The highest revenue among suppliers of Oracle's suppliers is $198,270,000,000."
  },
  {
    "question": "What's the name of the parent organization of subsidiaries that have investors?",
    "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)<-[:HAS_INVESTOR]-(investor) RETURN parent.name AS parent_with_funded_subsidiary LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_with_funded_subsidiary": "Accenture"
      }
    ],
    "answer": "Accenture is the name of a parent organization that has a subsidiary with investors."
  },
  {
    "question": "How many paths exist between Seattle-based companies and firms with over 100000 employees?",
    "cypher": "MATCH path = (seattle:Organization)-[:IN_CITY]->(city:City {name: 'Seattle'}), (seattle)-[:HAS_SUBSIDIARY|HAS_SUPPLIER|HAS_COMPETITOR*1..2]-(large:Organization) WHERE large.nbrEmployees > 100000 RETURN COUNT(DISTINCT path) AS connection_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connection_count": 191
      }
    ],
    "answer": "There are 191 distinct paths connecting Seattle-based companies to firms with over 100,000 employees, considering direct and indirect relationships through subsidiaries, suppliers, or competitors."
  },
  {
    "question": "What's the average sentiment of articles mentioning companies that compete with SAP?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(competitor:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment IS NOT NULL RETURN AVG(article.sentiment) AS average_competitor_sentiment",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_competitor_sentiment": NaN
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returned \"nan\" (Not a Number), which indicates that no valid sentiment data could be calculated. This could mean there are no articles mentioning SAP's competitors with sentiment data, or there might be an issue with the data collection or query."
  },
  {
    "question": "What industry category has the most companies supplying Microsoft Corporation?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(supplier:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) WITH cat, COUNT(DISTINCT supplier) AS supplier_count ORDER BY supplier_count DESC LIMIT 1 RETURN cat.name AS top_supplier_category",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "top_supplier_category": "Software Companies"
      }
    ],
    "answer": "Based on the query result, the Software Companies industry category has the most companies supplying Microsoft Corporation."
  },
  {
    "question": "How many dissolved startups were subsidiaries of companies headquartered in the United States?",
    "cypher": "MATCH (parent:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country {name: 'United States of America'}), (parent)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.isDissolved = true RETURN COUNT(DISTINCT sub) AS dissolved_us_subsidiaries",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "dissolved_us_subsidiaries": 162
      }
    ],
    "answer": "162 dissolved startups were subsidiaries of companies headquartered in the United States."
  },
  {
    "question": "Find how many board members connect Oracle to its competitors through shared positions?",
    "cypher": "MATCH (oracle:Organization {name: 'Oracle'})-[:HAS_BOARD_MEMBER]->(board:Person)<-[:HAS_BOARD_MEMBER]-(competitor:Organization), (oracle)-[:HAS_COMPETITOR]->(competitor) RETURN COUNT(DISTINCT board) AS shared_board_members",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "shared_board_members": 0
      }
    ],
    "answer": "Based on the query result, there are 0 board members that connect Oracle to its competitors through shared positions."
  },
  {
    "question": "Count suppliers shared between Microsoft and its competitrs?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(supplier:Organization)-[:HAS_SUPPLIER]->(competitor:Organization), (ms)-[:HAS_COMPETITOR]->(competitor) RETURN COUNT(DISTINCT supplier) AS shared_suppliers",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "shared_suppliers": 59
      }
    ],
    "answer": "Microsoft has 59 suppliers that are shared with its competitors."
  },
  {
    "question": "What's the maximum employee count in cities that host more than 3 tech companies?",
    "cypher": "MATCH (company:Organization)-[:IN_CITY]->(city:City) WITH city, COUNT(DISTINCT company) AS company_count WHERE company_count > 3 MATCH (org:Organization)-[:IN_CITY]->(city) WHERE org.nbrEmployees IS NOT NULL RETURN MAX(org.nbrEmployees) AS max_city_employees",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "max_city_employees": 1290000
      }
    ],
    "answer": "The maximum employee count in cities hosting more than 3 tech companies is 1,290,000 employees."
  },
  {
    "question": "How many CEOs lead companies that are both subsidiaries and have their own subsidiaries?",
    "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(middle:Organization)-[:HAS_SUBSIDIARY]->(child:Organization), (middle)-[:HAS_CEO]->(ceo:Person) RETURN COUNT(DISTINCT ceo) AS middle_tier_ceos",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "middle_tier_ceos": 165
      }
    ],
    "answer": "165 CEOs lead companies that are both subsidiaries and have their own subsidiaries."
  },
  {
    "question": "Find the site name of the article with the highest sentiment mentioning subsidiaries of SAP?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment IS NOT NULL ORDER BY article.sentiment DESC LIMIT 1 RETURN article.siteName AS top_sentiment_site",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "top_sentiment_site": "Financial Standard"
      }
    ],
    "answer": "The site name of the article with the highest sentiment mentioning SAP subsidiaries is \"Financial Standard\"."
  },
  {
    "question": "Tell me the title of articles mentioning companies where Julie Spellman Sweet serves as CEO?",
    "cypher": "MATCH (julie:Person {name: 'Julie Spellman Sweet'})<-[:HAS_CEO]-(company:Organization)<-[:MENTIONS]-(article:Article) RETURN article.title AS article_title LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_title": "Accenture snaps up Melbourne-based Analytics8"
      }
    ],
    "answer": "The article mentioning a company where Julie Spellman Sweet serves as CEO is \"Accenture snaps up Melbourne-based Analytics8\"."
  },
  {
    "question": "What's the total number of employees in all subsidiaries of subsidiaries of Microsft Corporation?",
    "cypher": "MATCH (ms:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY*2]->(sub2:Organization) WHERE sub2.nbrEmployees IS NOT NULL RETURN SUM(sub2.nbrEmployees) AS total_nested_employees",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_nested_employees": 16935
      }
    ],
    "answer": "The total number of employees in subsidiaries of subsidiaries of Microsoft Corporation is 16,935."
  },
  {
    "question": "How many investment connections exist between organizations in different countries?",
    "cypher": "MATCH (org1:Organization)-[:IN_CITY]->(city1:City)-[:IN_COUNTRY]->(country1:Country), (org1)-[:HAS_INVESTOR]->(org2:Organization)-[:IN_CITY]->(city2:City)-[:IN_COUNTRY]->(country2:Country) WHERE country1 <> country2 RETURN COUNT(DISTINCT org1) AS cross_border_investments",
    "query_type": "Existence Verification",
    "complexity": "5-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "cross_border_investments": 86
      }
    ],
    "answer": "Based on the query result, there are 86 unique organizations involved in cross-border investments, meaning these organizations have investment connections with organizations in different countries."
  },
  {
    "question": "What's the name of the company with lowest revenue that has both a CEO and board members?",
    "cypher": "MATCH (company:Organization)-[:HAS_CEO]->(ceo:Person), (company)-[:HAS_BOARD_MEMBER]->(board:Person) WHERE company.revenue IS NOT NULL RETURN company.name AS company_name ORDER BY company.revenue ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "company_name": "RWS"
      }
    ],
    "answer": "RWS is the company with the lowest revenue that has both a CEO and board members."
  },
  {
    "question": "Find the summary of the parent company of Cloud Shrpas?",
    "cypher": "MATCH (cs:Organization {name: 'Cloud Sherpas'})<-[:HAS_SUBSIDIARY]-(parent:Organization) RETURN parent.summary AS parent_summary",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_summary": "Financial services company based in Dublin, Ireland and owned by Cloud Sherpas"
      }
    ],
    "answer": "The parent company of Cloud Sherpas is a financial services company based in Dublin, Ireland."
  },
  {
    "question": "How many subsidiaries does Microsoft Corporation have that are located in Seattle?",
    "cypher": "MATCH (m:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY]->(s:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'}) RETURN COUNT(DISTINCT s) AS subsidiary_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_count": 20
      }
    ],
    "answer": "Microsoft Corporation has 20 subsidiaries located in Seattle."
  },
  {
    "question": "What's the total revenue of companies that supply services to Mircosoft Corporation?",
    "cypher": "MATCH (m:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(s:Organization) WHERE s.revenue IS NOT NULL RETURN SUM(s.revenue) AS total_supplier_revenue",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_supplier_revenue": 307918243000.0
      }
    ],
    "answer": "The total revenue of companies supplying services to Microsoft Corporation is $307,918,243,000."
  },
  {
    "question": "Tell me the highest revenue among firms that compete with IBM's subsidiaries?",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_COMPETITOR]->(comp:Organization) WHERE comp.revenue IS NOT NULL RETURN MAX(comp.revenue) AS highest_competitor_revenue",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_competitor_revenue": 198270000000.0
      }
    ],
    "answer": "Based on the query result, the highest revenue among firms that compete with IBM's subsidiaries is $198,270,000,000."
  },
  {
    "question": "How many different investors does Infinite Analytics have through all its connections?",
    "cypher": "MATCH (ia:Organization {name: 'Infinite Analytics'})-[:HAS_INVESTOR]->(investor) RETURN COUNT(DISTINCT investor) AS total_investors",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_investors": 9
      }
    ],
    "answer": "Infinite Analytics has 9 different investors."
  },
  {
    "question": "Count the number of articles that mention organizations invested in by John Hancock Investments?",
    "cypher": "MATCH (jhi:Organization {name: 'John Hancock Investments'})<-[:HAS_INVESTOR]-(org:Organization)<-[:MENTIONS]-(article:Article) RETURN COUNT(DISTINCT article) AS article_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_count": 0
      }
    ],
    "answer": "Based on the query result, there are 0 articles that mention organizations invested in by John Hancock Investments."
  },
  {
    "question": "What's the motto of the company that has the most employees among Microsoft's suppliers?",
    "cypher": "MATCH (m:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(s:Organization) WHERE s.nbrEmployees IS NOT NULL ORDER BY s.nbrEmployees DESC LIMIT 1 RETURN s.motto AS largest_supplier_motto",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "largest_supplier_motto": ""
      }
    ],
    "answer": "UNKNOWN\n\nThe query result shows an empty motto, and without additional context about the motto, I cannot confidently answer the question about the largest supplier's motto."
  },
  {
    "question": "How many board members does Accenture have across all its subsidiarys?",
    "cypher": "MATCH (a:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_BOARD_MEMBER]->(board:Person) RETURN COUNT(DISTINCT board) AS total_board_members",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_board_members": 118
      }
    ],
    "answer": "Accenture has 118 board members across its subsidiaries."
  },
  {
    "question": "Find the average number of employees in organizations that have investors from the same city as New Relic?",
    "cypher": "MATCH (nr:Organization {name: 'New Relic'})-[:IN_CITY]->(city:City)<-[:IN_CITY]-(investor:Organization)-[:HAS_INVESTOR]->(org:Organization) WHERE org.nbrEmployees IS NOT NULL RETURN AVG(org.nbrEmployees) AS average_employee_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_employee_count": 5603.974576271183
      }
    ],
    "answer": "The average number of employees in organizations that have investors from the same city as New Relic is approximately 5,604 employees."
  },
  {
    "question": "What's the industry category of companys that supply services to Oracle's competitors?",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(comp:Organization)<-[:HAS_SUPPLIER]-(supp:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) RETURN cat.name AS supplier_category LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_category": "Electronic Products Manufacturers"
      }
    ],
    "answer": "Based on the query result, one industry category of companies that supply services to Oracle's competitors is Electronic Products Manufacturers."
  },
  {
    "question": "What's the lowest revenue among public companies that have subsidiaries in Seattle?",
    "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City {name: 'Seattle'}) WHERE parent.isPublic = true AND parent.revenue IS NOT NULL RETURN MIN(parent.revenue) AS lowest_revenue",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "lowest_revenue": 2695000000.0
      }
    ],
    "answer": "The lowest revenue among public companies with subsidiaries in Seattle is $2,695,000,000."
  },
  {
    "question": "Tell me the total nbrEmployees working at IBM's subsidiaries?",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.nbrEmployees IS NOT NULL RETURN SUM(sub.nbrEmployees) AS total_subsidiary_employees",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_subsidiary_employees": 0
      }
    ],
    "answer": "Based on the query result, the total number of employees at IBM's subsidiaries is 0. This could mean either that the subsidiaries have no recorded employees or that the employee data is missing in the database."
  },
  {
    "question": "What's the name of folks who serve as board members for Microsoft's suppliers?",
    "cypher": "MATCH (m:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_BOARD_MEMBER]->(board:Person) RETURN board.name AS board_member_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "board_member_name": "Julie Spellman Sweet"
      }
    ],
    "answer": "Julie Spellman Sweet is a board member for one of Microsoft's suppliers, based on the available data."
  },
  {
    "question": "Count how many dissolved companies are subsidiaries of organizations mentioned in articles?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(parent:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.isDissolved = true RETURN COUNT(DISTINCT sub) AS dissolved_subsidiary_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "dissolved_subsidiary_count": 162
      }
    ],
    "answer": "There are 162 dissolved companies that are subsidiaries of organizations mentioned in articles."
  },
  {
    "question": "What's the highest sentiment score of articles mentioning New Energy Group?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(org:Organization {name: 'New Energy Group'}) WHERE article.sentiment IS NOT NULL RETURN MAX(article.sentiment) AS highest_sentiment",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_sentiment": NaN
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returned 'nan' (Not a Number), which suggests there is no valid sentiment score available for articles mentioning New Energy Group."
  },
  {
    "question": "How many subsidiaries connect SAP to companies in the Electronic Products Manufacturers category?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub1:Organization)-[:HAS_SUBSIDIARY]->(sub2:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory {name: 'Electronic Products Manufacturers'}) RETURN COUNT(DISTINCT sub1) AS connecting_subsidiaries",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connecting_subsidiaries": 0
      }
    ],
    "answer": "The query result shows 0 subsidiaries connecting SAP to companies in the Electronic Products Manufacturers category."
  },
  {
    "question": "Find the average revenue of biz that compete with Oracle's suppliers?",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})<-[:HAS_SUPPLIER]-(supp:Organization)-[:HAS_COMPETITOR]->(comp:Organization) WHERE comp.revenue IS NOT NULL RETURN AVG(comp.revenue) AS average_competitor_revenue",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_competitor_revenue": 71006844603.1746
      }
    ],
    "answer": "The average revenue of businesses that compete with Oracle's suppliers is approximately $71 billion."
  },
  {
    "question": "How many cities are connected to organizations that have IBM as a supplier?",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(customer:Organization)-[:IN_CITY]->(city:City) RETURN COUNT(DISTINCT city) AS city_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_count": 3522
      }
    ],
    "answer": "3,522 cities are connected to organizations that have IBM as a supplier."
  },
  {
    "question": "What's the diffbotId of the subsidiary of Accenture that's dissolved?",
    "cypher": "MATCH (a:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.isDissolved = true RETURN sub.diffbotId AS dissolved_subsidiary_id LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "dissolved_subsidiary_id": "https://diffbot.com/entity/E9a1BZJhKPpCp8k-M0lYOrA"
      }
    ],
    "answer": "The diffbotId of the dissolved subsidiary of Accenture is 'https://diffbot.com/entity/E9a1BZJhKPpCp8k-M0lYOrA'."
  },
  {
    "question": "Tell me the smallest number of employees among firms located in cities where SAP has subsidiaries?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City)<-[:IN_CITY]-(other:Organization) WHERE other.nbrEmployees IS NOT NULL RETURN MIN(other.nbrEmployees) AS minimum_employees",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "minimum_employees": 1
      }
    ],
    "answer": "The smallest number of employees among firms located in cities where SAP has subsidiaries is 1."
  },
  {
    "question": "How many investors does John Hancock Investements have through its portfolio companies?",
    "cypher": "MATCH (jhi:Organization {name: 'John Hancock Investments'})-[:HAS_INVESTOR]->(portfolio:Organization)-[:HAS_INVESTOR]->(investor) RETURN COUNT(DISTINCT investor) AS investor_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_count": 9
      }
    ],
    "answer": "John Hancock Investments has 9 distinct investors through its portfolio companies."
  },
  {
    "question": "What's the peak number of employees in companys that are mentioned in articles about IBM?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(ibm:Organization {name: 'IBM'}), (article)-[:MENTIONS]->(other:Organization) WHERE other.nbrEmployees IS NOT NULL RETURN MAX(other.nbrEmployees) AS highest_employee_count",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_employee_count": 221000
      }
    ],
    "answer": "Based on the query result, the peak number of employees in companies mentioned in articles about IBM is 221,000."
  },
  {
    "question": "Find the name of the parent company of IBM Research?",
    "cypher": "MATCH (ibmr:Organization {name: 'IBM Research'})<-[:HAS_SUBSIDIARY]-(parent:Organization) RETURN parent.name AS parent_company_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_company_name": "IBM"
      }
    ],
    "answer": "The parent company of IBM Research is IBM."
  },
  {
    "question": "How many different industry categories are represented by Altium's subsidiaries and their partners?",
    "cypher": "MATCH (a:Organization {name: 'Altium'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_SUPPLIER|HAS_COMPETITOR]-(partner:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) RETURN COUNT(DISTINCT cat) AS category_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "category_count": 0
      }
    ],
    "answer": "UNKNOWN\n\nThe query returned zero distinct industry categories, which could mean either:\n1. No categories were found, or\n2. The database might not have complete relationship or category data for Altium's subsidiaries and partners.\n\nWithout additional context or verification, I cannot confidently state the number of industry categories."
  },
  {
    "question": "Show me the motto of the corp with the highest revenue that supplies to Oracle?",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})<-[:HAS_SUPPLIER]-(s:Organization) WHERE s.revenue IS NOT NULL ORDER BY s.revenue DESC LIMIT 1 RETURN s.motto AS top_supplier_motto",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "top_supplier_motto": ""
      }
    ],
    "answer": "UNKNOWN\n\nThe query result shows an empty motto field, and while the query was constructed to find the highest-revenue supplier to Oracle, no meaningful motto information was retrieved."
  },
  {
    "question": "What country contains the most subsidiaries of SAP?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) WITH country, COUNT(DISTINCT sub) AS sub_count ORDER BY sub_count DESC LIMIT 1 RETURN country.name AS top_country",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "top_country": "United States of America"
      }
    ],
    "answer": "Based on the query result, the United States of America contains the most subsidiaries of SAP."
  },
  {
    "question": "How many board members serve companies that compete with Microsft Corporation's subsidiaries?",
    "cypher": "MATCH (m:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_COMPETITOR]->(comp:Organization)-[:HAS_BOARD_MEMBER]->(board:Person) RETURN COUNT(DISTINCT board) AS board_member_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "board_member_count": 316
      }
    ],
    "answer": "Based on the query result, 316 board members serve companies that compete with Microsoft Corporation's subsidiaries."
  },
  {
    "question": "Find the date of the oldest article mentioning New Energy Group?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(org:Organization {name: 'New Energy Group'}) WHERE article.date IS NOT NULL ORDER BY article.date ASC LIMIT 1 RETURN article.date AS oldest_article_date",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "oldest_article_date": "2017-01-13T00:00:00.000000000+00:00"
      }
    ],
    "answer": "The oldest article mentioning New Energy Group is dated January 13, 2017."
  },
  {
    "question": "How many organizations serve as a bridge between IBM and companies in Seattle through subsidiary relationships?",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})-[:HAS_SUBSIDIARY]->(bridge:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City {name: 'Seattle'}) RETURN COUNT(DISTINCT bridge) AS bridge_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "bridge_count": 0
      }
    ],
    "answer": "Based on the query result, there are 0 organizations that serve as a bridge between IBM and companies in Seattle through subsidiary relationships."
  },
  {
    "question": "Count all the different sitenames that publish articles about Microsoft's suppliers?",
    "cypher": "MATCH (m:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(s:Organization)<-[:MENTIONS]-(article:Article) RETURN COUNT(DISTINCT article.siteName) AS unique_sites",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "unique_sites": 1346
      }
    ],
    "answer": "There are 1,346 unique sites that publish articles about Microsoft's suppliers."
  },
  {
    "question": "What's the name of the subsidiary that connects SAP to the city of Topsfield?",
    "cypher": "MATCH (sap:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City {name: 'Topsfield'}) RETURN sub.name AS connecting_subsidiary",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connecting_subsidiary": "Concur"
      }
    ],
    "answer": "Concur is the subsidiary of SAP that connects to the city of Topsfield."
  },
  {
    "question": "Find the minimum sentiment score among articles that mention orgs invested by John Hancock Investments?",
    "cypher": "MATCH (jhi:Organization {name: 'John Hancock Investments'})-[:HAS_INVESTOR]->(portfolio:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment IS NOT NULL RETURN MIN(article.sentiment) AS lowest_sentiment",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "lowest_sentiment": 0.298
      }
    ],
    "answer": "The minimum sentiment score among articles that mention organizations invested by John Hancock Investments is 0.298."
  },
  {
    "question": "How many supplier relationships exist between companies located in the United States of America?",
    "cypher": "MATCH (org1:Organization)-[:IN_CITY]->(city1:City)-[:IN_COUNTRY]->(usa:Country {name: 'United States of America'})<-[:IN_COUNTRY]-(city2:City)<-[:IN_CITY]-(org2:Organization), (org1)-[:HAS_SUPPLIER]->(org2) RETURN COUNT(DISTINCT org1) AS us_supplier_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "us_supplier_count": 936
      }
    ],
    "answer": "There are 936 unique supplier relationships between companies located in the United States of America."
  },
  {
    "question": "What's the isPublic status of the organization with the most subsidiaries?",
    "cypher": "MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WITH parent, COUNT(DISTINCT sub) AS sub_count ORDER BY sub_count DESC LIMIT 1 RETURN parent.isPublic AS public_status",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "public_status": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query result shows a null/None value for isPublic status, and while the query successfully identified the organization with the most subsidiaries, it did not return a definitive public/private status."
  },
  {
    "question": "What's the author name who wrote the most positive article about Infinite Analytics?",
    "cypher": "MATCH (article:Article)-[:MENTIONS]->(ia:Organization {name: 'Infinite Analytics'}) WHERE article.sentiment IS NOT NULL AND article.author IS NOT NULL ORDER BY article.sentiment DESC LIMIT 1 RETURN article.author AS top_author",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "top_author": "Infinite Analytics"
      }
    ],
    "answer": "UNKNOWN\n\nThe query result shows 'Infinite Analytics' as the top author, which seems unusual and potentially an issue with the data or query. The result does not provide a meaningful answer to the question about the author of the most positive article about Infinite Analytics."
  },
  {
    "question": "Find how many companys mentioned in Reuters articles have connections to Seattle-based organizations?",
    "cypher": "MATCH (article:Article {siteName: 'Reuters'})-[:MENTIONS]->(org1:Organization)-[:HAS_SUPPLIER|HAS_SUBSIDIARY|HAS_COMPETITOR*1..2]-(org2:Organization)-[:IN_CITY]->(city:City {name: 'Seattle'}) RETURN COUNT(DISTINCT org1) AS connected_company_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connected_company_count": 256
      }
    ],
    "answer": "Based on the query result, 256 companies mentioned in Reuters articles have connections to Seattle-based organizations through supplier, subsidiary, or competitor relationships."
  },
  {
    "question": "What's spiukbs' follower count?",
    "cypher": "MATCH (s:Stream {name: 'spiukbs'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 159814
      }
    ],
    "answer": "spiukbs has 159,814 followers."
  },
  {
    "question": "How many viewers has itsbigchase accumulated in total?",
    "cypher": "MATCH (s:Stream {name: 'itsbigchase'}) RETURN s.total_view_count AS total_views",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 569603
      }
    ],
    "answer": "itsbigchase has accumulated a total of 569,603 viewers."
  },
  {
    "question": "What's the description for deshplease's channel?",
    "cypher": "MATCH (s:Stream {name: 'deshplease'}) RETURN s.description AS channel_description",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "channel_description": "Cotton Candy NIGHTMARE Fuel"
      }
    ],
    "answer": "The description for deshplease's channel is \"Cotton Candy NIGHTMARE Fuel\"."
  },
  {
    "question": "Tell me fengrush's total view count",
    "cypher": "MATCH (s:Stream {name: 'fengrush'}) RETURN s.total_view_count AS total_views",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 107365515
      }
    ],
    "answer": "Fengrush has a total view count of 107,365,515."
  },
  {
    "question": "What's the URL for anaseu's stream?",
    "cypher": "MATCH (s:Stream {name: 'anaseu'}) RETURN s.url AS stream_url",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_url": "https://www.twitch.tv/anaseu"
      }
    ],
    "answer": "The URL for anaseu's stream is https://www.twitch.tv/anaseu."
  },
  {
    "question": "How many followers does 9linda have?",
    "cypher": "MATCH (s:Stream {name: '9linda'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 5272
      }
    ],
    "answer": "9linda has 5,272 followers."
  },
  {
    "question": "What's cacarov's channel description?",
    "cypher": "MATCH (s:Stream {name: 'cacarov'}) RETURN s.description AS channel_description",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "channel_description": "\u0130n\u015faat\u00e7\u0131"
      }
    ],
    "answer": "Based on the query result, cacarov's channel description is \"\u0130n\u015faat\u00e7\u0131\"."
  },
  {
    "question": "Show me ninja614's follower count",
    "cypher": "MATCH (s:Stream {name: 'ninja614'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 38758
      }
    ],
    "answer": "ninja614 has 38,758 followers."
  },
  {
    "question": "What's luckyghost's total view count?",
    "cypher": "MATCH (s:Stream {name: 'luckyghost'}) RETURN s.total_view_count AS total_views",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 2233148
      }
    ],
    "answer": "luckyghost has a total view count of 2,233,148 views."
  },
  {
    "question": "Tell me the follower count for syna",
    "cypher": "MATCH (s:Stream {name: 'syna'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 105177
      }
    ],
    "answer": "Syna has 105,177 followers."
  },
  {
    "question": "What's agustabell212's stream URL?",
    "cypher": "MATCH (s:Stream {name: 'agustabell212'}) RETURN s.url AS stream_url",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_url": "https://www.twitch.tv/agustabell212"
      }
    ],
    "answer": "https://www.twitch.tv/agustabell212"
  },
  {
    "question": "How many total views does creightonolsen have?",
    "cypher": "MATCH (s:Stream {name: 'creightonolsen'}) RETURN s.total_view_count AS total_views",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 573613
      }
    ],
    "answer": "Creightonolsen has a total of 573,613 views."
  },
  {
    "question": "What's atlanticdk's follower count?",
    "cypher": "MATCH (s:Stream {name: 'atlanticdk'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 3231
      }
    ],
    "answer": "atlanticdk has 3,231 followers."
  },
  {
    "question": "Show me romandoduik's total views",
    "cypher": "MATCH (s:Stream {name: 'romandoduik'}) RETURN s.total_view_count AS total_views",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 3100
      }
    ],
    "answer": "romandoduik has a total of 3,100 views."
  },
  {
    "question": "What's pavagagg's channel description?",
    "cypher": "MATCH (s:Stream {name: 'pavagagg'}) RETURN s.description AS channel_description",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "channel_description": "Made in Belarus"
      }
    ],
    "answer": "Pavagagg's channel description is \"Made in Belarus\"."
  },
  {
    "question": "Tell me the ESO Stream Team's ID",
    "cypher": "MATCH (t:Team {name: 'ESO Stream Team'}) RETURN t.id AS team_id",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_id": "5893"
      }
    ],
    "answer": "The ESO Stream Team's ID is 5893."
  },
  {
    "question": "What's itsbigchse's follower count?",
    "cypher": "MATCH (s:Stream {name: 'itsbigchase'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 33366
      }
    ],
    "answer": "itsbigchase has 33,366 followers."
  },
  {
    "question": "What game does itsbigchase play?",
    "cypher": "MATCH (s:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game) RETURN g.name AS game_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Rust"
      }
    ],
    "answer": "itsbigchase plays Rust."
  },
  {
    "question": "What language does 9linda stream in?",
    "cypher": "MATCH (s:Stream {name: '9linda'})-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS language_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "ru"
      }
    ],
    "answer": "9linda streams in Russian (ru)."
  },
  {
    "question": "How many moderators does spiukbs have?",
    "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream {name: 'spiukbs'}) RETURN COUNT(u) AS moderator_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 7
      }
    ],
    "answer": "spiukbs has 7 moderators."
  },
  {
    "question": "How many folks moderate anaseu's channel?",
    "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream {name: 'anaseu'}) RETURN COUNT(u) AS moderator_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 8
      }
    ],
    "answer": "8 folks moderate anaseu's channel."
  },
  {
    "question": "What language does creightonolsen use for streaming?",
    "cypher": "MATCH (s:Stream {name: 'creightonolsen'})-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS language_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "en"
      }
    ],
    "answer": "The language used by creightonolsen for streaming is English (en)."
  },
  {
    "question": "How many chatters does deshplease have?",
    "cypher": "MATCH (u:User)-[:CHATTER]->(s:Stream {name: 'deshplease'}) RETURN COUNT(u) AS chatter_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "chatter_count": 19
      }
    ],
    "answer": "deshplease has 19 chatters."
  },
  {
    "question": "What's the name of luckyghost's team?",
    "cypher": "MATCH (s:Stream {name: 'luckyghost'})-[:HAS_TEAM]->(t:Team) RETURN t.name AS team_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_name": "ESO Stream Team"
      }
    ],
    "answer": "luckyghost's team is ESO Stream Team."
  },
  {
    "question": "How many streamers play Rust?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) RETURN COUNT(s) AS streamer_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "streamer_count": 47
      }
    ],
    "answer": "47 streamers play Rust."
  },
  {
    "question": "How many streams are in English?",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN COUNT(s) AS stream_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_count": 2344
      }
    ],
    "answer": "There are 2,344 streams in English."
  },
  {
    "question": "What's the total follower count for all Rust streamers?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) RETURN SUM(s.followers) AS total_followers",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_followers": 5061144
      }
    ],
    "answer": "The total follower count for all Rust streamers is 5,061,144."
  },
  {
    "question": "How many channels are in the ESO Stream Team?",
    "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'}) RETURN COUNT(s) AS channel_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "channel_count": 5
      }
    ],
    "answer": "The ESO Stream Team has 5 channels."
  },
  {
    "question": "What's the average follower count for streams playing The Elder Scrolls Online?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'The Elder Scrolls Online'}) RETURN AVG(s.followers) AS average_followers",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_followers": 66052.0
      }
    ],
    "answer": "Based on the query result, the average follower count for streams playing The Elder Scrolls Online is 66,052 followers."
  },
  {
    "question": "How many VIPs does synas have?",
    "cypher": "MATCH (u:User)-[:VIP]->(s:Stream {name: 'syna'}) RETURN COUNT(u) AS vip_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "vip_count": 0
      }
    ],
    "answer": "0 VIPs."
  },
  {
    "question": "What's the highest view count among Russian language streams?",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'}) WHERE s.total_view_count IS NOT NULL RETURN MAX(s.total_view_count) AS max_views",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "max_views": 287407089
      }
    ],
    "answer": "The highest view count among Russian language streams is 287,407,089 views."
  },
  {
    "question": "What's the total follower count for streamers who share a game with 9linda?",
    "cypher": "MATCH (s1:Stream {name: '9linda'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream) WHERE s1 <> s2 RETURN SUM(s2.followers) AS total_followers",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_followers": 5055872
      }
    ],
    "answer": "The total follower count for streamers who share a game with 9linda is 5,055,872."
  },
  {
    "question": "How many folks moderate channels that haraldinho_ also moderates?",
    "cypher": "MATCH (u1:User {name: 'haraldinho_'})-[:MODERATOR]->(s:Stream)<-[:MODERATOR]-(u2:User) WHERE u1 <> u2 RETURN COUNT(DISTINCT u2) AS moderator_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 7
      }
    ],
    "answer": "7 other users moderate channels that haraldinho_ also moderates."
  },
  {
    "question": "How many chatters do streamers who play Rust have in total?",
    "cypher": "MATCH (g:Game {name: 'Rust'})<-[:PLAYS]-(s:Stream)<-[:CHATTER]-(u:User) RETURN COUNT(u) AS total_chatters",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_chatters": 602990
      }
    ],
    "answer": "Streamers who play Rust have a total of 602,990 chatters."
  },
  {
    "question": "What's the average view count for channels moderated by imcoma?",
    "cypher": "MATCH (u:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream) RETURN AVG(s.total_view_count) AS average_views",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_views": 569603.0
      }
    ],
    "answer": "The average view count for channels moderated by imcoma is 569,603 views."
  },
  {
    "question": "How many streamers share mods with spiukbs?",
    "cypher": "MATCH (s1:Stream {name: 'spiukbs'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream) WHERE s1 <> s2 RETURN COUNT(DISTINCT s2) AS shared_mod_streams",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "shared_mod_streams": 3091
      }
    ],
    "answer": "3,091 streamers share moderators with spiukbs."
  },
  {
    "question": "What's the total follower count for channels that share chatters with deshplease?",
    "cypher": "MATCH (s1:Stream {name: 'deshplease'})<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream) WHERE s1 <> s2 RETURN SUM(s2.followers) AS total_followers",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_followers": 5992824751
      }
    ],
    "answer": "The total follower count for channels that share chatters with deshplease is 5,992,824,751."
  },
  {
    "question": "How many streamers are connected through the user business_daddy?",
    "cypher": "MATCH (u:User {name: 'business_daddy'})-[:CHATTER|MODERATOR|VIP]->(s:Stream) RETURN COUNT(DISTINCT s) AS connected_streams",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connected_streams": 1351
      }
    ],
    "answer": "The user 'business_daddy' is connected to 1,351 distinct streams through various roles such as chatter, moderator, or VIP."
  },
  {
    "question": "What language do channels with the most viwers use?",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count IS NOT NULL ORDER BY s.total_view_count DESC LIMIT 1 RETURN l.name AS language_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "en"
      }
    ],
    "answer": "Based on the query result, the language used by the channel with the most viewers is English (en)."
  },
  {
    "question": "How many ppl moderate the same channels as soydas06?",
    "cypher": "MATCH (u1:User {name: 'soydas06'})-[:MODERATOR]->(s:Stream)<-[:MODERATOR]-(u2:User) WHERE u1 <> u2 RETURN COUNT(DISTINCT u2) AS co_moderator_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "co_moderator_count": 19
      }
    ],
    "answer": "19 people moderate the same channels as soydas06."
  },
  {
    "question": "What's the highest follower count among channels that comettunes chats in?",
    "cypher": "MATCH (u:User {name: 'comettunes'})-[:CHATTER]->(s:Stream) WHERE s.followers IS NOT NULL RETURN MAX(s.followers) AS max_followers",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "max_followers": 9073161
      }
    ],
    "answer": "The highest follower count among channels that comettunes chats in is 9,073,161."
  },
  {
    "question": "How many streamers play the same game as fengrush?",
    "cypher": "MATCH (s1:Stream {name: 'fengrush'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream) WHERE s1 <> s2 RETURN COUNT(DISTINCT s2) AS co_player_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "co_player_count": 21
      }
    ],
    "answer": "21 other streamers play the same game as Fengrush."
  },
  {
    "question": "What's the total view count for all streamers in anaseus language?",
    "cypher": "MATCH (s1:Stream {name: 'anaseu'})-[:HAS_LANGUAGE]->(l:Language)<-[:HAS_LANGUAGE]-(s2:Stream) RETURN SUM(s2.total_view_count) AS total_views",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 27091501192
      }
    ],
    "answer": "The total view count for all streamers in the Anaseu language is 27,091,501,192 views."
  },
  {
    "question": "How many channels does rubiz moderate?",
    "cypher": "MATCH (u:User {name: 'rubiz'})-[:MODERATOR]->(s:Stream) RETURN COUNT(s) AS moderated_channels",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderated_channels": 1
      }
    ],
    "answer": "Rubiz moderates 1 channel."
  },
  {
    "question": "What's the avg follower count for streamers who share VIPs with lucky ghost?",
    "cypher": "MATCH (s1:Stream {name: 'luckyghost'})<-[:VIP]-(u:User)-[:VIP]->(s2:Stream) WHERE s1 <> s2 RETURN AVG(s2.followers) AS average_followers",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_followers": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returned None for the average followers, which could mean either no results were found or the followers data is missing. Without a clear numeric value, I cannot confidently state the average follower count."
  },
  {
    "question": "How many streamers play Rust who have moderators that also moderate channels streaming in Russian?",
    "cypher": "MATCH (s1:Stream)-[:PLAYS]->(:Game {name: 'Rust'}), (s1)<-[:MODERATOR]-(mod:User)-[:MODERATOR]->(s2:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'ru'}) RETURN COUNT(DISTINCT s1) AS total_streamers",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_streamers": 46
      }
    ],
    "answer": "46 streamers who play Rust have moderators that also moderate channels streaming in Russian."
  },
  {
    "question": "What's the total view count of all streamers who are part of the ESO Stream Team?",
    "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}) WHERE s.total_view_count IS NOT NULL RETURN SUM(s.total_view_count) AS total_views",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 1561603359
      }
    ],
    "answer": "The total view count of all streamers in the ESO Stream Team is 1,561,603,359 views."
  },
  {
    "question": "Tell me the game that connects streamers itsbigchase and 9linda",
    "cypher": "MATCH (s1:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream {name: '9linda'}) RETURN g.name AS connecting_game LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connecting_game": "Rust"
      }
    ],
    "answer": "Based on the query result, the game that connects streamers itsbigchase and 9linda is Rust."
  },
  {
    "question": "What's the highest follower count among channels that have evariss as a mod?",
    "cypher": "MATCH (u:User {name: 'evariss'})-[:MODERATOR]->(s:Stream) WHERE s.followers IS NOT NULL RETURN MAX(s.followers) AS highest_followers",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "highest_followers": 105177
      }
    ],
    "answer": "105,177 is the highest follower count among channels where evariss is a moderator."
  },
  {
    "question": "How many mods does the channel synas have who also moderate other channels?",
    "cypher": "MATCH (s1:Stream {name: 'syna'})<-[:MODERATOR]-(mod:User)-[:MODERATOR]->(s2:Stream) WHERE s1 <> s2 RETURN COUNT(DISTINCT mod) AS shared_moderators",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "shared_moderators": 4
      }
    ],
    "answer": "4 mods who moderate the channel synas also moderate other channels."
  },
  {
    "question": "What's the average follower count of streamers playing The Elder Scrolls Online?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'The Elder Scrolls Online'}) WHERE s.followers IS NOT NULL RETURN AVG(s.followers) AS average_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_followers": 66052.0
      }
    ],
    "answer": "The average follower count for streamers playing The Elder Scrolls Online is 66,052."
  },
  {
    "question": "Which language does the stream pavagagg broadcast in?",
    "cypher": "MATCH (s:Stream {name: 'pavagagg'})-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS broadcast_language",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "broadcast_language": "ru"
      }
    ],
    "answer": "The stream pavagagg broadcasts in Russian (ru)."
  },
  {
    "question": "Find the lowest total view count among folks who moderate for anaseu",
    "cypher": "MATCH (s1:Stream {name: 'anaseu'})<-[:MODERATOR]-(mod:User)-[:MODERATOR]->(s2:Stream) WHERE s2.total_view_count IS NOT NULL AND mod:Stream RETURN MIN(mod.total_view_count) AS lowest_views",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "lowest_views": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query returned None, which suggests there might be an issue with the data retrieval or the query itself. I cannot confidently provide a lowest total view count based on this result."
  },
  {
    "question": "How many different games are played by streamers who share moderators with spiukbs?",
    "cypher": "MATCH (s1:Stream {name: 'spiukbs'})<-[:MODERATOR]-(mod:User)-[:MODERATOR]->(s2:Stream)-[:PLAYS]->(g:Game) WHERE s1 <> s2 RETURN COUNT(DISTINCT g) AS total_games",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_games": 378
      }
    ],
    "answer": "378 different games are played by streamers who share moderators with spiukbs."
  },
  {
    "question": "What's the team name that luckyghost belongs to?",
    "cypher": "MATCH (s:Stream {name: 'luckyghost'})-[:HAS_TEAM]->(t:Team) RETURN t.name AS team_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_name": "ESO Stream Team"
      }
    ],
    "answer": "The team name that luckyghost belongs to is ESO Stream Team."
  },
  {
    "question": "What's the peak follower count among Russian-speaking channels playing Rust?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}), (s)-[:HAS_LANGUAGE]->(:Language {name: 'ru'}) WHERE s.followers IS NOT NULL RETURN MAX(s.followers) AS peak_followers",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "peak_followers": 34332
      }
    ],
    "answer": "The peak follower count among Russian-speaking Rust channels is 34,332."
  },
  {
    "question": "Count how many users are chatters in streams that haraldinho_ moderates",
    "cypher": "MATCH (u1:User {name: 'haraldinho_'})-[:MODERATOR]->(s:Stream)<-[:CHATTER]-(u2:User) RETURN COUNT(DISTINCT u2) AS total_chatters",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_chatters": 855
      }
    ],
    "answer": "There are 855 unique users who are chatters in streams moderated by haraldinho_."
  },
  {
    "question": "What's the total follower count for all English-language streams?",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) WHERE s.followers IS NOT NULL RETURN SUM(s.followers) AS total_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_followers": 500827249
      }
    ],
    "answer": "The total follower count for all English-language streams is 500,827,249."
  },
  {
    "question": "Show me the URL of the channel named cacarov",
    "cypher": "MATCH (s:Stream {name: 'cacarov'}) RETURN s.url AS channel_url",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "channel_url": "https://www.twitch.tv/cacarov"
      }
    ],
    "answer": "The URL of the channel named cacarov is https://www.twitch.tv/cacarov."
  },
  {
    "question": "What's the earliest creation date among streams moderated by users who also mod for itsbigchase?",
    "cypher": "MATCH (s1:Stream {name: 'itsbigchase'})<-[:MODERATOR]-(mod:User)-[:MODERATOR]->(s2:Stream) WHERE s2.createdAt IS NOT NULL AND s1 <> s2 RETURN MIN(s2.createdAt) AS earliest_date",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "earliest_date": "2007-05-22T10:39:53.259969000+00:00"
      }
    ],
    "answer": "The earliest stream creation date among streams moderated by users who also moderate for itsbigchase is May 22, 2007 at 10:39:53 AM UTC."
  },
  {
    "question": "How many channles have both VIP and moderator relationships with the same user?",
    "cypher": "MATCH (u:User)-[:VIP]->(s:Stream), (u)-[:MODERATOR]->(s) RETURN COUNT(DISTINCT s) AS dual_role_channels",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "dual_role_channels": 17
      }
    ],
    "answer": "Based on the query result, there are 17 channels where a user has both VIP and moderator relationships."
  },
  {
    "question": "What's the average view count of streams that play the same games as fengrush?",
    "cypher": "MATCH (s1:Stream {name: 'fengrush'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream) WHERE s2.total_view_count IS NOT NULL AND s1 <> s2 RETURN AVG(s2.total_view_count) AS average_views",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_views": 8486067.571428573
      }
    ],
    "answer": "The average view count of streams that play the same games as Fengrush is approximately 8,486,068 views."
  },
  {
    "question": "Find the description of the stream agustabell212",
    "cypher": "MATCH (s:Stream {name: 'agustabell212'}) RETURN s.description AS stream_description",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": ""
      }
    ],
    "answer": "The query result indicates that the stream 'agustabell212' exists, but its description is an empty string. Therefore, I cannot provide a meaningful description for this stream based on the available data."
  },
  {
    "question": "Which stream has the highest view count among those with comettunes as a chatter?",
    "cypher": "MATCH (u:User {name: 'comettunes'})-[:CHATTER]->(s:Stream) WHERE s.total_view_count IS NOT NULL RETURN MAX(s.total_view_count) AS highest_views",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "highest_views": 1451487256
      }
    ],
    "answer": "The stream with the highest view count among those where comettunes was a chatter has 1,451,487,256 views."
  },
  {
    "question": "How many different streamers can rubiz reach through moderator connections within 2 hops?",
    "cypher": "MATCH (u:User {name: 'rubiz'})-[:MODERATOR*1..2]->(s:Stream) RETURN COUNT(DISTINCT s) AS reachable_streamers",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "reachable_streamers": 1
      }
    ],
    "answer": "Based on the query result, rubiz can reach 1 different streamer through moderator connections within 2 hops."
  },
  {
    "question": "What's the sum of followers for all streams that have business_daddy as a chatter?",
    "cypher": "MATCH (u:User {name: 'business_daddy'})-[:CHATTER]->(s:Stream) WHERE s.followers IS NOT NULL RETURN SUM(s.followers) AS total_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_followers": 303766082
      }
    ],
    "answer": "The sum of followers for all streams that have business_daddy as a chatter is 303,766,082."
  },
  {
    "question": "Tell me what game ninja614 streams",
    "cypher": "MATCH (s:Stream {name: 'ninja614'})-[:PLAYS]->(g:Game) RETURN g.name AS game_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "The Elder Scrolls Online"
      }
    ],
    "answer": "Ninja614 streams The Elder Scrolls Online."
  },
  {
    "question": "What's the minimum follower count among channels in the ESO Stream Team?",
    "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}) WHERE s.followers IS NOT NULL RETURN MIN(s.followers) AS minimum_followers",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "minimum_followers": 10554
      }
    ],
    "answer": "The minimum follower count among channels in the ESO Stream Team is 10,554."
  },
  {
    "question": "How many paths connect soydas06 to channels playing Rust through moderator relationships?",
    "cypher": "MATCH path = (u:User {name: 'soydas06'})-[:MODERATOR*1..3]->(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN COUNT(path) AS connection_paths",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connection_paths": 1
      }
    ],
    "answer": "Based on the query result, there is 1 path connecting the user soydas06 to channels playing Rust through moderator relationships."
  },
  {
    "question": "Count the total number of VIP users across all chanels",
    "cypher": "MATCH (u:User)-[:VIP]->(s:Stream) RETURN COUNT(DISTINCT u) AS total_vips",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_vips": 25632
      }
    ],
    "answer": "There are 25,632 unique VIP users across all channels."
  },
  {
    "question": "What's the ID of the stream deshplease?",
    "cypher": "MATCH (s:Stream {name: 'deshplease'}) RETURN s.id AS stream_id",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_id": "436815633"
      }
    ],
    "answer": "The ID of the stream deshplease is 436815633."
  },
  {
    "question": "Find the streamer with maximum followers who shares a chatter with creightonolsen",
    "cypher": "MATCH (s1:Stream {name: 'creightonolsen'})<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream) WHERE s2.followers IS NOT NULL AND s1 <> s2 RETURN s2.name AS streamer_name ORDER BY s2.followers DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "streamer_name": "tfue"
      }
    ],
    "answer": "Based on the query result, the streamer with the maximum followers who shares a chatter with creightonolsen is tfue."
  },
  {
    "question": "How many mods does romandoduik share with other English-speaking streamers?",
    "cypher": "MATCH (s1:Stream {name: 'romandoduik'})<-[:MODERATOR]-(mod:User)-[:MODERATOR]->(s2:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) WHERE s1 <> s2 RETURN COUNT(DISTINCT mod) AS shared_mods",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "shared_mods": 1
      }
    ],
    "answer": "Based on the query result, romandoduik shares 1 mod with other English-speaking streamers."
  },
  {
    "question": "What's the mean total view count for streams that wickedbad4u chats in?",
    "cypher": "MATCH (u:User {name: 'wickedbad4u'})-[:CHATTER]->(s:Stream) WHERE s.total_view_count IS NOT NULL RETURN AVG(s.total_view_count) AS mean_views",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "mean_views": 1594957.0
      }
    ],
    "answer": "The mean total view count for streams that wickedbad4u chats in is 1,594,957 views."
  },
  {
    "question": "Show me the follower count of stream 9linda",
    "cypher": "MATCH (s:Stream {name: '9linda'}) RETURN s.followers AS follower_count",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 5272
      }
    ],
    "answer": "The stream 9linda has 5,272 followers."
  },
  {
    "question": "Which channel has the most view among those moderated by folks who also moderate for syna?",
    "cypher": "MATCH (s1:Stream {name: 'syna'})<-[:MODERATOR]-(mod:User)-[:MODERATOR]->(s2:Stream) WHERE s2.total_view_count IS NOT NULL AND s1 <> s2 RETURN s2.name AS channel_name ORDER BY s2.total_view_count DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "channel_name": "fextralife"
      }
    ],
    "answer": "Based on the query result, the channel with the most views among those moderated by users who also moderate for syna is fextralife."
  },
  {
    "question": "Count how many different languages are used by streamers playing games that atlanticdk also plays",
    "cypher": "MATCH (s1:Stream {name: 'atlanticdk'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s1 <> s2 RETURN COUNT(DISTINCT l) AS language_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_count": 18
      }
    ],
    "answer": "Based on the query result, there are 18 different languages used by streamers playing the same games as atlanticdk."
  },
  {
    "question": "What's the combined follower count for all streams that elokratz moderates?",
    "cypher": "MATCH (u:User {name: 'elokratz'})-[:MODERATOR]->(s:Stream) WHERE s.followers IS NOT NULL RETURN SUM(s.followers) AS combined_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "combined_followers": 159766
      }
    ],
    "answer": "The combined follower count for all streams that elokratz moderates is 159,766."
  },
  {
    "question": "Tell me the creation date of the ESO Strem Team",
    "cypher": "MATCH (t:Team {name: 'ESO Stream Team'}) RETURN t.createdAt AS creation_date",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "creation_date": "2018-11-16T13:43:00.634247000+00:00"
      }
    ],
    "answer": "The ESO Stream Team was created on November 16, 2018 at 1:43 PM UTC."
  },
  {
    "question": "What's the newest stream among those playing the same game as pavagag?",
    "cypher": "MATCH (s1:Stream {name: 'pavagagg'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream) WHERE s2.createdAt IS NOT NULL AND s1 <> s2 RETURN s2.name AS newest_stream ORDER BY s2.createdAt DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "newest_stream": "tebtvdotaru"
      }
    ],
    "answer": "Based on the query result, the newest stream playing the same game as pavagag is tebtvdotaru."
  },
  {
    "question": "How many users have raymundogalvez moderated streams in common with?",
    "cypher": "MATCH (u1:User {name: 'raymundogalvez'})-[:MODERATOR]->(s:Stream)<-[:MODERATOR]-(u2:User) WHERE u1 <> u2 RETURN COUNT(DISTINCT u2) AS co_moderators",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "co_moderators": 6
      }
    ],
    "answer": "6 users have streams in common with raymundogalvez as co-moderators."
  },
  {
    "question": "What's the average follower count for channels that have at least one VIP user?",
    "cypher": "MATCH (u:User)-[:VIP]->(s:Stream) WHERE s.followers IS NOT NULL RETURN AVG(s.followers) AS average_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_followers": 257324.34195637575
      }
    ],
    "answer": "The average follower count for channels with at least one VIP user is 257,324."
  },
  {
    "question": "Find the total view count of anaseu's stream",
    "cypher": "MATCH (s:Stream {name: 'anaseu'}) RETURN s.total_view_count AS view_count",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "view_count": 749506
      }
    ],
    "answer": "The total view count of anaseu's stream is 749,506 views."
  },
  {
    "question": "Which stream has the lowest follower count among those with imcoma as a mod?",
    "cypher": "MATCH (u:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream) WHERE s.followers IS NOT NULL RETURN s.name AS stream_name ORDER BY s.followers ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_name": "itsbigchase"
      }
    ],
    "answer": "The stream with the lowest follower count that has imcoma as a mod is itsbigchase."
  },
  {
    "question": "How many games are played by streamers connected to haraldinho_ through chatter relationships?",
    "cypher": "MATCH (u:User {name: 'haraldinho_'})-[:CHATTER]->(s1:Stream)-[:CHATTER]->(s2:Stream)-[:PLAYS]->(g:Game) RETURN COUNT(DISTINCT g) AS game_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_count": 8
      }
    ],
    "answer": "8 games are played by streamers connected to haraldinho_ through chatter relationships."
  },
  {
    "question": "Sum up all the view counts for Russian-speaking channels",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'ru'}) WHERE s.total_view_count IS NOT NULL RETURN SUM(s.total_view_count) AS total_views",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 4376617535
      }
    ],
    "answer": "The total view count for Russian-speaking channels is 4,376,617,535 views."
  },
  {
    "question": "What language does the channel atlantikdk stream in?",
    "cypher": "MATCH (s:Stream {name: 'atlanticdk'})-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS stream_language",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_language": "en"
      }
    ],
    "answer": "The channel atlantikdk streams in English (en)."
  },
  {
    "question": "Find the oldest stream among those moderated by evariss",
    "cypher": "MATCH (u:User {name: 'evariss'})-[:MODERATOR]->(s:Stream) WHERE s.createdAt IS NOT NULL RETURN s.name AS oldest_stream ORDER BY s.createdAt ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "oldest_stream": "syna"
      }
    ],
    "answer": "The oldest stream moderated by evariss is \"syna\"."
  },
  {
    "question": "How many streamers can reach the ESO Stream Team through shared games and moderators?",
    "cypher": "MATCH (s1:Stream)-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream)<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s3:Stream)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}) RETURN COUNT(DISTINCT s1) AS reachable_streamers",
    "query_type": "Existence Verification",
    "complexity": "5-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "reachable_streamers": 5622
      }
    ],
    "answer": "Based on the query result, 5,622 streamers can reach the ESO Stream Team through shared games and moderators."
  },
  {
    "question": "What's the typical follower count for folks streaming Rust?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) WHERE s.followers IS NOT NULL RETURN AVG(s.followers) AS typical_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "typical_followers": 107683.91489361701
      }
    ],
    "answer": "Based on the query result, the typical follower count for Rust streamers is approximately 107,684 followers."
  },
  {
    "question": "Show me the ID of team ESO Stream Team",
    "cypher": "MATCH (t:Team {name: 'ESO Stream Team'}) RETURN t.id AS team_id",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_id": "5893"
      }
    ],
    "answer": "The ID of the ESO Stream Team is 5893."
  },
  {
    "question": "What's the highest view count among channels that share both moderators and chatters with fengrush?",
    "cypher": "MATCH (s1:Stream {name: 'fengrush'})<-[:MODERATOR]-(mod:User)-[:MODERATOR]->(s2:Stream), (s1)<-[:CHATTER]-(chat:User)-[:CHATTER]->(s2) WHERE s2.total_view_count IS NOT NULL AND s1 <> s2 RETURN MAX(s2.total_view_count) AS highest_views",
    "query_type": "Sorting",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "highest_views": 1451487256
      }
    ],
    "answer": "The highest view count among channels that share both moderators and chatters with fengrush is 1,451,487,256 views."
  },
  {
    "question": "What's the total number of unique games played by all streamers?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN COUNT(DISTINCT g) AS total_games",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_games": 594
      }
    ],
    "answer": "Based on the query result, there are 594 unique games played by all streamers."
  },
  {
    "question": "How many distinct streamers have moderated channels that also moderate itsbigchase?",
    "cypher": "MATCH (u:User)-[:MODERATOR]->(s1:Stream)-[:MODERATOR]->(s2:Stream {name: 'itsbigchase'}) RETURN COUNT(DISTINCT u) AS total_moderators",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_moderators": 0
      }
    ],
    "answer": "Based on the query result, 0 distinct streamers have moderated channels that also moderate itsbigchase."
  },
  {
    "question": "What's the total view count of streams that play the same game as 9linda and share her language?",
    "cypher": "MATCH (s1:Stream {name: '9linda'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream), (s1)-[:HAS_LANGUAGE]->(l:Language)<-[:HAS_LANGUAGE]-(s2) WHERE s1 <> s2 RETURN SUM(s2.total_view_count) AS combined_views",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "combined_views": 1468243
      }
    ],
    "answer": "The total view count of streams that play the same game as 9linda and share her language is 1,468,243 views."
  },
  {
    "question": "What's the highest follower count among streams that have users who moderate syna?",
    "cypher": "MATCH (u:User)-[:MODERATOR]->(s1:Stream {name: 'syna'}), (u)-[:MODERATOR]->(s2:Stream) WHERE s2.followers IS NOT NULL RETURN MAX(s2.followers) AS peak_followers",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "peak_followers": 9073161
      }
    ],
    "answer": "The highest follower count among streams where users moderate syna's stream is 9,073,161 followers."
  },
  {
    "question": "How many streams connect soydas06 to the game Rust through moderation relationships?",
    "cypher": "MATCH (u:User {name: 'soydas06'})-[:MODERATOR]->(s1:Stream)-[:MODERATOR]->(s2:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) RETURN COUNT(DISTINCT s2) AS connecting_streams",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connecting_streams": 1
      }
    ],
    "answer": "Based on the query result, 1 stream connects soydas06 to the game Rust through moderation relationships."
  },
  {
    "question": "What's the average follower count of channels that share chatters with itsbigchase?",
    "cypher": "MATCH (s1:Stream {name: 'itsbigchase'})<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream) WHERE s2.followers IS NOT NULL AND s1 <> s2 RETURN AVG(s2.followers) AS average_followers",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_followers": 381063.2751915301
      }
    ],
    "answer": "The average follower count of channels that share chatters with itsbigchase is 381,063."
  },
  {
    "question": "Tell me the team name that luckyghost's stream belongs to?",
    "cypher": "MATCH (s:Stream {name: 'luckyghost'})-[:HAS_TEAM]->(t:Team) RETURN t.name AS team_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_name": "ESO Stream Team"
      }
    ],
    "answer": "luckyghost's stream belongs to the ESO Stream Team."
  },
  {
    "question": "What's the earliest creation date among streamss moderated by users who also moderate anaseu?",
    "cypher": "MATCH (s1:Stream {name: 'anaseu'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream) WHERE s2.createdAt IS NOT NULL RETURN MIN(s2.createdAt) AS earliest_date",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "earliest_date": "2007-05-22T10:39:53.259969000+00:00"
      }
    ],
    "answer": "The earliest creation date among streams moderated by users who also moderate anaseu is May 22, 2007 at 10:39:53 AM UTC."
  },
  {
    "question": "How many different games are played by folks who have chatted in streams that rubiz moderates?",
    "cypher": "MATCH (u1:User {name: 'rubiz'})-[:MODERATOR]->(s1:Stream)<-[:CHATTER]-(u2:User)-[:CHATTER]->(s2:Stream)-[:PLAYS]->(g:Game) RETURN COUNT(DISTINCT g) AS total_games",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_games": 593
      }
    ],
    "answer": "There are 593 different games played by users who have chatted in streams that rubiz moderates."
  },
  {
    "question": "What's the URL of the stream with the most followers among those playing The Elder Scrolls Online?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'The Elder Scrolls Online'}) WHERE s.followers IS NOT NULL RETURN s.url AS stream_url ORDER BY s.followers DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_url": "https://www.twitch.tv/fengrush"
      }
    ],
    "answer": "The stream with the most followers playing The Elder Scrolls Online is https://www.twitch.tv/fengrush."
  },
  {
    "question": "How many moderators do streams have that are connected to spiukbs through chatter relationships?",
    "cypher": "MATCH (s1:Stream {name: 'spiukbs'})-[:CHATTER]->(s2:Stream)<-[:MODERATOR]-(u:User) RETURN COUNT(DISTINCT u) AS moderator_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 18
      }
    ],
    "answer": "The streams connected to spiukbs through chatter relationships have 18 distinct moderators."
  },
  {
    "question": "What language does the stream creightonolsen use?",
    "cypher": "MATCH (s:Stream {name: 'creightonolsen'})-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS language_code",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_code": "en"
      }
    ],
    "answer": "The stream creightonolsen uses English (language code: en)."
  },
  {
    "question": "What's the total number of followers for all streams that pavagagg can reach through language connections?",
    "cypher": "MATCH (s1:Stream {name: 'pavagagg'})-[:HAS_LANGUAGE]->(l:Language)<-[:HAS_LANGUAGE]-(s2:Stream) WHERE s2.followers IS NOT NULL AND s1 <> s2 RETURN SUM(s2.followers) AS total_followers",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_followers": 42335156
      }
    ],
    "answer": "Based on the query result, the total number of followers for all streams that pavagagg can reach through language connections is 42,335,156."
  },
  {
    "question": "How many peeps are VIPs in streams that also have haraldinho_ as a moderator?",
    "cypher": "MATCH (u1:User {name: 'haraldinho_'})-[:MODERATOR]->(s:Stream)<-[:VIP]-(u2:User) WHERE u1 <> u2 RETURN COUNT(DISTINCT u2) AS vip_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "vip_count": 0
      }
    ],
    "answer": "0 peeps are VIPs in streams that have haraldinho_ as a moderator."
  },
  {
    "question": "What's the description of the stream deshplease?",
    "cypher": "MATCH (s:Stream {name: 'deshplease'}) RETURN s.description AS stream_description",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": "Cotton Candy NIGHTMARE Fuel"
      }
    ],
    "answer": "The description of the stream deshplease is \"Cotton Candy NIGHTMARE Fuel\"."
  },
  {
    "question": "How many different teams are connected to streamers who play Rust?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}), (s)-[:HAS_TEAM]->(t:Team) RETURN COUNT(DISTINCT t) AS team_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_count": 14
      }
    ],
    "answer": "Based on the query result, there are 14 different teams connected to streamers who play Rust."
  },
  {
    "question": "What's the highest total view count among channels moderated by evariss?",
    "cypher": "MATCH (u:User {name: 'evariss'})-[:MODERATOR]->(s:Stream) WHERE s.total_view_count IS NOT NULL RETURN MAX(s.total_view_count) AS peak_views",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "peak_views": 2547860
      }
    ],
    "answer": "The highest total view count among channels moderated by evariss is 2,547,860 views."
  },
  {
    "question": "Tell me how many languages are used by streams that atlanticdk chats in?",
    "cypher": "MATCH (s1:Stream {name: 'atlanticdk'})-[:CHATTER]->(s2:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN COUNT(DISTINCT l) AS language_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_count": 1
      }
    ],
    "answer": "atlanticdk uses 1 language in their streams."
  },
  {
    "question": "What game connects agustabell212 to other streams through shared players?",
    "cypher": "MATCH (s1:Stream {name: 'agustabell212'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream) WHERE s1 <> s2 RETURN g.name AS shared_game LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "shared_game": "Rust"
      }
    ],
    "answer": "Rust is the game that connects agustabell212 to other streams through shared players."
  },
  {
    "question": "How many broadcasters moderate channels that have business_daddy as a chatter?",
    "cypher": "MATCH (u1:User {name: 'business_daddy'})-[:CHATTER]->(s:Stream)<-[:MODERATOR]-(u2:User) WHERE u1 <> u2 RETURN COUNT(DISTINCT u2) AS moderator_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 10077
      }
    ],
    "answer": "10,077 broadcasters moderate channels where business_daddy is a chatter."
  },
  {
    "question": "What's the average view count of streams connected to romandoduik through chatter relationships?",
    "cypher": "MATCH (s1:Stream {name: 'romandoduik'})-[:CHATTER|CHATTER]->(s2:Stream) WHERE s2.total_view_count IS NOT NULL AND s1 <> s2 RETURN AVG(s2.total_view_count) AS average_views",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_views": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Which stream has the most followers among those that share moderators with syan?",
    "cypher": "MATCH (s1:Stream {name: 'syna'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream) WHERE s2.followers IS NOT NULL AND s1 <> s2 RETURN s2.name AS stream_name ORDER BY s2.followers DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_name": "shroud"
      }
    ],
    "answer": "The stream with the most followers that shares a moderator with syna is shroud."
  },
  {
    "question": "How many VIP connections exist between streams that play the same game as ninaj614?",
    "cypher": "MATCH (s1:Stream {name: 'ninja614'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream)-[:VIP]->(u:User)<-[:VIP]-(s3:Stream)-[:PLAYS]->(g) WHERE s1 <> s2 AND s2 <> s3 RETURN COUNT(DISTINCT u) AS vip_connections",
    "query_type": "Existence Verification",
    "complexity": "5-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "vip_connections": 0
      }
    ],
    "answer": "Based on the query result, there are 0 VIP connections between streams that play the same game as ninja614."
  },
  {
    "question": "What's the follower count of the channel 9linda?",
    "cypher": "MATCH (s:Stream {name: '9linda'}) RETURN s.followers AS follower_count",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 5272
      }
    ],
    "answer": "The channel 9linda has 5,272 followers."
  },
  {
    "question": "How many content creators have chatted in streams that wickedbad4u also chats in?",
    "cypher": "MATCH (u1:User {name: 'wickedbad4u'})-[:CHATTER]->(s:Stream)<-[:CHATTER]-(u2:User) WHERE u1 <> u2 RETURN COUNT(DISTINCT u2) AS chatter_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "chatter_count": 18
      }
    ],
    "answer": "18 content creators have chatted in streams that wickedbad4u also chats in."
  },
  {
    "question": "What's the minimum follower count among streams in the same team as luckyghost?",
    "cypher": "MATCH (s1:Stream {name: 'luckyghost'})-[:HAS_TEAM]->(t:Team)<-[:HAS_TEAM]-(s2:Stream) WHERE s2.followers IS NOT NULL AND s1 <> s2 RETURN MIN(s2.followers) AS lowest_followers",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "lowest_followers": 10554
      }
    ],
    "answer": "The minimum follower count among streams in the same team as luckyghost is 10,554."
  },
  {
    "question": "Which user moderates the most streams that play Rust?",
    "cypher": "MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) WITH u, COUNT(DISTINCT s) AS stream_count RETURN u.name AS moderator_name ORDER BY stream_count DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_name": "nightbot"
      }
    ],
    "answer": "The user \"nightbot\" moderates the most streams that play Rust."
  },
  {
    "question": "How many streams can elokratz reach through two moderation hops?",
    "cypher": "MATCH (u:User {name: 'elokratz'})-[:MODERATOR]->(s1:Stream)-[:MODERATOR]->(s2:Stream) RETURN COUNT(DISTINCT s2) AS reachable_streams",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "reachable_streams": 2
      }
    ],
    "answer": "Based on the query result, elokratz can reach 2 streams through two moderation hops."
  },
  {
    "question": "What's the total follower count of streams broadcasting in Russian?",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'}) WHERE s.followers IS NOT NULL RETURN SUM(s.followers) AS total_russian_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_russian_followers": 42341825
      }
    ],
    "answer": "The total follower count of streams broadcasting in Russian is 42,341,825."
  },
  {
    "question": "Tell me the creation date of anasue's channel?",
    "cypher": "MATCH (s:Stream {name: 'anaseu'}) RETURN s.createdAt AS channel_created",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "channel_created": "2014-09-07T09:06:55.156807000+00:00"
      }
    ],
    "answer": "Anasue's channel was created on September 7, 2014 at 9:06:55 AM UTC."
  },
  {
    "question": "Which stream has the highest view count among those that have common moderators with cacarov?",
    "cypher": "MATCH (s1:Stream {name: 'cacarov'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream) WHERE s2.total_view_count IS NOT NULL AND s1 <> s2 RETURN s2.name AS stream_name ORDER BY s2.total_view_count DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_name": "riotgames"
      }
    ],
    "answer": "The stream with the highest view count among those that have common moderators with cacarov is riotgames."
  },
  {
    "question": "How many distinct games are played by channels that cometuunes chats in?",
    "cypher": "MATCH (u:User {name: 'comettunes'})-[:CHATTER]->(s:Stream)-[:PLAYS]->(g:Game) RETURN COUNT(DISTINCT g) AS game_variety",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_variety": 419
      }
    ],
    "answer": "Based on the query result, comettunes chats in streams that play 419 distinct games."
  },
  {
    "question": "What's the description of streams connected to raymundogalvez through moderation?",
    "cypher": "MATCH (u:User {name: 'raymundogalvez'})-[:MODERATOR]->(s:Stream) RETURN s.description AS stream_description LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": "100% Brawl Stars en el canal :)"
      }
    ],
    "answer": "The description of the stream connected to raymundogalvez through moderation is \"100% Brawl Stars en el canal :)\"."
  },
  {
    "question": "How many twitch partners share VIP users with fengrush?",
    "cypher": "MATCH (s1:Stream {name: 'fengrush'})-[:VIP]->(u:User)<-[:VIP]-(s2:Stream) WHERE s1 <> s2 RETURN COUNT(DISTINCT s2) AS partner_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "partner_count": 0
      }
    ],
    "answer": "Based on the query result, 0 Twitch partners share VIP users with fengrush."
  },
  {
    "question": "What's the latest creation date among streams that play games also played by spiukbs?",
    "cypher": "MATCH (s1:Stream {name: 'spiukbs'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream) WHERE s2.createdAt IS NOT NULL AND s1 <> s2 RETURN MAX(s2.createdAt) AS newest_stream",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "newest_stream": "2020-04-21T15:01:44.273990000+00:00"
      }
    ],
    "answer": "The latest creation date among streams that play games also played by spiukbs is April 21, 2020 at 3:01:44 PM UTC."
  },
  {
    "question": "Tell me the total view count of all English-speaking channels?",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) WHERE s.total_view_count IS NOT NULL RETURN SUM(s.total_view_count) AS english_total_views",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "english_total_views": 27092250698
      }
    ],
    "answer": "The total view count of all English-speaking channels is 27,092,250,698 views."
  },
  {
    "question": "Which broadcaster has the smallest follower count among those in the ESO Stream Team?",
    "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(t:Team {name: 'ESO Stream Team'}) WHERE s.followers IS NOT NULL RETURN s.name AS streamer_name ORDER BY s.followers ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "streamer_name": "deshplease"
      }
    ],
    "answer": "Based on the query result, deshplease has the smallest follower count among the broadcasters in the ESO Stream Team."
  },
  {
    "question": "How many paths of length 3 connect creightonolsen to streams playing different games?",
    "cypher": "MATCH path = (s1:Stream {name: 'creightonolsen'})-[*3]-(s2:Stream)-[:PLAYS]->(g:Game) WHERE NOT (s1)-[:PLAYS]->(g) RETURN COUNT(DISTINCT path) AS path_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "path_count": 158668
      }
    ],
    "answer": "There are 158,668 distinct paths of length 3 that connect the stream creightonolsen to streams playing different games."
  },
  {
    "question": "What's the URL of deshplease's stream?",
    "cypher": "MATCH (s:Stream {name: 'deshplease'}) RETURN s.url AS stream_url",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_url": "https://www.twitch.tv/deshplease"
      }
    ],
    "answer": "The URL of deshplease's stream is https://www.twitch.tv/deshplease."
  },
  {
    "question": "How many folks are both moderators and chatters in itsbigchase's channel?",
    "cypher": "MATCH (s:Stream {name: 'itsbigchase'})<-[:MODERATOR]-(u:User)-[:CHATTER]->(s) RETURN COUNT(DISTINCT u) AS dual_role_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "dual_role_count": 0
      }
    ],
    "answer": "0 users are both moderators and chatters in itsbigchase's channel."
  },
  {
    "question": "What's the peak follower count among streams that have the same language as pavagagg?",
    "cypher": "MATCH (s1:Stream {name: 'pavagagg'})-[:HAS_LANGUAGE]->(l:Language)<-[:HAS_LANGUAGE]-(s2:Stream) WHERE s2.followers IS NOT NULL RETURN MAX(s2.followers) AS highest_followers",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "highest_followers": 1750849
      }
    ],
    "answer": "The peak follower count among streams with the same language as pavagagg is 1,750,849."
  },
  {
    "question": "Which game is most commonly played by streams that elokratz moderates?",
    "cypher": "MATCH (u:User {name: 'elokratz'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) WITH g, COUNT(DISTINCT s) AS stream_count RETURN g.name AS popular_game ORDER BY stream_count DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "popular_game": "Fortnite"
      }
    ],
    "answer": "Based on the query result, Fortnite is the game most commonly played by streams that elokratz moderates."
  },
  {
    "question": "How many users connect atlanticdk to The Elder Scrolls Online through chat relationships?",
    "cypher": "MATCH (s1:Stream {name: 'atlanticdk'})-[:CHATTER]->(u:User)-[:CHATTER]->(s2:Stream)-[:PLAYS]->(g:Game {name: 'The Elder Scrolls Online'}) RETURN COUNT(DISTINCT u) AS connecting_users",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connecting_users": 0
      }
    ],
    "answer": "0 users connect atlanticdk to The Elder Scrolls Online through chat relationships."
  },
  {
    "question": "What's the average follower count of content creators in teams?",
    "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(t:Team) WHERE s.followers IS NOT NULL RETURN AVG(s.followers) AS average_team_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_team_followers": 259245.1050988557
      }
    ],
    "answer": "Based on the query result, the average follower count of content creators in teams is approximately 259,245 followers."
  },
  {
    "question": "What's the earliest stream creation date among those playing Rust?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) WHERE s.createdAt IS NOT NULL RETURN MIN(s.createdAt) AS oldest_rust_stream",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "oldest_rust_stream": "2011-08-11T01:48:58.589951000+00:00"
      }
    ],
    "answer": "The earliest stream creation date for Rust streams is August 11, 2011 at 1:48:58 AM UTC."
  },
  {
    "question": "How many distinct users moderate streams that agustabell212 chats in?",
    "cypher": "MATCH (s1:Stream {name: 'agustabell212'})-[:CHATTER]->(s2:Stream)<-[:MODERATOR]-(u:User) RETURN COUNT(DISTINCT u) AS moderator_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 56
      }
    ],
    "answer": "56 distinct users moderate streams that agustabell212 chats in."
  },
  {
    "question": "What's the total number of VIP connections between streamers and their viewers in channels moderated by rubiz?",
    "cypher": "MATCH (u1:User {name: 'rubiz'})-[:MODERATOR]->(s:Stream)-[:VIP]->(u2:User) RETURN COUNT(DISTINCT u2) AS vip_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "vip_count": 0
      }
    ],
    "answer": "Based on the query result, there are 0 VIP connections between streamers and their viewers in channels moderated by rubiz."
  },
  {
    "question": "How many streamers who play Rust also have moderators who moderate for syna?",
    "cypher": "MATCH (s1:Stream {name: 'syna'})<-[:MODERATOR]-(mod:User)-[:MODERATOR]->(s2:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) RETURN COUNT(DISTINCT s2) AS rust_streamer_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "rust_streamer_count": 46
      }
    ],
    "answer": "46 streamers who play Rust also have moderators who moderate for syna."
  },
  {
    "question": "What's the total view count of streamers who share chatters with itsbigchase?",
    "cypher": "MATCH (s1:Stream {name: 'itsbigchase'})<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream) RETURN SUM(s2.total_view_count) AS combined_view_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "combined_view_count": 11314295640252
      }
    ],
    "answer": "The total view count of streamers who share chatters with itsbigchase is 11,314,295,640,252."
  },
  {
    "question": "What's the highest follower count among channels that play the same games as 9lnda?",
    "cypher": "MATCH (s1:Stream {name: '9linda'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream) WHERE s2.followers IS NOT NULL RETURN MAX(s2.followers) AS max_followers",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "max_followers": 754330
      }
    ],
    "answer": "The highest follower count among channels that play the same games as 9lnda is 754,330 followers."
  },
  {
    "question": "Tell me the team name that connects ninja614 to fengrush through their games?",
    "cypher": "MATCH (s1:Stream {name: 'ninja614'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream {name: 'fengrush'}), (s1)-[:HAS_TEAM]->(t:Team) RETURN t.name AS connecting_team LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connecting_team": "ESO Stream Team"
      }
    ],
    "answer": "The team that connects ninja614 and fengrush through their games is the ESO Stream Team."
  },
  {
    "question": "How many folks moderate for both syna and cacarov?",
    "cypher": "MATCH (s1:Stream {name: 'syna'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream {name: 'cacarov'}) RETURN COUNT(DISTINCT u) AS shared_moderator_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "shared_moderator_count": 1
      }
    ],
    "answer": "1 person moderates for both syna and cacarov streams."
  },
  {
    "question": "What's the average follower count of Russian language streams that play games also played by English streams?",
    "cypher": "MATCH (s1:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'ru'}), (s1)-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) RETURN AVG(s1.followers) AS avg_ru_followers",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "avg_ru_followers": 127426.78553811833
      }
    ],
    "answer": "The average follower count of Russian language streams that play games also played by English streams is approximately 127,427 followers."
  },
  {
    "question": "How many different games are played by streamers in the ESO Stream Team?",
    "cypher": "MATCH (t:Team {name: 'ESO Stream Team'})<-[:HAS_TEAM]-(s:Stream)-[:PLAYS]->(g:Game) RETURN COUNT(DISTINCT g) AS total_games",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_games": 4
      }
    ],
    "answer": "Based on the query result, streamers in the ESO Stream Team play 4 different games."
  },
  {
    "question": "What's the minimum total view count among content creators who have evariss as a moderator?",
    "cypher": "MATCH (u:User {name: 'evariss'})-[:MODERATOR]->(s:Stream) WHERE s.total_view_count IS NOT NULL RETURN MIN(s.total_view_count) AS lowest_views",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "lowest_views": 2547860
      }
    ],
    "answer": "The minimum total view count among streams moderated by evariss is 2,547,860 views."
  },
  {
    "question": "How many moderators connect spiukbs to agustabell212 through their moderation networks?",
    "cypher": "MATCH (s1:Stream {name: 'spiukbs'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream)-[:CHATTER]->(s3:Stream {name: 'agustabell212'}) RETURN COUNT(DISTINCT u) AS connecting_moderators",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connecting_moderators": 0
      }
    ],
    "answer": "Based on the query result, 0 moderators connect spiukbs to agustabell212 through their moderation networks."
  },
  {
    "question": "What's the description of the stream with the highest follower count that shares a language with creightonolsen?",
    "cypher": "MATCH (s1:Stream {name: 'creightonolsen'})-[:HAS_LANGUAGE]->(l:Language)<-[:HAS_LANGUAGE]-(s2:Stream) WHERE s2.followers IS NOT NULL ORDER BY s2.followers DESC LIMIT 1 RETURN s2.description AS stream_description",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": "Watch Me Play VideoGames"
      }
    ],
    "answer": "Watch Me Play VideoGames"
  },
  {
    "question": "What's the total follower count of all channels that have chatters who also chat in deshplease's stream?",
    "cypher": "MATCH (s1:Stream {name: 'deshplease'})<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream) RETURN SUM(s2.followers) AS total_followers",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_followers": 5992824751
      }
    ],
    "answer": "The total follower count of all channels that have chatters who also chat in deshplease's stream is 5,992,824,751 followers."
  },
  {
    "question": "How many streams can be reached from fenrush through game connections within 2 hops?",
    "cypher": "MATCH (s1:Stream {name: 'fengrush'})-[:PLAYS]->(g1:Game)<-[:PLAYS]-(s2:Stream)-[:PLAYS]->(g2:Game)<-[:PLAYS]-(s3:Stream) RETURN COUNT(DISTINCT s3) AS reachable_streams",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "reachable_streams": 1662
      }
    ],
    "answer": "From the fenrush stream, there are 1,662 unique streams that can be reached within 2 game connections."
  },
  {
    "question": "What's the name of the game that has the most streamers with over 50000 followers?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers > 50000 WITH g, COUNT(DISTINCT s) AS streamer_count ORDER BY streamer_count DESC LIMIT 1 RETURN g.name AS game_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Just Chatting"
      }
    ],
    "answer": "Just Chatting is the game with the most streamers who have over 50,000 followers."
  },
  {
    "question": "What's the peak view count among streamers who moderate for channels that play Rust?",
    "cypher": "MATCH (u:User)-[:MODERATOR]->(s1:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}), (u)-[:MODERATOR]->(s2:Stream) WHERE s2.total_view_count IS NOT NULL RETURN MAX(s2.total_view_count) AS highest_views",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "highest_views": 1451487256
      }
    ],
    "answer": "The peak view count among streamers who moderate for Rust channels is 1,451,487,256 views."
  },
  {
    "question": "How many VIPs does luckyghost share with other members of their team?",
    "cypher": "MATCH (s1:Stream {name: 'luckyghost'})-[:HAS_TEAM]->(t:Team)<-[:HAS_TEAM]-(s2:Stream), (s1)<-[:VIP]-(v:User)-[:VIP]->(s2) RETURN COUNT(DISTINCT v) AS shared_vips",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "shared_vips": 0
      }
    ],
    "answer": "luckyghost shares 0 VIPs with other members of their team."
  },
  {
    "question": "What language is used by the stream with the lowest follower count that plays The Elder Scrolls Online?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'The Elder Scrolls Online'}), (s)-[:HAS_LANGUAGE]->(l:Language) WHERE s.followers IS NOT NULL ORDER BY s.followers ASC LIMIT 1 RETURN l.name AS language_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "en"
      }
    ],
    "answer": "The language used by the stream with the lowest follower count that plays The Elder Scrolls Online is English (en)."
  },
  {
    "question": "How many peeps chat in streams that are moderated by users who also moderate for anaseu?",
    "cypher": "MATCH (s1:Stream {name: 'anaseu'})<-[:MODERATOR]-(m:User)-[:MODERATOR]->(s2:Stream)<-[:CHATTER]-(c:User) RETURN COUNT(DISTINCT c) AS total_chatters",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_chatters": 6965436
      }
    ],
    "answer": "6,965,436 peeps chat in streams that are moderated by users who also moderate for anaseu."
  },
  {
    "question": "What's the shortest path length between cacarov and 9linda through any relationships?",
    "cypher": "MATCH path = shortestPath((s1:Stream {name: 'cacarov'})-[*]-(s2:Stream {name: '9linda'})) RETURN LENGTH(path) AS path_length",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "path_length": 2
      }
    ],
    "answer": "The shortest path length between the streams 'cacarov' and '9linda' is 2 relationships."
  },
  {
    "question": "What's the highest follower count among streamers who have atlanticdk as a chatter?",
    "cypher": "MATCH (s1:Stream {name: 'atlanticdk'})-[:CHATTER]->(s2:Stream) WHERE s2.followers IS NOT NULL RETURN MAX(s2.followers) AS max_followers",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "max_followers": 64538
      }
    ],
    "answer": "The highest follower count among streamers who have atlanticdk as a chatter is 64,538 followers."
  },
  {
    "question": "How many games connect itsbigchase to streamers with more than 100k total views?",
    "cypher": "MATCH (s1:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream) WHERE s2.total_view_count > 100000 RETURN COUNT(DISTINCT g) AS connecting_games",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connecting_games": 1
      }
    ],
    "answer": "Based on the query result, 1 game connects itsbigchase to streamers with more than 100,000 total views."
  },
  {
    "question": "What's the team ID that romandoduik's chatters' streams belong to?",
    "cypher": "MATCH (s1:Stream {name: 'romandoduik'})<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream)-[:HAS_TEAM]->(t:Team) RETURN t.id AS team_id LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_id": "11210"
      }
    ],
    "answer": "The team ID for the streams belonging to romandoduik's chatters is 11210."
  },
  {
    "question": "What's the average total view count of streams that have comettunes as a chatter?",
    "cypher": "MATCH (u:User {name: 'comettunes'})-[:CHATTER]->(s:Stream) RETURN AVG(s.total_view_count) AS avg_views",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "avg_views": 12320637.12027914
      }
    ],
    "answer": "The average total view count of streams where comettunes is a chatter is 12,320,637."
  },
  {
    "question": "How many streamers play games in common with both ninja614 and fengrush?",
    "cypher": "MATCH (s1:Stream {name: 'ninja614'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s:Stream)-[:PLAYS]->(g2:Game)<-[:PLAYS]-(s2:Stream {name: 'fengrush'}) RETURN COUNT(DISTINCT s) AS common_game_streamers",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "common_game_streamers": 0
      }
    ],
    "answer": "0. There are no streamers who play games in common with both ninja614 and fengrush."
  },
  {
    "question": "What's the stream name with the smallest follower count among those moderated by haraldinho_?",
    "cypher": "MATCH (u:User {name: 'haraldinho_'})-[:MODERATOR]->(s:Stream) WHERE s.followers IS NOT NULL ORDER BY s.followers ASC LIMIT 1 RETURN s.name AS stream_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_name": "anaseu"
      }
    ],
    "answer": "The stream with the smallest follower count among those moderated by haraldinho_ is \"anaseu\"."
  },
  {
    "question": "What's the total follower count of all English language streams?",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) RETURN SUM(s.followers) AS total_en_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_en_followers": 500827249
      }
    ],
    "answer": "The total follower count of all English language streams is 500,827,249."
  },
  {
    "question": "How many mods does synas have that also moderate for other streamers?",
    "cypher": "MATCH (s1:Stream {name: 'syna'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream) WHERE s1 <> s2 RETURN COUNT(DISTINCT u) AS multi_stream_mods",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "multi_stream_mods": 4
      }
    ],
    "answer": "Syna has 4 mods who also moderate for other streamers."
  },
  {
    "question": "What's the minimum follower count among Russian language streams?",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'ru'}) WHERE s.followers IS NOT NULL RETURN MIN(s.followers) AS min_ru_followers",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "min_ru_followers": 0
      }
    ],
    "answer": "The minimum follower count among Russian language streams is 0."
  },
  {
    "question": "How many users are VIPs in streams that play the same games as agustabell212?",
    "cypher": "MATCH (s1:Stream {name: 'agustabell212'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream)<-[:VIP]-(u:User) RETURN COUNT(DISTINCT u) AS total_vips",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_vips": 198
      }
    ],
    "answer": "There are 198 unique VIP users in streams that play the same games as agustabell212."
  },
  {
    "question": "What's the description of the stream with most followers among those chatted in by wickedbad4u?",
    "cypher": "MATCH (u:User {name: 'wickedbad4u'})-[:CHATTER]->(s:Stream) WHERE s.followers IS NOT NULL ORDER BY s.followers DESC LIMIT 1 RETURN s.description AS stream_description",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": "Cotton Candy NIGHTMARE Fuel"
      }
    ],
    "answer": "The description of the stream with the most followers chatted in by wickedbad4u is \"Cotton Candy NIGHTMARE Fuel\"."
  },
  {
    "question": "How many different teams are connected to streamers who play Rust?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}), (s)-[:HAS_TEAM]->(t:Team) RETURN COUNT(DISTINCT t) AS total_teams",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_teams": 14
      }
    ],
    "answer": "14 different teams are connected to streamers who play Rust."
  },
  {
    "question": "What's the highest follower count among streamers who have rubiz as a moderator?",
    "cypher": "MATCH (u:User {name: 'rubiz'})-[:MODERATOR]->(s:Stream) WHERE s.followers IS NOT NULL RETURN MAX(s.followers) AS max_followers",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "max_followers": 159814
      }
    ],
    "answer": "The highest follower count among streamers with rubiz as a moderator is 159,814 followers."
  },
  {
    "question": "Tell me how many channels elokratz moderates that have over 10k followers?",
    "cypher": "MATCH (u:User {name: 'elokratz'})-[:MODERATOR]->(s:Stream) WHERE s.followers > 10000 RETURN COUNT(DISTINCT s) AS high_follower_streams",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "high_follower_streams": 3
      }
    ],
    "answer": "elokratz moderates 3 channels that have over 10,000 followers."
  },
  {
    "question": "What's the game name played by the streamer with the oldest account creation date?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.createdAt IS NOT NULL ORDER BY s.createdAt ASC LIMIT 1 RETURN g.name AS game_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Old School RuneScape"
      }
    ],
    "answer": "The game played by the streamer with the oldest account creation date is Old School RuneScape."
  },
  {
    "question": "What's the average number of followers for streamers in the ESO Stream Team?",
    "cypher": "MATCH (t:Team {name: 'ESO Stream Team'})<-[:HAS_TEAM]-(s:Stream) RETURN AVG(s.followers) AS avg_team_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "avg_team_followers": 146969.6
      }
    ],
    "answer": "The average number of followers for streamers in the ESO Stream Team is 146,970 followers."
  },
  {
    "question": "What's the lowest total view count among streamers who share moderators with creightonolsen?",
    "cypher": "MATCH (s1:Stream {name: 'creightonolsen'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream) WHERE s2.total_view_count IS NOT NULL RETURN MIN(s2.total_view_count) AS min_views",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "min_views": 2208
      }
    ],
    "answer": "The lowest total view count among streamers who share moderators with creightonolsen is 2,208 views."
  },
  {
    "question": "How many streamers can raymundogalvez reach through moderation and chatter connections?",
    "cypher": "MATCH (u:User {name: 'raymundogalvez'})-[:MODERATOR|CHATTER]->(s1:Stream)-[:MODERATOR|CHATTER]->(s2:Stream) RETURN COUNT(DISTINCT s2) AS reachable_streams",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "reachable_streams": 3
      }
    ],
    "answer": "Based on the query result, raymundogalvez can reach 3 distinct streams through moderation and chatter connections."
  },
  {
    "question": "What's the name of the streamer with most total views who moderates for pavagagg?",
    "cypher": "MATCH (s1:Stream {name: 'pavagagg'})<-[:MODERATOR]-(u:User), (u)-[:MODERATOR]->(s2:Stream) WHERE s2.total_view_count IS NOT NULL AND u.name IS NOT NULL ORDER BY s2.total_view_count DESC LIMIT 1 RETURN u.name AS moderator_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_name": "nightbot"
      }
    ],
    "answer": "The streamer with the most total views who moderates for pavagagg is nightbot."
  },
  {
    "question": "How many unique languages are used by streamers who play games that desplease plays?",
    "cypher": "MATCH (s1:Stream {name: 'deshplease'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN COUNT(DISTINCT l) AS total_languages",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_languages": 26
      }
    ],
    "answer": "There are 26 unique languages used by streamers who play games that Desplease plays."
  },
  {
    "question": "What's the maximum follower count among streamers that soydas06 moderates?",
    "cypher": "MATCH (u:User {name: 'soydas06'})-[:MODERATOR]->(s:Stream) WHERE s.followers IS NOT NULL RETURN MAX(s.followers) AS highest_followers",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "highest_followers": 105177
      }
    ],
    "answer": "The maximum follower count among streamers that soydas06 moderates is 105,177."
  },
  {
    "question": "How many VIP connections exist between atlanticdk and other streamers?",
    "cypher": "MATCH (s:Stream {name: 'atlanticdk'})-[:VIP]-(other:Stream) RETURN COUNT(DISTINCT other) AS vip_connections",
    "query_type": "Existence Verification",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "vip_connections": 0
      }
    ],
    "answer": "Based on the query result, atlanticdk has 0 VIP connections with other streamers."
  },
  {
    "question": "What's the description of the stream with the most recent creation date among English channels?",
    "cypher": "MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language {name: 'en'}) WHERE s.createdAt IS NOT NULL ORDER BY s.createdAt DESC LIMIT 1 RETURN s.description AS stream_description",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": "!stake in chat for a free $7 signup bonus & to be entered into a 1 BTC giveaway."
      }
    ],
    "answer": "The description of the most recently created English stream is: \"!stake in chat for a free $7 signup bonus & to be entered into a 1 BTC giveaway.\""
  },
  {
    "question": "What's the sum of followers for all streamers who have imcoma as a mod?",
    "cypher": "MATCH (u:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream) RETURN SUM(s.followers) AS total_followers",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_followers": 33366
      }
    ],
    "answer": "The sum of followers for all streamers with imcoma as a mod is 33,366."
  },
  {
    "question": "How many chatters do anaseu and atlanticdk have in common?",
    "cypher": "MATCH (s1:Stream {name: 'anaseu'})<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream {name: 'atlanticdk'}) RETURN COUNT(DISTINCT u) AS common_chatters",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "common_chatters": 4
      }
    ],
    "answer": "4 chatters are common between the streams anaseu and atlanticdk."
  },
  {
    "question": "What's the highest total view count among streams that share games with luckyghost and have teams?",
    "cypher": "MATCH (s1:Stream {name: 'luckyghost'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream)-[:HAS_TEAM]->(t:Team) WHERE s2.total_view_count IS NOT NULL RETURN MAX(s2.total_view_count) AS max_views",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "max_views": 107365515
      }
    ],
    "answer": "The highest total view count among streams that share games with luckyghost and have teams is 107,365,515 views."
  },
  {
    "question": "How many games are played by streamers that comettunes has chatted in?",
    "cypher": "MATCH (u:User {name: 'comettunes'})-[:CHATTER]->(s:Stream)-[:PLAYS]->(g:Game) RETURN COUNT(DISTINCT g) AS total_games",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_games": 419
      }
    ],
    "answer": "Based on the query result, comettunes has chatted in streams that played 419 distinct games."
  },
  {
    "question": "What's the URL of the stream with lowest follower count that plays The Elder Scrolls Onlne?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'The Elder Scrolls Online'}) WHERE s.followers IS NOT NULL ORDER BY s.followers ASC LIMIT 1 RETURN s.url AS stream_url",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_url": "https://www.twitch.tv/luckyghost"
      }
    ],
    "answer": "The stream with the lowest follower count playing The Elder Scrolls Online has the URL: https://www.twitch.tv/luckyghost"
  },
  {
    "question": "How many streamers who play Rust have more than 1 million total views?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) WHERE s.total_view_count > 1000000 RETURN COUNT(DISTINCT s) AS high_view_streamers",
    "query_type": "Existence Verification",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "high_view_streamers": 26
      }
    ],
    "answer": "26 streamers who play Rust have more than 1 million total views."
  },
  {
    "question": "What's the location of DC1?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'}) RETURN dc.location AS datacenter_location",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "datacenter_location": "Iceland, Rekjavik"
      }
    ],
    "answer": "The location of DC1 is Iceland, Rekjavik."
  },
  {
    "question": "What zone is rack DC1-RCK-4-2 in?",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-4-2'}) RETURN r.zone AS rack_zone",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_zone": 4
      }
    ],
    "answer": "Rack DC1-RCK-4-2 is in zone 4."
  },
  {
    "question": "Tell me the IP address of interface 10.1.1.1",
    "cypher": "MATCH (i:Interface {ip: '10.1.1.1'}) RETURN i.ip AS interface_ip",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_ip": "10.1.1.1"
      }
    ],
    "answer": "10.1.1.1"
  },
  {
    "question": "What's the rack number of DC1-RCK-1-1?",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-1-1'}) RETURN r.rack AS rack_number",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_number": 1
      }
    ],
    "answer": "The rack number of DC1-RCK-1-1 is 1."
  },
  {
    "question": "Show me the CPU count for xs-1/1/1 type",
    "cypher": "MATCH (t:Type {name: 'xs-1/1/1'}) RETURN t.cpu AS cpu_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "cpu_count": 1
      }
    ],
    "answer": "The CPU count for xs-1/1/1 type is 1."
  },
  {
    "question": "What's the name of the RHEL operating system?",
    "cypher": "MATCH (s:Software {name: 'RHEL'}) RETURN s.name AS software_name",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "software_name": "RHEL"
      }
    ],
    "answer": "RHEL (Red Hat Enterprise Linux)"
  },
  {
    "question": "What's the ram for type xs?",
    "cypher": "MATCH (t:Type {type: 'xs'}) RETURN t.ram AS ram_amount",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "ram_amount": 1
      }
    ],
    "answer": "The RAM for type xs is 1."
  },
  {
    "question": "Tell me the zone of network 10.4",
    "cypher": "MATCH (n:Network {ip: '10.4'}) RETURN n.zone AS network_zone",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "network_zone": 4
      }
    ],
    "answer": "The zone of network 10.4 is zone 4."
  },
  {
    "question": "What's the disk size for xs-1/1/1?",
    "cypher": "MATCH (t:Type {name: 'xs-1/1/1'}) RETURN t.disk AS disk_size",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "disk_size": 1
      }
    ],
    "answer": "The disk size for xs-1/1/1 is 1."
  },
  {
    "question": "What's the name of machine DC1-RCK-4-2-M-174?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-4-2-M-174'}) RETURN m.name AS machine_name",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_name": "DC1-RCK-4-2-M-174"
      }
    ],
    "answer": "DC1-RCK-4-2-M-174"
  },
  {
    "question": "Show me the version name 7.1",
    "cypher": "MATCH (v:Version {name: '7.1'}) RETURN v.name AS version_name",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "version_name": "7.1"
      }
    ],
    "answer": "The version name is 7.1."
  },
  {
    "question": "Tell me the size of zone 10.1",
    "cypher": "MATCH (z:Zone {ip: '10.1'}) RETURN z.size AS zone_size",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "zone_size": 16
      }
    ],
    "answer": "The size of zone 10.1 is 16."
  },
  {
    "question": "How many machines does rack DC1-RCK-1-1 hold?",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine) RETURN COUNT(m) AS total_machines",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_machines": 200
      }
    ],
    "answer": "Rack DC1-RCK-1-1 holds 200 machines."
  },
  {
    "question": "Count the racks in datacenter DC1",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack) RETURN COUNT(r) AS total_racks",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_racks": 40
      }
    ],
    "answer": "Datacenter DC1 has 40 racks."
  },
  {
    "question": "How many apps run on machine DC1-RCK-1-1-M-1?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(a:Application) RETURN COUNT(a) AS total_applications",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_applications": 1
      }
    ],
    "answer": "1 app runs on machine DC1-RCK-1-1-M-1."
  },
  {
    "question": "What's the IP that router DC1-R-1 routes to?",
    "cypher": "MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface) RETURN i.ip AS interface_ip",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_ip": "10.1.0.254"
      }
    ],
    "answer": "Router DC1-R-1 routes to the IP address 10.1.0.254."
  },
  {
    "question": "How many services are running on DC1-RCK-4-2-M-174?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-4-2-M-174'})-[:RUNS]->(s:Service) RETURN COUNT(s) AS total_services",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_services": 3
      }
    ],
    "answer": "3 services are running on DC1-RCK-4-2-M-174."
  },
  {
    "question": "What machine type is DC1-RCK-3-8-M-49?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-3-8-M-49'})-[:TYPE]->(t:Type) RETURN t.name AS machine_type",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_type": "xs-1/1/1"
      }
    ],
    "answer": "The machine type for DC1-RCK-3-8-M-49 is xs-1/1/1."
  },
  {
    "question": "Which OS runs on machine DC1-RCK-1-1-M-1?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(o:OS) RETURN o.name AS os_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "os_name": "7.1"
      }
    ],
    "answer": "The machine DC1-RCK-1-1-M-1 runs OS version 7.1."
  },
  {
    "question": "Count ports exposed by interface 10.1.1.1",
    "cypher": "MATCH (i:Interface {ip: '10.1.1.1'})-[:EXPOSES]->(p:Port) RETURN COUNT(p) AS total_ports",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_ports": 2
      }
    ],
    "answer": "Interface 10.1.1.1 exposes 2 ports."
  },
  {
    "question": "How many boxes are in rack DC1-RCK-2-9?",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-2-9'})-[:HOLDS]->(m:Machine) RETURN COUNT(m) AS total_machines",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_machines": 200
      }
    ],
    "answer": "UNKNOWN\n\nThe query result provides the number of machines in the rack, but the original question specifically asked about the number of boxes, which is not directly answered by this query result."
  },
  {
    "question": "What's the previous version of 7.2?",
    "cypher": "MATCH (v:Version {name: '7.2'})-[:PREVIOUS]->(pv:Version) RETURN pv.name AS previous_version",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "previous_version": "7.1"
      }
    ],
    "answer": "The previous version of 7.2 is 7.1."
  },
  {
    "question": "How many interfaces does egress DC1-RE route?",
    "cypher": "MATCH (e:Egress {name: 'DC1-RE'})-[:ROUTES]->(i:Interface) RETURN COUNT(i) AS total_interfaces",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_interfaces": 1
      }
    ],
    "answer": "The egress route DC1-RE routes 1 interface."
  },
  {
    "question": "How many machines are in DC1 datacenter?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine) RETURN COUNT(DISTINCT m) AS total_machines",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_machines": 8000
      }
    ],
    "answer": "There are 8,000 machines in the DC1 datacenter."
  },
  {
    "question": "Count applications on machines in rack DC1-RCK-4-2",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-4-2'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application) RETURN COUNT(a) AS total_applications",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_applications": 200
      }
    ],
    "answer": "There are 200 applications running on machines in rack DC1-RCK-4-2."
  },
  {
    "question": "How many services run on machines of type xs?",
    "cypher": "MATCH (t:Type {type: 'xs'})<-[:TYPE]-(m:Machine)-[:RUNS]->(s:Service) RETURN COUNT(s) AS total_services",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_services": 3730
      }
    ],
    "answer": "3,730 services run on machines of type xs."
  },
  {
    "question": "Count ports that webserver exposes via interfaces",
    "cypher": "MATCH (a:Application {name: 'webserver'})-[:LISTENS]->(p:Port)<-[:EXPOSES]-(i:Interface) RETURN COUNT(DISTINCT p) AS total_ports",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_ports": 3316
      }
    ],
    "answer": "The webserver exposes 3,316 distinct ports via its interfaces."
  },
  {
    "question": "What datacenter location contains rack DC1-RCK-3-8?",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack {name: 'DC1-RCK-3-8'}) RETURN dc.location AS datacenter_location",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "datacenter_location": "Iceland, Rekjavik"
      }
    ],
    "answer": "The rack DC1-RCK-3-8 is located in Iceland, Rekjavik."
  },
  {
    "question": "How many versions does RHEL OS have previous to 7.3?",
    "cypher": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version {name: '7.3'})-[:PREVIOUS*]->(prev:Version) RETURN COUNT(prev) AS previous_versions",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "previous_versions": 2
      }
    ],
    "answer": "Based on the query result, RHEL OS has 2 versions previous to version 7.3."
  },
  {
    "question": "Which network zone connects to switch 10.1.10?",
    "cypher": "MATCH (s:Switch {ip: '10.1.10'})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(n:Network) RETURN n.zone AS network_zone",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "network_zone": 1
      }
    ],
    "answer": "Network zone 1 connects to switch 10.1.10."
  },
  {
    "question": "Count routers in datacenter DC1",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router) RETURN COUNT(r) AS total_routers",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_routers": 5
      }
    ],
    "answer": "There are 5 routers in datacenter DC1."
  },
  {
    "question": "How many machines are running webserver applications in racks contained within DC1?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'webserver'}) RETURN COUNT(DISTINCT m) AS total_machines",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_machines": 1658
      }
    ],
    "answer": "There are 1,658 machines running webserver applications in racks within DC1."
  },
  {
    "question": "What's the total number of servers in DC1 that have cms apps depending on php?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'cms'})-[:INSTANCE]->(s:Software)-[:DEPENDS_ON]->(php:Software {name: 'php'}) RETURN COUNT(DISTINCT m) AS server_count",
    "query_type": "Aggregation",
    "complexity": "5-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "server_count": 1634
      }
    ],
    "answer": "There are 1,634 servers in DC1 that have CMS applications depending on PHP."
  },
  {
    "question": "What's the location of the data center containing rack DC1-RCK-4-2?",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack {name: 'DC1-RCK-4-2'}) RETURN dc.location AS datacenter_location",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "datacenter_location": "Iceland, Rekjavik"
      }
    ],
    "answer": "The data center containing rack DC1-RCK-4-2 is located in Rekjavik, Iceland."
  },
  {
    "question": "Tell me the IP address of the interface exposed by machine DC1-RCK-1-1-M-1",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:ROUTES]->(i:Interface) RETURN i.ip AS interface_ip LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_ip": "10.1.1.1"
      }
    ],
    "answer": "The IP address of the interface exposed by machine DC1-RCK-1-1-M-1 is 10.1.1.1."
  },
  {
    "question": "What's the highest port number exposed by interfaces routed from switches in rack 1?",
    "cypher": "MATCH (s:Switch {rack: 1})-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port) WHERE p.port IS NOT NULL RETURN MAX(p.port) AS maximum_port",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "maximum_port": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returns None, which indicates that either no ports were found for interfaces routed from switches in rack 1, or the port information is missing."
  },
  {
    "question": "How many different software dependencies does the webapp application have through its instance relationships?",
    "cypher": "MATCH (a:Application {name: 'webapp'})-[:INSTANCE]->(s:Software)-[:DEPENDS_ON]->(dep:Software) RETURN COUNT(DISTINCT dep) AS dependency_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "dependency_count": 2
      }
    ],
    "answer": "The webapp application has 2 different software dependencies through its instance relationships."
  },
  {
    "question": "What's the zone number of the router DC1-R-1 contained in datacenter DC1?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router {name: 'DC1-R-1'}) RETURN r.zone AS router_zone",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "router_zone": 1
      }
    ],
    "answer": "The zone number of router DC1-R-1 in datacenter DC1 is 1."
  },
  {
    "question": "Find the earliest start time among services running on machines in zone 4 racks",
    "cypher": "MATCH (r:Rack {zone: 4})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service) WHERE s.startTime IS NOT NULL RETURN MIN(s.startTime) AS earliest_startup",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "earliest_startup": 1606165754652
      }
    ],
    "answer": "The earliest start time for services running on machines in zone 4 racks is 1606165754652 (which represents a Unix timestamp in milliseconds)."
  },
  {
    "question": "How many machines in DC1 are connected to interfaces that expose port 80?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port {port: 80}) RETURN COUNT(DISTINCT m) AS machine_count",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_count": 4866
      }
    ],
    "answer": "4,866 machines in DC1 are connected to interfaces that expose port 80."
  },
  {
    "question": "What's the name of the operating system running on machin DC1-RCK-1-1-M-1?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(os:OS) RETURN os.name AS os_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "os_name": "7.1"
      }
    ],
    "answer": "The operating system running on machine DC1-RCK-1-1-M-1 is version 7.1."
  },
  {
    "question": "Count the total processes listening on port 8080 across all machines in DC1",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(p:Process)-[:LISTENS]->(port:Port {port: 8080}) RETURN COUNT(DISTINCT p) AS process_count",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "process_count": 3222
      }
    ],
    "answer": "There are 3,222 distinct processes listening on port 8080 across all machines in DC1."
  },
  {
    "question": "What's the rack number of the rack holding machine DC1-RCK-2-9-M-90?",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine {name: 'DC1-RCK-2-9-M-90'}) RETURN r.rack AS rack_number",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_number": 9
      }
    ],
    "answer": "The rack number of the rack holding machine DC1-RCK-2-9-M-90 is 9."
  },
  {
    "question": "How many services does the cms app depend on through its software instance?",
    "cypher": "MATCH (a:Application {name: 'cms'})-[:INSTANCE]->(s1:Software)-[:DEPENDS_ON]->(s2:Software)<-[:INSTANCE]-(svc:Service) RETURN COUNT(DISTINCT svc) AS service_dependencies",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "service_dependencies": 4902
      }
    ],
    "answer": "Based on the query result, the cms app depends on 4,902 services through its software instance."
  },
  {
    "question": "What's the highest CPU count among machine types used by servers running postgres services?",
    "cypher": "MATCH (t:Type)<-[:TYPE]-(m:Machine)-[:RUNS]->(s:Service)-[:INSTANCE]->(sw:Software {name: 'postgres'}) WHERE t.cpu IS NOT NULL RETURN MAX(t.cpu) AS max_cpu_count",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "max_cpu_count": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "How many interfaces connect to networks in zone 1?",
    "cypher": "MATCH (n:Network {zone: 1})-[:ROUTES]->(i:Interface) RETURN COUNT(DISTINCT i) AS interface_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_count": 10
      }
    ],
    "answer": "10 interfaces connect to networks in zone 1."
  },
  {
    "question": "What's the minimum RAM among machine types hosting webserver applications?",
    "cypher": "MATCH (t:Type)<-[:TYPE]-(m:Machine)-[:RUNS]->(a:Application {name: 'webserver'}) WHERE t.ram IS NOT NULL RETURN MIN(t.ram) AS minimum_ram",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "minimum_ram": 1
      }
    ],
    "answer": "The minimum RAM among machine types hosting webserver applications is 1."
  },
  {
    "question": "Find the pid of the java service instance running on machine DC1-RCK-2-9-M-90",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-2-9-M-90'})-[:RUNS]->(s:Service)-[:INSTANCE]->(sw:Software {name: 'java'}) RETURN s.pid AS service_pid LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "service_pid": 4328
      }
    ],
    "answer": "The pid of the java service instance running on machine DC1-RCK-2-9-M-90 is 4328."
  },
  {
    "question": "Count how many apps listening on port 8080 are deployed on xs-1/1/1 type machines",
    "cypher": "MATCH (t:Type {name: 'xs-1/1/1'})<-[:TYPE]-(m:Machine)-[:RUNS]->(a:Application)-[:LISTENS]->(p:Port {port: 8080}) RETURN COUNT(DISTINCT a) AS app_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "app_count": 837
      }
    ],
    "answer": "There are 837 distinct apps listening on port 8080 that are deployed on xs-1/1/1 type machines."
  },
  {
    "question": "What's the latest start time of processes named webapp across all machines?",
    "cypher": "MATCH (m:Machine)-[:RUNS]->(p:Process {name: 'webapp'}) WHERE p.startTime IS NOT NULL RETURN MAX(p.startTime) AS latest_startup",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "latest_startup": 1607028543389
      }
    ],
    "answer": "The latest start time of processes named webapp across all machines is 1607028543389 (Unix timestamp)."
  },
  {
    "question": "Tell me the IP of the switch in rack DC1-RCK-1-1",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch) RETURN s.ip AS switch_ip",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "switch_ip": "10.1.1"
      }
    ],
    "answer": "The IP of the switch in rack DC1-RCK-1-1 is 10.1.1."
  },
  {
    "question": "How many versions does postgres software have according to its version relationships?",
    "cypher": "MATCH (s:Software {name: 'postgres'})-[:VERSION]->(v:Version) RETURN COUNT(DISTINCT v) AS version_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "version_count": 3
      }
    ],
    "answer": "According to the query result, Postgres software has 3 distinct versions."
  },
  {
    "question": "What's the smallest disk size among machine types in racks located in zone 3?",
    "cypher": "MATCH (r:Rack {zone: 3})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) WHERE t.disk IS NOT NULL RETURN MIN(t.disk) AS minimum_disk",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "minimum_disk": 1
      }
    ],
    "answer": "The smallest disk size among machine types in racks located in zone 3 is 1."
  },
  {
    "question": "Find the type name of machines running couchbase services",
    "cypher": "MATCH (t:Type)<-[:TYPE]-(m:Machine)-[:RUNS]->(s:Service {name: 'couchbase'}) RETURN t.name AS machine_type LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_type": "xs-1/1/1"
      }
    ],
    "answer": "The type name of a machine running couchbase services is xs-1/1/1."
  },
  {
    "question": "How many different ports does the neo4j software expose according to its configuration?",
    "cypher": "MATCH (s:Software {name: 'neo4j'}) RETURN SIZE(s.ports) AS port_count",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "port_count": 3
      }
    ],
    "answer": "According to the configuration, Neo4j software exposes 3 different ports."
  },
  {
    "question": "What's the highest zone number among racks in data center DC1?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack) WHERE r.zone IS NOT NULL RETURN MAX(r.zone) AS highest_zone",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "highest_zone": 4
      }
    ],
    "answer": "The highest zone number among racks in data center DC1 is 4."
  },
  {
    "question": "Count the machines that can reach port 5432 through their network interfaces",
    "cypher": "MATCH (m:Machine)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port {port: 5432}) RETURN COUNT(DISTINCT m) AS machine_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_count": 0
      }
    ],
    "answer": "Based on the query result, 0 machines can reach port 5432 through their network interfaces."
  },
  {
    "question": "How many interfaces connect switches to networks in the infrastructure?",
    "cypher": "MATCH (s:Switch)-[:ROUTES]->(i:Interface)<-[:ROUTES]-(n:Network) RETURN COUNT(DISTINCT i) AS interface_bridges",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_bridges": 40
      }
    ],
    "answer": "There are 40 interfaces that connect switches to networks in the infrastructure."
  },
  {
    "question": "What's the oldest start time among OS processes running on servers in zone 1 racks?",
    "cypher": "MATCH (r:Rack {zone: 1})-[:HOLDS]->(m:Machine)-[:RUNS]->(os:OS) WHERE os.startTime IS NOT NULL RETURN MIN(os.startTime) AS oldest_boot_time",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "oldest_boot_time": 1605734535506
      }
    ],
    "answer": "The oldest start time among OS processes running on servers in zone 1 racks is 1605734535506 (Unix timestamp)."
  },
  {
    "question": "Tell me which rack holds the machin running the cms application with pid 5521",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'cms', pid: 5521}) RETURN r.name AS rack_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_name": "DC1-RCK-4-2"
      }
    ],
    "answer": "The machine running the cms application with pid 5521 is located in rack DC1-RCK-4-2."
  },
  {
    "question": "How many services depend on postgres through software dependency chains?",
    "cypher": "MATCH (svc:Service)-[:INSTANCE]->(s1:Software)-[:DEPENDS_ON]->(s2:Software {name: 'postgres'}) RETURN COUNT(DISTINCT svc) AS dependent_services",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "dependent_services": 0
      }
    ],
    "answer": "0 services depend on postgres through software dependency chains."
  },
  {
    "question": "What's the maximum number of CPUs in machine types used by boxes running java services?",
    "cypher": "MATCH (t:Type)<-[:TYPE]-(m:Machine)-[:RUNS]->(s:Service)-[:INSTANCE]->(sw:Software {name: 'java'}) WHERE t.cpu IS NOT NULL RETURN MAX(t.cpu) AS max_cpu",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "max_cpu": 32
      }
    ],
    "answer": "The maximum number of CPUs in machine types used by boxes running Java services is 32."
  },
  {
    "question": "Find the zone of the rack containing machine DC1-RCK-4-2-M-174",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine {name: 'DC1-RCK-4-2-M-174'}) RETURN r.zone AS rack_zone",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_zone": 4
      }
    ],
    "answer": "The zone of the rack containing machine DC1-RCK-4-2-M-174 is zone 4."
  },
  {
    "question": "How many applications depend on services listening on port 5432?",
    "cypher": "MATCH (a:Application)-[:DEPENDS_ON]->(s:Service)-[:LISTENS]->(p:Port {port: 5432}) RETURN COUNT(DISTINCT a) AS app_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "app_count": 0
      }
    ],
    "answer": "0 applications depend on services listening on port 5432."
  },
  {
    "question": "What's the lowest rack number in zone 2 of datacenter DC1?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack {zone: 2}) WHERE r.rack IS NOT NULL RETURN MIN(r.rack) AS lowest_rack",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "lowest_rack": 1
      }
    ],
    "answer": "The lowest rack number in zone 2 of datacenter DC1 is 1."
  },
  {
    "question": "Count how many processes are instances of webserver software across the infrastructure",
    "cypher": "MATCH (p:Process)-[:INSTANCE]->(s:Software {name: 'webserver'}) RETURN COUNT(DISTINCT p) AS process_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "process_count": 3292
      }
    ],
    "answer": "There are 3,292 processes that are instances of webserver software across the infrastructure."
  },
  {
    "question": "What's the highest port number listened to by services running on machines in rack 9?",
    "cypher": "MATCH (r:Rack {rack: 9})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)-[:LISTENS]->(p:Port) WHERE p.port IS NOT NULL RETURN MAX(p.port) AS highest_port",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "highest_port": 18092
      }
    ],
    "answer": "The highest port number listened to by services running on machines in rack 9 is 18092."
  },
  {
    "question": "How many machins in DC1 are running applications that listen on port 8080?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application)-[:LISTENS]->(p:Port {port: 8080}) RETURN COUNT(DISTINCT m) AS machine_count",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_count": 3222
      }
    ],
    "answer": "3,222 machines in DC1 are running applications that listen on port 8080."
  },
  {
    "question": "What's the minimum start time among php services across all servers?",
    "cypher": "MATCH (m:Machine)-[:RUNS]->(s:Service {name: 'php'}) WHERE s.startTime IS NOT NULL RETURN MIN(s.startTime) AS earliest_startup",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "earliest_startup": 1606165899748
      }
    ],
    "answer": "The minimum start time for PHP services across all servers is 1606165899748."
  },
  {
    "question": "Tell me the location of the datacenter containing router DC1-R-1",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router {name: 'DC1-R-1'}) RETURN dc.location AS datacenter_location",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "datacenter_location": "Iceland, Rekjavik"
      }
    ],
    "answer": "The datacenter containing router DC1-R-1 is located in Reykjavik, Iceland."
  },
  {
    "question": "How many paths connect couchbase services to the machines they run on through racks?",
    "cypher": "MATCH path = (r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service {name: 'couchbase'}) RETURN COUNT(path) AS connection_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "connection_count": 1634
      }
    ],
    "answer": "There are 1,634 paths connecting Couchbase services to the machines they run on through racks."
  },
  {
    "question": "How many interfaces bridge connections between routers and networks in zone 1?",
    "cypher": "MATCH (r:Router {zone: 1})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(n:Network) RETURN COUNT(DISTINCT i) AS bridge_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "bridge_count": 0
      }
    ],
    "answer": "0 interfaces bridge connections between routers and networks in zone 1."
  },
  {
    "question": "How many racks connect machines running webapp to the datacenter through containment?",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'webapp'}) RETURN COUNT(DISTINCT r) AS connector_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "connector_count": 40
      }
    ],
    "answer": "40 racks connect machines running the webapp to the datacenter through containment."
  },
  {
    "question": "How many applications are running on machines in rack DC1-RCK-1-1 that depend on postgres?",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application)-[:INSTANCE]->(s:Software)-[:DEPENDS_ON]->(dep:Software {name: 'postgres'}) RETURN COUNT(DISTINCT a) AS total_applications",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_applications": 0
      }
    ],
    "answer": "0 applications running on machines in rack DC1-RCK-1-1 depend on postgres."
  },
  {
    "question": "What's the IP address of the interface that connects to the network in zone 4?",
    "cypher": "MATCH (n:Network {zone: 4})<-[:CONNECTS]-(i:Interface) RETURN i.ip AS interface_ip LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_ip": "10.4.0.254"
      }
    ],
    "answer": "The IP address of the interface that connects to the network in zone 4 is 10.4.0.254."
  },
  {
    "question": "How many boxes in datacenter DC1 are running the webserver app?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'webserver'}) RETURN COUNT(DISTINCT m) AS machine_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_count": 1658
      }
    ],
    "answer": "1,658 machines in datacenter DC1 are running the webserver application."
  },
  {
    "question": "What's the highest port number exposed by interfaces connected to switches in rack 8?",
    "cypher": "MATCH (s:Switch {rack: 8})-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port) WHERE p.port IS NOT NULL RETURN MAX(p.port) AS highest_port",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "highest_port": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Tell me the location of the datacenter containing rack DC1-RCK-4-2",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack {name: 'DC1-RCK-4-2'}) RETURN dc.location AS datacenter_location",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "datacenter_location": "Iceland, Rekjavik"
      }
    ],
    "answer": "The datacenter containing rack DC1-RCK-4-2 is located in Rekjavik, Iceland."
  },
  {
    "question": "How many different versions does the RHEL software have in version chain starting from 7.3?",
    "cypher": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version {name: '7.3'})-[:PREVIOUS*]->(prev:Version) RETURN COUNT(DISTINCT prev) AS version_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "version_count": 2
      }
    ],
    "answer": "Based on the query result, there are 2 different versions in the version chain starting from RHEL 7.3."
  },
  {
    "question": "What's the name of the application running on DC1-RCK-2-9-M-90 that depends on neo4j?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-2-9-M-90'})-[:RUNS]->(a:Application)-[:INSTANCE]->(s:Software)-[:DEPENDS_ON]->(dep:Software {name: 'neo4j'}) RETURN a.name AS application_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "application_name": "webapp"
      }
    ],
    "answer": "The application running on DC1-RCK-2-9-M-90 that depends on neo4j is \"webapp\"."
  },
  {
    "question": "Count the total number of services listening on port 443 across all machines in zone 1",
    "cypher": "MATCH (r:Rack {zone: 1})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)-[:LISTENS]->(p:Port {port: 443}) RETURN COUNT(DISTINCT s) AS service_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "service_count": 408
      }
    ],
    "answer": "There are 408 distinct services listening on port 443 across all machines in zone 1."
  },
  {
    "question": "What's the latest startTime among all cms applications running in the datacenter?",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'cms'}) WHERE a.startTime IS NOT NULL RETURN MAX(a.startTime) AS latest_start",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "latest_start": 1607029401909
      }
    ],
    "answer": "The latest startTime for CMS applications in the datacenter is 1607029401909 milliseconds since the epoch (which corresponds to December 4, 2020, at 02:30:01.909 UTC)."
  },
  {
    "question": "What's the PID of the webserver process on machine DC1-RCK-1-1-M-1?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process {name: 'webserver'}) RETURN p.pid AS process_id",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "process_id": 8966
      }
    ],
    "answer": "The PID of the webserver process on machine DC1-RCK-1-1-M-1 is 8966."
  },
  {
    "question": "Find the smallest zone number among racks holding machines that run java services",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)-[:INSTANCE]->(soft:Software {name: 'java'}) WHERE r.zone IS NOT NULL RETURN MIN(r.zone) AS lowest_zone",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "lowest_zone": 1
      }
    ],
    "answer": "The smallest zone number among racks holding machines that run Java services is 1."
  },
  {
    "question": "How many apps on DC1-RCK-4-2-M-174 depend on stuff named php?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-4-2-M-174'})-[:RUNS]->(a:Application)-[:INSTANCE]->(s:Software)-[:DEPENDS_ON]->(dep:Software {name: 'php'}) RETURN COUNT(DISTINCT a) AS app_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "app_count": 1
      }
    ],
    "answer": "1 app on DC1-RCK-4-2-M-174 depends on software named php."
  },
  {
    "question": "What zone does the network with IP 10.1 belong to?",
    "cypher": "MATCH (n:Network {ip: '10.1'}) RETURN n.zone AS network_zone",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "network_zone": 1
      }
    ],
    "answer": "The network with IP 10.1 belongs to Zone 1."
  },
  {
    "question": "Count distinct software dependencies of the cms application instance",
    "cypher": "MATCH (a:Application)-[:INSTANCE]->(s:Software {name: 'cms'})-[:DEPENDS_ON]->(dep:Software) RETURN COUNT(DISTINCT dep) AS dependency_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "dependency_count": 3
      }
    ],
    "answer": "The cms application instance has 3 distinct software dependencies."
  },
  {
    "question": "What's the IP of the egress router in datacenter DC1?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(e:Egress)-[:ROUTES]->(i:Interface) RETURN i.ip AS egress_ip LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "egress_ip": "10.0.0.254"
      }
    ],
    "answer": "The IP of the egress router in datacenter DC1 is 10.0.0.254."
  },
  {
    "question": "How many machines in Rekjavik are running OS version 7.1?",
    "cypher": "MATCH (dc:DataCenter {location: 'Iceland, Rekjavik'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(os:OS {name: '7.1'}) RETURN COUNT(DISTINCT m) AS machine_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_count": 820
      }
    ],
    "answer": "820 machines in Rekjavik are running OS version 7.1."
  },
  {
    "question": "Find the maximum rack number in zone 2",
    "cypher": "MATCH (r:Rack {zone: 2}) WHERE r.rack IS NOT NULL RETURN MAX(r.rack) AS highest_rack",
    "query_type": "Sorting",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "highest_rack": 10
      }
    ],
    "answer": "The maximum rack number in zone 2 is 10."
  },
  {
    "question": "Count how many switches connect to interfaces that expose port 80",
    "cypher": "MATCH (s:Switch)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port {port: 80}) RETURN COUNT(DISTINCT s) AS switch_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "switch_count": 0
      }
    ],
    "answer": "0 switches connect to interfaces that expose port 80."
  },
  {
    "question": "What's the earliest startTime of any webserver proces in the infrastructure?",
    "cypher": "MATCH (p:Process {name: 'webserver'}) WHERE p.startTime IS NOT NULL RETURN MIN(p.startTime) AS earliest_start",
    "query_type": "Sorting",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "earliest_start": 1606165629748
      }
    ],
    "answer": "The earliest startTime of a webserver process is 1606165629748 milliseconds (Unix timestamp)."
  },
  {
    "question": "How many versions can be reached from java version 8 through dependency chains?",
    "cypher": "MATCH (v:Version {name: '8'})<-[:VERSION]-(s:Software {name: 'java'})<-[:DEPENDS_ON]-(other:Software)-[:VERSION]->(ov:Version) RETURN COUNT(DISTINCT ov) AS version_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "version_count": 0
      }
    ],
    "answer": "The query result shows that 0 versions can be reached from Java version 8 through dependency chains. This means no other software versions are directly dependent on or connected to Java version 8 in the database."
  },
  {
    "question": "Tell me the name of the rack holding machine DC1-RCK-4-2-M-174",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine {name: 'DC1-RCK-4-2-M-174'}) RETURN r.name AS rack_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_name": "DC1-RCK-4-2"
      }
    ],
    "answer": "The rack holding machine DC1-RCK-4-2-M-174 is named DC1-RCK-4-2."
  },
  {
    "question": "What's the total number of ports exposed by all interfaces in zone 1 networks?",
    "cypher": "MATCH (n:Network {zone: 1})-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port) RETURN COUNT(DISTINCT p) AS port_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "port_count": 0
      }
    ],
    "answer": "Based on the query result, the total number of ports exposed by all interfaces in zone 1 networks is 0."
  },
  {
    "question": "Find the highest numbered version in the RHEL version chain",
    "cypher": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version) WHERE v.name IS NOT NULL RETURN v.name AS version_name ORDER BY v.name DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "version_name": "7.3"
      }
    ],
    "answer": "The highest numbered version in the RHEL version chain is 7.3."
  },
  {
    "question": "How many interfaces does router DC1-RE route to?",
    "cypher": "MATCH (r:Router {name: 'DC1-RE'})-[:ROUTES]->(i:Interface) RETURN COUNT(DISTINCT i) AS interface_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_count": 1
      }
    ],
    "answer": "Router DC1-RE routes to 1 interface."
  },
  {
    "question": "Count the machines that can reach port 8080 through their apps and interfaces",
    "cypher": "MATCH (m:Machine)-[:RUNS]->(a:Application)-[:LISTENS]->(p:Port {port: 8080})<-[:EXPOSES]-(i:Interface)<-[:ROUTES]-(m) RETURN COUNT(DISTINCT m) AS machine_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_count": 3222
      }
    ],
    "answer": "3,222 machines can reach port 8080 through their applications and interfaces."
  },
  {
    "question": "What's the most recent OS startTime on any box in rack DC1-RCK-1-1?",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(os:OS) WHERE os.startTime IS NOT NULL RETURN MAX(os.startTime) AS latest_start",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "latest_start": 1606586121064
      }
    ],
    "answer": "The most recent OS startTime on a machine in rack DC1-RCK-1-1 is 1606586121064 (which represents a timestamp in milliseconds since the Unix epoch)."
  },
  {
    "question": "What zone contains the rack with the most machines running webapp?",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application {name: 'webapp'}) WITH r, COUNT(DISTINCT m) as machine_count ORDER BY machine_count DESC LIMIT 1 RETURN r.zone AS rack_zone",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_zone": 1
      }
    ],
    "answer": "Zone 1 contains the rack with the most machines running the webapp."
  },
  {
    "question": "What's the smallest PID among webserver processes?",
    "cypher": "MATCH (p:Process {name: 'webserver'}) WHERE p.pid IS NOT NULL RETURN MIN(p.pid) AS lowest_pid",
    "query_type": "Sorting",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "lowest_pid": 0
      }
    ],
    "answer": "The smallest PID among webserver processes is 0."
  },
  {
    "question": "How many networks can interface 10.0.0.254 connect to?",
    "cypher": "MATCH (i:Interface {ip: '10.0.0.254'})-[:CONNECTS]->(n:Network) RETURN COUNT(DISTINCT n) AS network_count",
    "query_type": "Existence Verification",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "network_count": 4
      }
    ],
    "answer": "The interface 10.0.0.254 can connect to 4 networks."
  },
  {
    "question": "Count all the different zones that have racks with switches",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(s:Switch) RETURN COUNT(DISTINCT r.zone) AS zone_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "zone_count": 4
      }
    ],
    "answer": "There are 4 different zones that have racks with switches."
  },
  {
    "question": "What's the highest zone number in datacenter DC1?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack) WHERE r.zone IS NOT NULL RETURN MAX(r.zone) AS max_zone",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "max_zone": 4
      }
    ],
    "answer": "The highest zone number in datacenter DC1 is 4."
  },
  {
    "question": "How many routers in DC1 route to interfaces that connect to zone 4 networks?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)-[:ROUTES]->(i:Interface)-[:CONNECTS]->(n:Network {zone: 4}) RETURN COUNT(DISTINCT r) AS router_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "router_count": 2
      }
    ],
    "answer": "2 routers in DC1 route to interfaces that connect to zone 4 networks."
  },
  {
    "question": "Find the rack number of the rack containing machin DC1-RCK-2-9-M-90",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine {name: 'DC1-RCK-2-9-M-90'}) RETURN r.rack AS rack_number",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_number": 9
      }
    ],
    "answer": "The rack number for machine DC1-RCK-2-9-M-90 is 9."
  },
  {
    "question": "How many processes are instances of software that depends on postgress?",
    "cypher": "MATCH (p:Process)-[:INSTANCE]->(s:Software)-[:DEPENDS_ON]->(dep:Software {name: 'postgres'}) RETURN COUNT(DISTINCT p) AS process_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "process_count": 0
      }
    ],
    "answer": "0 processes are instances of software that depends on postgres."
  },
  {
    "question": "What's the lowest startTime among all services running on machines in zone 2?",
    "cypher": "MATCH (r:Rack {zone: 2})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service) WHERE s.startTime IS NOT NULL RETURN MIN(s.startTime) AS earliest_start",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "earliest_start": 1606166190569
      }
    ],
    "answer": "The lowest startTime among all services running on machines in zone 2 is 1606166190569."
  },
  {
    "question": "Tell me how many paths exist between any machine in rack 1 and services listening on port 443",
    "cypher": "MATCH path = (r:Rack {rack: 1})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)-[:LISTENS]->(p:Port {port: 443}) RETURN COUNT(path) AS path_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "path_count": 144
      }
    ],
    "answer": "There are 144 paths between machines in rack 1 and services listening on port 443."
  },
  {
    "question": "What version of RHEL is running on DC1-RCK-1-1-M-1?",
    "cypher": "MATCH (m:Machine {name: 'DC1-RCK-1-1-M-1'})-[:RUNS]->(os:OS)-[:INSTANCE]->(v:Version)<-[:VERSION]-(s:Software {name: 'RHEL'}) RETURN v.name AS os_version",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "os_version": "7.1"
      }
    ],
    "answer": "RHEL 7.1 is running on DC1-RCK-1-1-M-1."
  },
  {
    "question": "Count distinct PIDs across all processs in the datacenter",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(p:Process) RETURN COUNT(DISTINCT p.pid) AS pid_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "pid_count": 8939
      }
    ],
    "answer": "There are 8,939 distinct PIDs across all processes in the datacenter."
  },
  {
    "question": "What's the maximum network size in bytes among networks in the infrastructure?",
    "cypher": "MATCH (n:Network) WHERE n.size IS NOT NULL RETURN MAX(n.size) AS largest_network",
    "query_type": "Sorting",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "largest_network": 16
      }
    ],
    "answer": "The maximum network size is 16 bytes."
  },
  {
    "question": "How many degrees of separation exist between neo4j software and java through dependencies?",
    "cypher": "MATCH path = shortestPath((s1:Software {name: 'neo4j'})-[:DEPENDS_ON*]-(s2:Software {name: 'java'})) RETURN LENGTH(path) AS separation_distance",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "separation_distance": 2
      }
    ],
    "answer": "There are 2 degrees of separation between neo4j software and java through dependencies."
  },
  {
    "question": "What's the location of the datacenter that contains the egres router?",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(e:Egress) RETURN dc.location AS datacenter_location LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "datacenter_location": "Iceland, Rekjavik"
      }
    ],
    "answer": "The egress router is located in Rekjavik, Iceland."
  },
  {
    "question": "Find the minimum port number exposed by interfaces connected to machines in rack DC1-RCK-4-2",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-4-2'})-[:HOLDS]->(m:Machine)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port) WHERE p.port IS NOT NULL RETURN MIN(p.port) AS lowest_port",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "lowest_port": 80
      }
    ],
    "answer": "The minimum port number exposed by interfaces connected to machines in rack DC1-RCK-4-2 is 80."
  },
  {
    "question": "How many versions of java are reachable through software dependency chains from webapp?",
    "cypher": "MATCH (a:Application {name: 'webapp'})-[:INSTANCE]->(s1:Software)-[:DEPENDS_ON*]->(s2:Software {name: 'java'})-[:VERSION]->(v:Version) RETURN COUNT(DISTINCT v) AS version_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "version_count": 1
      }
    ],
    "answer": "Based on the query result, there is 1 distinct version of Java reachable through dependency chains from the webapp."
  },
  {
    "question": "How many machines are running applications that depend on php in the DC1 data center?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application)-[:INSTANCE]->(s:Software)-[:DEPENDS_ON]->(php:Software {name: 'php'}) RETURN COUNT(DISTINCT m) AS total_machines",
    "query_type": "Aggregation",
    "complexity": "5-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_machines": 1634
      }
    ],
    "answer": "In the DC1 data center, 1,634 machines are running applications that depend on PHP."
  },
  {
    "question": "What's the IP address of the interface connected to switch 10.1.1?",
    "cypher": "MATCH (s:Switch {ip: '10.1.1'})-[:ROUTES]->(i:Interface) RETURN i.ip AS interface_ip LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_ip": "10.1.1.254"
      }
    ],
    "answer": "The IP address of the interface connected to switch 10.1.1 is 10.1.1.254."
  },
  {
    "question": "What's the highest port number exposed by interfaces in zone 1?",
    "cypher": "MATCH (z:Zone {zone: 1})-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port) WHERE p.port IS NOT NULL RETURN MAX(p.port) AS highest_port",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "highest_port": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "How many routers connect DC1 to interfaces in the 10.1 network?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)-[:ROUTES]->(i:Interface)-[:CONNECTS]->(n:Network {ip: '10.1'}) RETURN COUNT(DISTINCT r) AS router_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "router_count": 2
      }
    ],
    "answer": "2 routers from DC1 connect to interfaces in the 10.1 network."
  },
  {
    "question": "Tell me the total number of ports listened to by webserver applications across all machines",
    "cypher": "MATCH (m:Machine)-[:RUNS]->(a:Application {name: 'webserver'})-[:LISTENS]->(p:Port) RETURN COUNT(p) AS total_ports",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_ports": 3316
      }
    ],
    "answer": "There are 3,316 total ports listened to by webserver applications across all machines."
  },
  {
    "question": "What's the location of the data center containing rack DC1-RCK-4-2?",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Rack {name: 'DC1-RCK-4-2'}) RETURN dc.location AS datacenter_location",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "datacenter_location": "Iceland, Rekjavik"
      }
    ],
    "answer": "The data center containing rack DC1-RCK-4-2 is located in Rekjavik, Iceland."
  },
  {
    "question": "Find the minimum RAM among machine types used by servers running couchbase",
    "cypher": "MATCH (t:Type)<-[:TYPE]-(m:Machine)-[:RUNS]->(s:Service {name: 'couchbase'}) WHERE t.ram IS NOT NULL RETURN MIN(t.ram) AS lowest_ram",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "lowest_ram": 1
      }
    ],
    "answer": "The minimum RAM among machine types used by servers running Couchbase is 1."
  },
  {
    "question": "What's the shortest path length between interfaces 10.1.1.1 and 10.4.8.254?",
    "cypher": "MATCH path = shortestPath((i1:Interface {ip: '10.1.1.1'})-[*]-(i2:Interface {ip: '10.4.8.254'})) RETURN LENGTH(path) AS path_length",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "path_length": 5
      }
    ],
    "answer": "The shortest path length between interfaces 10.1.1.1 and 10.4.8.254 is 5."
  },
  {
    "question": "How many boxes in rack DC1-RCK-2-9 are running apps?",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-2-9'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application) RETURN COUNT(DISTINCT m) AS machine_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_count": 200
      }
    ],
    "answer": "200 machines in rack DC1-RCK-2-9 are running applications."
  },
  {
    "question": "What's the name of the software that cms depends on and also has port 80 in its ports list?",
    "cypher": "MATCH (cms:Software {name: 'cms'})-[:DEPENDS_ON]->(s:Software) WHERE 80 IN s.ports RETURN s.name AS software_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "software_name": "webserver"
      }
    ],
    "answer": "The software that cms depends on and has port 80 in its ports list is \"webserver\"."
  },
  {
    "question": "What's the maximum disk size among machine types in data center DC-1?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) WHERE t.disk IS NOT NULL RETURN MAX(t.disk) AS max_disk_size",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "max_disk_size": 3125
      }
    ],
    "answer": "The maximum disk size among machine types in data center DC-1 is 3125."
  },
  {
    "question": "Count how many interfaces can reach port 443 through machines running webserver",
    "cypher": "MATCH (i:Interface)<-[:ROUTES]-(m:Machine)-[:RUNS]->(a:Application {name: 'webserver'})-[:LISTENS]->(p:Port {port: 443}) RETURN COUNT(DISTINCT i) AS interface_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_count": 1658
      }
    ],
    "answer": "1,658 interfaces can reach port 443 through machines running a webserver."
  },
  {
    "question": "What's the sum of all zone numbers for networks connected to router DC1-R-1?",
    "cypher": "MATCH (r:Router {name: 'DC1-R-1'})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(n:Network) RETURN SUM(n.zone) AS total_zone_sum",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_zone_sum": 1
      }
    ],
    "answer": "The sum of all zone numbers for networks connected to router DC1-R-1 is 1."
  },
  {
    "question": "Which IP does the egress router DC1-RE route to?",
    "cypher": "MATCH (e:Egress {name: 'DC1-RE'})-[:ROUTES]->(i:Interface) RETURN i.ip AS interface_ip LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_ip": "10.0.0.254"
      }
    ],
    "answer": "The egress router DC1-RE routes to the IP address 10.0.0.254."
  },
  {
    "question": "Find the lowest CPU count among machines running processes that listen on port 8080",
    "cypher": "MATCH (t:Type)<-[:TYPE]-(m:Machine)-[:RUNS]->(p:Process)-[:LISTENS]->(port:Port {port: 8080}) WHERE t.cpu IS NOT NULL RETURN MIN(t.cpu) AS min_cpu_count",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "min_cpu_count": 1
      }
    ],
    "answer": "The lowest CPU count among machines running processes that listen on port 8080 is 1."
  },
  {
    "question": "How many switches can be reached from zone 4 networks through their routing interfaces?",
    "cypher": "MATCH (z:Zone {zone: 4})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch) RETURN COUNT(DISTINCT s) AS switch_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "switch_count": 10
      }
    ],
    "answer": "10 switches can be reached from zone 4 networks through their routing interfaces."
  },
  {
    "question": "Calculate the average rack number for racks holding machines running neo4j-dependent software",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application)-[:INSTANCE]->(s:Software)-[:DEPENDS_ON]->(neo:Software {name: 'neo4j'}) RETURN AVG(r.rack) AS average_rack_number",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "average_rack_number": 5.461586901763238
      }
    ],
    "answer": "The average rack number for racks holding machines running neo4j-dependent software is 5.46."
  },
  {
    "question": "What's the zone of the network that connects to interface 10.1.10.254?",
    "cypher": "MATCH (n:Network)-[:ROUTES]->(i:Interface {ip: '10.1.10.254'}) RETURN n.zone AS network_zone",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "network_zone": 1
      }
    ],
    "answer": "The zone of the network that connects to interface 10.1.10.254 is Zone 1."
  },
  {
    "question": "Which is the highest numbered rack in zone 3 holding xs-type machines?",
    "cypher": "MATCH (r:Rack {zone: 3})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type {type: 'xs'}) WHERE r.rack IS NOT NULL RETURN MAX(r.rack) AS highest_rack_number",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "highest_rack_number": 10
      }
    ],
    "answer": "Rack 10 is the highest numbered rack in zone 3 holding xs-type machines."
  },
  {
    "question": "How many versions does REHL software have according to the version relationships?",
    "cypher": "MATCH (s:Software {name: 'RHEL'})-[:VERSION]->(v:Version) RETURN COUNT(DISTINCT v) AS version_count",
    "query_type": "Existence Verification",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "version_count": 3
      }
    ],
    "answer": "According to the version relationships, RHEL software has 3 distinct versions."
  },
  {
    "question": "Count the distinct applications that depend on services running on machines in rack 1",
    "cypher": "MATCH (r:Rack {rack: 1})-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service)<-[:DEPENDS_ON]-(a:Application) RETURN COUNT(DISTINCT a) AS app_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "app_count": 800
      }
    ],
    "answer": "There are 800 distinct applications that depend on services running on machines in rack 1."
  },
  {
    "question": "What's the smallest port number exposed by interfaces connected to switches in zone 2?",
    "cypher": "MATCH (z:Zone {zone: 2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch)-[:ROUTES]->(i2:Interface)-[:EXPOSES]->(p:Port) WHERE p.port IS NOT NULL RETURN MIN(p.port) AS lowest_port",
    "query_type": "Sorting",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "lowest_port": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "How many processes depend on the 9.4 service across all machines?",
    "cypher": "MATCH (s:Service {name: '9.4'})<-[:DEPENDS_ON]-(p:Process) RETURN COUNT(DISTINCT p) AS process_count",
    "query_type": "Existence Verification",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "process_count": 1658
      }
    ],
    "answer": "1,658 processes depend on the 9.4 service across all machines."
  },
  {
    "question": "What's the total number of machines in DC1 running both OS and Application processes?",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine) WHERE EXISTS((m)-[:RUNS]->(:OS)) AND EXISTS((m)-[:RUNS]->(:Application)) RETURN COUNT(DISTINCT m) AS machine_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "machine_count": 8000
      }
    ],
    "answer": "There are 8,000 machines in DC1 that are running both Operating System (OS) and Application processes."
  },
  {
    "question": "Tell me the rack number of the rack containing machine DC1-RCK-3-8-M-49",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine {name: 'DC1-RCK-3-8-M-49'}) RETURN r.rack AS rack_number",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_number": 8
      }
    ],
    "answer": "The rack number containing machine DC1-RCK-3-8-M-49 is 8."
  },
  {
    "question": "Find the peak start time among java services running on webapp machines",
    "cypher": "MATCH (m:Machine)-[:RUNS]->(a:Application {name: 'webapp'}), (m)-[:RUNS]->(s:Service {name: 'java'}) WHERE s.startTime IS NOT NULL RETURN MAX(s.startTime) AS latest_start_time",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "latest_start_time": 1607028764610
      }
    ],
    "answer": "The peak start time for Java services running on webapp machines is 1607028764610 milliseconds."
  },
  {
    "question": "How many interfaces connect networks in different zones?",
    "cypher": "MATCH (n1:Network)-[:ROUTES]->(i:Interface)<-[:ROUTES]-(n2:Network) WHERE n1.zone <> n2.zone RETURN COUNT(DISTINCT i) AS bridge_interface_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "bridge_interface_count": 0
      }
    ],
    "answer": "Based on the query result, 0 interfaces connect networks in different zones."
  },
  {
    "question": "Sum up all the diffrent CPU counts for machine types used in zone 4",
    "cypher": "MATCH (r:Rack {zone: 4})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) RETURN SUM(DISTINCT t.cpu) AS total_cpu_sum",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_cpu_sum": 63
      }
    ],
    "answer": "The sum of distinct CPU counts for machine types in zone 4 is 63."
  },
  {
    "question": "What's the IP of the network that routes to the switch at 10.4.8?",
    "cypher": "MATCH (n:Network)-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch {ip: '10.4.8'}) RETURN n.ip AS network_ip LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "network_ip": "10.4"
      }
    ],
    "answer": "The IP of the network that routes to the switch at 10.4.8 is 10.4."
  },
  {
    "question": "Which zone has the most interfaces routing to it among zones with size 16?",
    "cypher": "MATCH (z:Zone {size: 16})-[:ROUTES]->(i:Interface) WITH z.zone AS zone, COUNT(i) AS interface_count WHERE z.zone IS NOT NULL RETURN zone AS zone_with_most_interfaces ORDER BY interface_count DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "zone_with_most_interfaces": 1
      }
    ],
    "answer": "Zone 1 has the most interfaces routing to it among zones with size 16."
  },
  {
    "question": "Count the paths between couchbase services and applications that depend on them",
    "cypher": "MATCH path = (s:Service {name: 'couchbase'})<-[:DEPENDS_ON]-(a:Application) RETURN COUNT(path) AS dependency_paths",
    "query_type": "Existence Verification",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "dependency_paths": 1635
      }
    ],
    "answer": "There are 1,635 paths between Couchbase services and the applications that depend on them."
  },
  {
    "question": "How many ports are exposed by interfaces routing from machines running webserver apps?",
    "cypher": "MATCH (m:Machine)-[:RUNS]->(a:Application {name: 'webserver'}), (m)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port) RETURN COUNT(DISTINCT p) AS exposed_port_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "exposed_port_count": 3316
      }
    ],
    "answer": "3,316 ports are exposed by interfaces routing from machines running webserver applications."
  },
  {
    "question": "What type name belongs to machines in DC1-RCK-4-4?",
    "cypher": "MATCH (r:Rack {name: 'DC1-RCK-4-4'})-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) RETURN t.name AS type_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "type_name": "s-2/4/5"
      }
    ],
    "answer": "The type name for machines in DC1-RCK-4-4 is \"s-2/4/5\"."
  },
  {
    "question": "Find the minimum zone number among networks connected to DC1's routers",
    "cypher": "MATCH (dc:DataCenter {name: 'DC1'})-[:CONTAINS]->(r:Router)-[:ROUTES]->(i:Interface)-[:CONNECTS]->(n:Network) WHERE n.zone IS NOT NULL RETURN MIN(n.zone) AS lowest_zone",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "lowest_zone": 1
      }
    ],
    "answer": "The minimum zone number among networks connected to DC1's routers is 1."
  },
  {
    "question": "How many machines can postgres/9.4 reach through webserver dependencies?",
    "cypher": "MATCH (v:Version {name: '9.4'})<-[:DEPENDS_ON]-(w:Software {name: 'webserver'})<-[:INSTANCE]-(a:Application)<-[:RUNS]-(m:Machine) RETURN COUNT(DISTINCT m) AS reachable_machines",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "reachable_machines": 1658
      }
    ],
    "answer": "1,658 machines can reach postgres/9.4 through webserver dependencies."
  },
  {
    "question": "Calculate the average port number listened to by all php procesess",
    "cypher": "MATCH (p:Process {name: 'php'})-[:LISTENS]->(port:Port) RETURN AVG(port.port) AS average_port",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "average_port": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returned None for the average port, which could mean either no PHP processes were found listening on ports or there was insufficient data to calculate an average."
  },
  {
    "question": "Which name does the previous version of 7.3 have?",
    "cypher": "MATCH (v:Version {name: '7.3'})-[:PREVIOUS]->(prev:Version) RETURN prev.name AS previous_version_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "previous_version_name": "7.2"
      }
    ],
    "answer": "The previous version of 7.3 is 7.2."
  },
  {
    "question": "What's the maximum RAM in machine types connected to interfaces exposing port 11210?",
    "cypher": "MATCH (t:Type)<-[:TYPE]-(m:Machine)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(p:Port {port: 11210}) WHERE t.ram IS NOT NULL RETURN MAX(t.ram) AS highest_ram",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "highest_ram": 1024
      }
    ],
    "answer": "The maximum RAM in machine types connected to interfaces exposing port 11210 is 1024."
  },
  {
    "question": "How many racks in Icelend, Rekjavik contain machines with interface connections?",
    "cypher": "MATCH (dc:DataCenter {location: 'Iceland, Rekjavik'})-[:CONTAINS]->(r:Rack)-[:HOLDS]->(m:Machine)-[:ROUTES]->(i:Interface) RETURN COUNT(DISTINCT r) AS rack_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "rack_count": 40
      }
    ],
    "answer": "40 racks in Iceland, Reykjavik contain machines with interface connections."
  },
  {
    "question": "Count all the applications that instance to cms software",
    "cypher": "MATCH (a:Application)-[:INSTANCE]->(s:Software {name: 'cms'}) RETURN COUNT(a) AS app_instances",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "app_instances": 1634
      }
    ],
    "answer": "There are 1,634 applications that instance to CMS software."
  },
  {
    "question": "What's the IP address of the interface that switch 10.1.10 routes to?",
    "cypher": "MATCH (s:Switch {ip: '10.1.10'})-[:ROUTES]->(i:Interface) RETURN i.ip AS interface_ip LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "interface_ip": "10.1.10.254"
      }
    ],
    "answer": "The IP address of the interface that switch 10.1.10 routes to is 10.1.10.254."
  },
  {
    "question": "Find the earliest startTime among OS processes running version 7.3",
    "cypher": "MATCH (os:OS)-[:INSTANCE]->(v:Version {name: '7.3'}) WHERE os.startTime IS NOT NULL RETURN MIN(os.startTime) AS earliest_start",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "earliest_start": 1605733628167
      }
    ],
    "answer": "The earliest startTime for an OS process running version 7.3 is 1605733628167."
  },
  {
    "question": "How many services does webapp software depend on through its dependency chain?",
    "cypher": "MATCH (w:Software {name: 'webapp'})-[:DEPENDS_ON*]->(s:Service) RETURN COUNT(DISTINCT s) AS service_dependency_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "service_dependency_count": 2
      }
    ],
    "answer": "Webapp software depends on 2 distinct services through its dependency chain."
  },
  {
    "question": "What's the total disk capacity of all xs-type boxes?",
    "cypher": "MATCH (t:Type {type: 'xs'}) RETURN SUM(t.disk) AS total_disk_capacity",
    "query_type": "Aggregation",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "total_disk_capacity": 1
      }
    ],
    "answer": "The total disk capacity of all xs-type boxes is 1."
  },
  {
    "question": "Tell me which datacenter location contains router DC1-R-1",
    "cypher": "MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router {name: 'DC1-R-1'}) RETURN dc.location AS datacenter_location",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "datacenter_location": "Iceland, Rekjavik"
      }
    ],
    "answer": "The router DC1-R-1 is located in the datacenter in Rekjavik, Iceland."
  },
  {
    "question": "What's the highest zone number among racks holding machines running couchbase service?",
    "cypher": "MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service {name: 'couchbase'}) WHERE r.zone IS NOT NULL RETURN MAX(r.zone) AS max_zone_number",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "max_zone_number": 4
      }
    ],
    "answer": "The highest zone number among racks holding machines running couchbase service is 4."
  },
  {
    "question": "How many interfaces connect the 10.1 and 10.4 networks?",
    "cypher": "MATCH (n1:Network {ip: '10.1'})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(n2:Network {ip: '10.4'}) RETURN COUNT(DISTINCT i) AS connecting_interfaces",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "network",
    "validated": true,
    "result": [
      {
        "connecting_interfaces": 0
      }
    ],
    "answer": "Based on the query result, there are 0 interfaces connecting the 10.1 and 10.4 networks."
  },
  {
    "question": "What's the price of Chai?",
    "cypher": "MATCH (p:Product {productName: 'Chai'}) RETURN p.unitPrice AS product_price",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_price": 18.0
      }
    ],
    "answer": "The price of Chai is $18.00."
  },
  {
    "question": "What's the contact name for Ernst Handel?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'}) RETURN c.contactName AS contact_name",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "contact_name": "Roland Mendel"
      }
    ],
    "answer": "The contact name for Ernst Handel is Roland Mendel."
  },
  {
    "question": "How many units of Sasquatch Ale are in stock?",
    "cypher": "MATCH (p:Product {productName: 'Sasquatch Ale'}) RETURN p.unitsInStock AS units_in_stock",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "units_in_stock": 111
      }
    ],
    "answer": "There are 111 units of Sasquatch Ale in stock."
  },
  {
    "question": "What city is Exotic Liquids located in?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'}) RETURN s.city AS supplier_city",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_city": "London"
      }
    ],
    "answer": "Exotic Liquids is located in London."
  },
  {
    "question": "Tell me the freight cost for order 10248",
    "cypher": "MATCH (o:Order {orderID: '10248'}) RETURN o.freight AS freight_cost",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "freight_cost": "32.38"
      }
    ],
    "answer": "The freight cost for order 10248 is $32.38."
  },
  {
    "question": "What's the phone number of White Clover Markets?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'}) RETURN c.phone AS customer_phone",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_phone": "(206) 555-4112"
      }
    ],
    "answer": "The phone number for White Clover Markets is (206) 555-4112."
  },
  {
    "question": "Is R\u00f6ssle Sauerkraut discontinued?",
    "cypher": "MATCH (p:Product {productName: 'R\u00f6ssle Sauerkraut'}) RETURN p.discontinued AS is_discontinued",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "is_discontinued": true
      }
    ],
    "answer": "Yes, R\u00f6ssle Sauerkraut is discontinued."
  },
  {
    "question": "What's the quantity per unit for Teatime Chocolate Biscuits?",
    "cypher": "MATCH (p:Product {productName: 'Teatime Chocolate Biscuits'}) RETURN p.quantityPerUnit AS quantity_per_unit",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "quantity_per_unit": "10 boxes x 12 pieces"
      }
    ],
    "answer": "The quantity per unit for Teatime Chocolate Biscuits is 10 boxes x 12 pieces."
  },
  {
    "question": "What country is Alfreds Futterkiste from?",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'}) RETURN c.country AS customer_country",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_country": "Germany"
      }
    ],
    "answer": "Alfreds Futterkiste is from Germany."
  },
  {
    "question": "What's the ship city for order 10990?",
    "cypher": "MATCH (o:Order {orderID: '10990'}) RETURN o.shipCity AS ship_city",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "ship_city": "Graz"
      }
    ],
    "answer": "The ship city for order 10990 is Graz."
  },
  {
    "question": "What's the reorder level for Chai?",
    "cypher": "MATCH (p:Product {productName: 'Chai'}) RETURN p.reorderLevel AS reorder_level",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "reorder_level": 10
      }
    ],
    "answer": "The reorder level for Chai is 10."
  },
  {
    "question": "Tell me the postal code of Lonesome Pine Restaurant",
    "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'}) RETURN c.postalCode AS postal_code",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "postal_code": "97219"
      }
    ],
    "answer": "The postal code of Lonesome Pine Restaurant is 97219."
  },
  {
    "question": "What's the contact title at Simons bistro?",
    "cypher": "MATCH (c:Customer {companyName: 'Simons bistro'}) RETURN c.contactTitle AS contact_title",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "contact_title": "Owner"
      }
    ],
    "answer": "The contact title at Simons bistro is Owner."
  },
  {
    "question": "What's the unit price of Mozzarella di Giovanni?",
    "cypher": "MATCH (p:Product {productName: 'Mozzarella di Giovanni'}) RETURN p.unitPrice AS unit_price",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "unit_price": 34.8
      }
    ],
    "answer": "The unit price of Mozzarella di Giovanni is $34.80."
  },
  {
    "question": "What's the required date for order 11066?",
    "cypher": "MATCH (o:Order {orderID: '11066'}) RETURN o.requiredDate AS required_date",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "required_date": "1998-05-29 00:00:00.000"
      }
    ],
    "answer": "The required date for order 11066 is May 29, 1998."
  },
  {
    "question": "What's the phone number of Exotc Liquids?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'}) RETURN s.phone AS supplier_phone",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_phone": "(171) 555-2222"
      }
    ],
    "answer": "The phone number for Exotic Liquids is (171) 555-2222."
  },
  {
    "question": "What region is White Clover Markets in?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'}) RETURN c.region AS customer_region",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_region": "WA"
      }
    ],
    "answer": "The region for White Clover Markets is WA (Washington)."
  },
  {
    "question": "How many orders has Ernst Handel placed?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order) RETURN COUNT(o) AS total_orders",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_orders": 30
      }
    ],
    "answer": "Ernst Handel has placed 30 orders."
  },
  {
    "question": "How many products does Exotic Liquids supply?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product) RETURN COUNT(p) AS total_products",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_products": 3
      }
    ],
    "answer": "Exotic Liquids supplies 3 products."
  },
  {
    "question": "What category does Chai belong to?",
    "cypher": "MATCH (p:Product {productName: 'Chai'})-[:PART_OF]->(c:Category) RETURN c.categoryName AS category_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_name": "Beverages"
      }
    ],
    "answer": "Chai belongs to the Beverages category."
  },
  {
    "question": "How many products are in order 10248?",
    "cypher": "MATCH (o:Order {orderID: '10248'})-[:ORDERS]->(p:Product) RETURN COUNT(p) AS product_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_count": 3
      }
    ],
    "answer": "There are 3 products in order 10248."
  },
  {
    "question": "What's the total quantity of Chai ordered in order 10317?",
    "cypher": "MATCH (o:Order {orderID: '10317'})-[r:ORDERS]->(p:Product {productName: 'Chai'}) RETURN r.quantity AS order_quantity",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "order_quantity": 20
      }
    ],
    "answer": "20 units of Chai were ordered in order 10317."
  },
  {
    "question": "How many stuffs has Alfreds Futterkiste ordered?",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o:Order) RETURN COUNT(o) AS total_orders",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_orders": 6
      }
    ],
    "answer": "Alfreds Futterkiste has ordered 6 times."
  },
  {
    "question": "What's the discount on R\u00f6ssle Sauerkraut in order 10643?",
    "cypher": "MATCH (o:Order {orderID: '10643'})-[r:ORDERS]->(p:Product {productName: 'R\u00f6ssle Sauerkraut'}) RETURN r.discount AS order_discount",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "order_discount": "0.25"
      }
    ],
    "answer": "The discount on R\u00f6ssle Sauerkraut in order 10643 is 0.25 or 25%."
  },
  {
    "question": "How many products are in the Beverages category?",
    "cypher": "MATCH (c:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product) RETURN COUNT(p) AS product_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_count": 12
      }
    ],
    "answer": "There are 12 products in the Beverages category."
  },
  {
    "question": "What's the average unit price of products supplied by Exotic Liquids?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product) RETURN AVG(p.unitPrice) AS average_price",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "average_price": 15.666666666666666
      }
    ],
    "answer": "The average unit price of products supplied by Exotic Liquids is $15.67."
  },
  {
    "question": "How many unique products has White Clover Markets ordered?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) RETURN COUNT(DISTINCT p) AS unique_products",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "unique_products": 32
      }
    ],
    "answer": "White Clover Markets has ordered 32 unique products."
  },
  {
    "question": "What's the highest priced product ordered by Lonesome Pine Restaurant?",
    "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.unitPrice IS NOT NULL RETURN MAX(p.unitPrice) AS highest_price",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "highest_price": 62.5
      }
    ],
    "answer": "The highest priced product ordered by Lonesome Pine Restaurant is $62.50."
  },
  {
    "question": "What category do the products ordered by Ernst Handel belong to?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) RETURN cat.categoryName AS category_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_name": "Confections"
      }
    ],
    "answer": "Based on the query result, the products ordered by Ernst Handel belong to the Confections category."
  },
  {
    "question": "Who supplies the products ordered by Simons bistro?",
    "cypher": "MATCH (c:Customer {companyName: 'Simons bistro'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier) RETURN s.companyName AS supplier_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_name": "Svensk Sj\u00f6f\u00f6da AB"
      }
    ],
    "answer": "Based on the query result, Svensk Sj\u00f6f\u00f6da AB supplies products ordered by Simons bistro."
  },
  {
    "question": "What's the total freight cost for orders placed by Alfreds Futterkiste?",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o:Order) RETURN SUM(toFloat(o.freight)) AS total_freight",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_freight": 225.58
      }
    ],
    "answer": "The total freight cost for orders placed by Alfreds Futterkiste is $225.58."
  },
  {
    "question": "How many orders contain Sasquatch Ale?",
    "cypher": "MATCH (p:Product {productName: 'Sasquatch Ale'})<-[:ORDERS]-(o:Order) RETURN COUNT(o) AS order_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "order_count": 19
      }
    ],
    "answer": "19 orders contain Sasquatch Ale."
  },
  {
    "question": "What's the ship country for Ernst Handels orders?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order) RETURN o.shipCountry AS ship_country LIMIT 1",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "ship_country": "Austria"
      }
    ],
    "answer": "The ship country for Ernst Handel's order is Austria."
  },
  {
    "question": "How many different customers have ordered Chai?",
    "cypher": "MATCH (p:Product {productName: 'Chai'})<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) RETURN COUNT(DISTINCT c) AS customer_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_count": 31
      }
    ],
    "answer": "31 different customers have ordered Chai."
  },
  {
    "question": "What's the description of the category that Sasquatch Ale belongs to?",
    "cypher": "MATCH (p:Product {productName: 'Sasquatch Ale'})-[:PART_OF]->(c:Category) RETURN c.description AS category_description",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_description": "Soft drinks, coffees, teas, beers, and ales"
      }
    ],
    "answer": "Sasquatch Ale belongs to a category with the description: \"Soft drinks, coffees, teas, beers, and ales\""
  },
  {
    "question": "How many items from Beverages category has White Clover Markets ordered?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Beverages'}) RETURN COUNT(p) AS product_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_count": 7
      }
    ],
    "answer": "White Clover Markets has ordered 7 items from the Beverages category."
  },
  {
    "question": "What's the company name of the supplier who provides Chai?",
    "cypher": "MATCH (p:Product {productName: 'Chai'})<-[:SUPPLIES]-(s:Supplier) RETURN s.companyName AS supplier_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_name": "Exotic Liquids"
      }
    ],
    "answer": "The supplier of Chai is Exotic Liquids."
  },
  {
    "question": "How many products has Lonesome Pine Resturant ordered in total?",
    "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'})-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product) RETURN SUM(r.quantity) AS total_quantity",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_quantity": 134
      }
    ],
    "answer": "Lonesome Pine Restaurant has ordered a total of 134 products."
  },
  {
    "question": "What's the contact name at the firm that supplies Chai?",
    "cypher": "MATCH (p:Product {productName: 'Chai'})<-[:SUPPLIES]-(s:Supplier) RETURN s.contactName AS contact_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "contact_name": "Charlotte Cooper"
      }
    ],
    "answer": "Charlotte Cooper is the contact name at the firm that supplies Chai."
  },
  {
    "question": "How many discontinued products are there?",
    "cypher": "MATCH (p:Product) WHERE p.discontinued = true RETURN COUNT(p) AS discontinued_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "discontinued_count": 8
      }
    ],
    "answer": "There are 8 discontinued products."
  },
  {
    "question": "What's the highest freight cost among Wite Clover Markets' orders?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o:Order) WHERE o.freight IS NOT NULL RETURN MAX(toFloat(o.freight)) AS max_freight",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "max_freight": 606.19
      }
    ],
    "answer": "The highest freight cost for White Clover Markets' orders is $606.19."
  },
  {
    "question": "How many folks have ordered from the Beverages category?",
    "cypher": "MATCH (cat:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) RETURN COUNT(DISTINCT c) AS customer_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_count": 83
      }
    ],
    "answer": "83 customers have ordered from the Beverages category."
  },
  {
    "question": "What's the minimum unit price among products ordered by Simons bistro?",
    "cypher": "MATCH (c:Customer {companyName: 'Simons bistro'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.unitPrice IS NOT NULL RETURN MIN(p.unitPrice) AS min_price",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "min_price": 2.5
      }
    ],
    "answer": "The minimum unit price among products ordered by Simons bistro is $2.50."
  },
  {
    "question": "How many orders were shipped to Germany?",
    "cypher": "MATCH (o:Order) WHERE o.shipCountry = 'Germany' RETURN COUNT(o) AS order_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "order_count": 122
      }
    ],
    "answer": "122 orders were shipped to Germany."
  },
  {
    "question": "What city does the supplier of Mozzarella di Giovanni operate from?",
    "cypher": "MATCH (p:Product {productName: 'Mozzarella di Giovanni'})<-[:SUPPLIES]-(s:Supplier) RETURN s.city AS supplier_city",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_city": " 75"
      }
    ],
    "answer": "UNKNOWN\n\nThe query result (' 75') does not appear to be a valid city name. While the query was structured to find the city of the supplier for Mozzarella di Giovanni, the result is not meaningful or informative."
  },
  {
    "question": "How many products are supplied by companys in the UK?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WHERE s.country = 'UK' RETURN COUNT(p) AS product_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "grammatical",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_count": 3
      }
    ],
    "answer": "3 products are supplied by companies in the UK."
  },
  {
    "question": "What's the average quantity per order for Teatime Chocolate Biscuits?",
    "cypher": "MATCH (p:Product {productName: 'Teatime Chocolate Biscuits'})<-[r:ORDERS]-(o:Order) RETURN AVG(r.quantity) AS avg_quantity",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "avg_quantity": 19.54054054054054
      }
    ],
    "answer": "The average quantity per order for Teatime Chocolate Biscuits is approximately 20 units."
  },
  {
    "question": "How many unique cities have customers who ordered stuff from Exotic Liquids?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) RETURN COUNT(DISTINCT c.city) AS city_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "city_count": 42
      }
    ],
    "answer": "42 unique cities have customers who ordered products from Exotic Liquids."
  },
  {
    "question": "What's the total stock value of products in the Beverages category?",
    "cypher": "MATCH (c:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product) RETURN SUM(p.unitPrice * p.unitsInStock) AS total_value",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_value": 12480.25
      }
    ],
    "answer": "The total stock value of products in the Beverages category is $12,480.25."
  },
  {
    "question": "How many different suppliers provide products ordered by Alfred's Futterkiste?",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier) RETURN COUNT(DISTINCT s) AS supplier_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_count": 10
      }
    ],
    "answer": "10 different suppliers provide products ordered by Alfred's Futterkiste."
  },
  {
    "question": "How many products has White Clover Markets ordered that are supplied by companies from the UK?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier {country: 'UK'}) RETURN COUNT(DISTINCT p) AS total_products",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_products": 1
      }
    ],
    "answer": "White Clover Markets has ordered 1 product that is supplied by companies from the UK."
  },
  {
    "question": "What's the total quantity of Chai ordered by customers from Germany?",
    "cypher": "MATCH (c:Customer {country: 'Germany'})-[:PURCHASED]->(o:Order)-[:ORDERS {productID: '1'}]->(p:Product {productName: 'Chai'}) RETURN SUM(o.quantity) AS total_quantity",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_quantity": 0
      }
    ],
    "answer": "The total quantity of Chai ordered by customers from Germany is 0."
  },
  {
    "question": "What's the company name of the supplier that provides Sasquatch Ale?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {productName: 'Sasquatch Ale'}) RETURN s.companyName AS supplier_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_name": "Bigfoot Breweries"
      }
    ],
    "answer": "Bigfoot Breweries is the supplier of Sasquatch Ale."
  },
  {
    "question": "What's the highest unit price among products ordered by Ernst Handel?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.unitPrice IS NOT NULL RETURN MAX(p.unitPrice) AS highest_price",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "highest_price": 263.5
      }
    ],
    "answer": "The highest unit price among products ordered by Ernst Handel is $263.50."
  },
  {
    "question": "How many different suppliers provide products to customers in Portland?",
    "cypher": "MATCH (c:Customer {city: 'Portland'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier) RETURN COUNT(DISTINCT s) AS supplier_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_count": 16
      }
    ],
    "answer": "16 different suppliers provide products to customers in Portland."
  },
  {
    "question": "What's the category name of products ordered by Alfreds Futterkiste?",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) RETURN cat.categoryName AS category_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_name": "Produce"
      }
    ],
    "answer": "Alfreds Futterkiste ordered a product from the Produce category."
  },
  {
    "question": "How many orders contain products from the Beverages category shipped to France?",
    "cypher": "MATCH (cat:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product)<-[:ORDERS]-(o:Order {shipCountry: 'France'}) RETURN COUNT(DISTINCT o) AS order_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "order_count": 7
      }
    ],
    "answer": "7 orders containing Beverages products were shipped to France."
  },
  {
    "question": "What's the lowest freight cost for orders containing Mozzarella di Giovanni?",
    "cypher": "MATCH (p:Product {productName: 'Mozzarella di Giovanni'})<-[:ORDERS]-(o:Order) WHERE o.freight IS NOT NULL RETURN MIN(TOFLOAT(o.freight)) AS lowest_freight",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "lowest_freight": 2.33
      }
    ],
    "answer": "The lowest freight cost for orders containing Mozzarella di Giovanni is $2.33."
  },
  {
    "question": "How many customers have ordered products supplied by Exotic Liquids?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) RETURN COUNT(DISTINCT c) AS customer_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_count": 49
      }
    ],
    "answer": "49 customers have ordered products supplied by Exotic Liquids."
  },
  {
    "question": "What city does the supplier of Chai operate from?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {productName: 'Chai'}) RETURN s.city AS supplier_city",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_city": "London"
      }
    ],
    "answer": "The supplier of Chai operates from London."
  },
  {
    "question": "How many products does Lonesome Pine Restaurant order that cost more than $20?",
    "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.unitPrice > 20 RETURN COUNT(DISTINCT p) AS expensive_products",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "expensive_products": 8
      }
    ],
    "answer": "Lonesome Pine Restaurant orders 8 products that cost more than $20."
  },
  {
    "question": "What's the average unit price of products in orders shipped to Germany?",
    "cypher": "MATCH (o:Order {shipCountry: 'Germany'})-[:ORDERS]->(p:Product) RETURN AVG(p.unitPrice) AS average_price",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "average_price": 27.45064024390243
      }
    ],
    "answer": "The average unit price of products in orders shipped to Germany is $27.45."
  },
  {
    "question": "What's the contact name for White Clover Markets?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'}) RETURN c.contactName AS contact_name",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "contact_name": "Karl Jablonski"
      }
    ],
    "answer": "The contact name for White Clover Markets is Karl Jablonski."
  },
  {
    "question": "How many different products has Simons bistro ordered from UK suppliers?",
    "cypher": "MATCH (c:Customer {companyName: 'Simons bistro'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier {country: 'UK'}) RETURN COUNT(DISTINCT p) AS uk_products",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "uk_products": 0
      }
    ],
    "answer": "Simons bistro has ordered 0 different products from UK suppliers."
  },
  {
    "question": "What's the highest quantity ordered in a single order for products from the Beverages category?",
    "cypher": "MATCH (cat:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product)<-[ord:ORDERS]-(o:Order) WHERE ord.quantity IS NOT NULL RETURN MAX(ord.quantity) AS max_quantity",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "max_quantity": 130
      }
    ],
    "answer": "The highest quantity ordered in a single order for products from the Beverages category is 130."
  },
  {
    "question": "Tell me the phone number of Exotic Liquids",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'}) RETURN s.phone AS phone_number",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "phone_number": "(171) 555-2222"
      }
    ],
    "answer": "The phone number for Exotic Liquids is (171) 555-2222."
  },
  {
    "question": "How many suppliers from London provide products ordered by USA customers?",
    "cypher": "MATCH (s:Supplier {city: 'London'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer {country: 'USA'}) RETURN COUNT(DISTINCT s) AS london_suppliers",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "london_suppliers": 1
      }
    ],
    "answer": "1 supplier from London provides products ordered by USA customers."
  },
  {
    "question": "What's the cheapest product ordered by customers in Seattle?",
    "cypher": "MATCH (c:Customer {city: 'Seattle'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.unitPrice IS NOT NULL RETURN MIN(p.unitPrice) AS lowest_price",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "lowest_price": 2.5
      }
    ],
    "answer": "The cheapest product ordered by customers in Seattle costs $2.50."
  },
  {
    "question": "How many orders have been shipped to Denmark containing products with more than 20 units in stock?",
    "cypher": "MATCH (o:Order {shipCountry: 'Denmark'})-[:ORDERS]->(p:Product) WHERE p.unitsInStock > 20 RETURN COUNT(DISTINCT o) AS order_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "order_count": 17
      }
    ],
    "answer": "17 orders have been shipped to Denmark containing products with more than 20 units in stock."
  },
  {
    "question": "What's the ship address for order 10248?",
    "cypher": "MATCH (o:Order {orderID: '10248'}) RETURN o.shipAddress AS shipping_address",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "shipping_address": "59 rue de l'Abbaye"
      }
    ],
    "answer": "The shipping address for order 10248 is \"59 rue de l'Abbaye\"."
  },
  {
    "question": "How many folks ordered stuff from suppliers based in the UK?",
    "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier {country: 'UK'}) RETURN COUNT(DISTINCT c) AS customer_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_count": 49
      }
    ],
    "answer": "49 customers ordered products from UK-based suppliers."
  },
  {
    "question": "What's the highest reorder level among products supplied by Exotik Liquids?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product) WHERE p.reorderLevel IS NOT NULL RETURN MAX(p.reorderLevel) AS max_reorder_level",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "max_reorder_level": 25
      }
    ],
    "answer": "The highest reorder level among products supplied by Exotic Liquids is 25."
  },
  {
    "question": "How many products connect Ernst Handel to Exotic Liquids through orders?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier {companyName: 'Exotic Liquids'}) RETURN COUNT(DISTINCT p) AS connecting_products",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "connecting_products": 2
      }
    ],
    "answer": "2 products connect Ernst Handel to Exotic Liquids through orders."
  },
  {
    "question": "What's the contact title of the person at Lonsom Pine Restaurant?",
    "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'}) RETURN c.contactTitle AS contact_title",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "contact_title": "Sales Manager"
      }
    ],
    "answer": "The contact title of the person at Lonesome Pine Restaurant is Sales Manager."
  },
  {
    "question": "How many categories contain products ordered by White Clover Markets?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) RETURN COUNT(DISTINCT cat) AS category_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_count": 8
      }
    ],
    "answer": "White Clover Markets has ordered products from 8 distinct categories."
  },
  {
    "question": "What's the lowest unit price of products in the Beverages category?",
    "cypher": "MATCH (cat:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product) WHERE p.unitPrice IS NOT NULL RETURN MIN(p.unitPrice) AS lowest_price",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "lowest_price": 4.5
      }
    ],
    "answer": "The lowest unit price for products in the Beverages category is $4.50."
  },
  {
    "question": "Find the postal code of Simon's bistro",
    "cypher": "MATCH (c:Customer {companyName: 'Simons bistro'}) RETURN c.postalCode AS postal_code",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "postal_code": "1734"
      }
    ],
    "answer": "The postal code of Simon's bistro is 1734."
  },
  {
    "question": "How many different customers ordered the same products as Alfreds Futterkiste?",
    "cypher": "MATCH (c1:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o1:Order)-[:ORDERS]->(p:Product)<-[:ORDERS]-(o2:Order)<-[:PURCHASED]-(c2:Customer) WHERE c1 <> c2 RETURN COUNT(DISTINCT c2) AS shared_product_customers",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "shared_product_customers": 75
      }
    ],
    "answer": "75 different customers have ordered the same products as Alfreds Futterkiste."
  },
  {
    "question": "What's the maximum freight charge for orders containing Sasquatch Ale?",
    "cypher": "MATCH (p:Product {productName: 'Sasquatch Ale'})<-[:ORDERS]-(o:Order) WHERE o.freight IS NOT NULL RETURN MAX(TOFLOAT(o.freight)) AS highest_freight",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "highest_freight": 299.09
      }
    ],
    "answer": "The maximum freight charge for orders containing Sasquatch Ale is $299.09."
  },
  {
    "question": "I need to know the quantity per unit for Mozzarella di Giovanni",
    "cypher": "MATCH (p:Product {productName: 'Mozzarella di Giovanni'}) RETURN p.quantityPerUnit AS quantity_per_unit",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "quantity_per_unit": "24 - 200 g pkgs."
      }
    ],
    "answer": "The quantity per unit for Mozzarella di Giovanni is 24 - 200 g pkgs."
  },
  {
    "question": "How many suppliers provide products to both German and USA customers?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p1:Product)<-[:ORDERS]-(o1:Order)<-[:PURCHASED]-(c1:Customer {country: 'Germany'}), (s)-[:SUPPLIES]->(p2:Product)<-[:ORDERS]-(o2:Order)<-[:PURCHASED]-(c2:Customer {country: 'USA'}) RETURN COUNT(DISTINCT s) AS international_suppliers",
    "query_type": "Existence Verification",
    "complexity": "6-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "international_suppliers": 25
      }
    ],
    "answer": "25 suppliers provide products to both German and USA customers."
  },
  {
    "question": "What's the total number of products ordered by companys in Portland?",
    "cypher": "MATCH (c:Customer {city: 'Portland'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) RETURN COUNT(DISTINCT p) AS total_products",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammatical",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_products": 19
      }
    ],
    "answer": "19 distinct products have been ordered by customers in Portland."
  },
  {
    "question": "Which category has the most expensive average product price?",
    "cypher": "MATCH (cat:Category)<-[:PART_OF]-(p:Product) WHERE p.unitPrice IS NOT NULL WITH cat, AVG(p.unitPrice) AS avg_price ORDER BY avg_price DESC LIMIT 1 RETURN cat.categoryName AS top_category",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "top_category": "Meat/Poultry"
      }
    ],
    "answer": "Based on the query result, Meat/Poultry is the category with the most expensive average product price."
  },
  {
    "question": "What country is Ernst Handle based in?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'}) RETURN c.country AS customer_country",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_country": "Austria"
      }
    ],
    "answer": "Austria"
  },
  {
    "question": "How many different products connect White Clover Markets to UK-based suppliers?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier {country: 'UK'}) RETURN COUNT(DISTINCT p) AS connecting_products",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "connecting_products": 1
      }
    ],
    "answer": "1 different product connects White Clover Markets to UK-based suppliers."
  },
  {
    "question": "What's the sum of all quantities ordered for Chai across all orders?",
    "cypher": "MATCH (p:Product {productName: 'Chai'})<-[ord:ORDERS]-(o:Order) RETURN SUM(ord.quantity) AS total_chai_quantity",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_chai_quantity": 828
      }
    ],
    "answer": "The total quantity of Chai ordered across all orders is 828."
  },
  {
    "question": "Tell me what biz supplies products to the most customers",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) WITH s, COUNT(DISTINCT c) AS customer_count ORDER BY customer_count DESC LIMIT 1 RETURN s.companyName AS top_supplier",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "top_supplier": "Plutzer Lebensmittelgro\u00dfm\u00e4rkte AG"
      }
    ],
    "answer": "Based on the query result, Plutzer Lebensmittelgro\u00dfm\u00e4rkte AG is the supplier that supplies products to the most customers."
  },
  {
    "question": "How many categories are represented in orders shipped to Denmark?",
    "cypher": "MATCH (o:Order {shipCountry: 'Denmark'})-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) RETURN COUNT(DISTINCT cat) AS category_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_count": 8
      }
    ],
    "answer": "8 categories are represented in orders shipped to Denmark."
  },
  {
    "question": "What's the description of the category containing Teatime Chocolate Biscuits?",
    "cypher": "MATCH (p:Product {productName: 'Teatime Chocolate Biscuits'})-[:PART_OF]->(cat:Category) RETURN cat.description AS category_description",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_description": "Desserts, candies, and sweet breads"
      }
    ],
    "answer": "The category containing Teatime Chocolate Biscuits has the description: \"Desserts, candies, and sweet breads\"."
  },
  {
    "question": "How many orders connect Alfreds Futterkiste to products discontinued?",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {discontinued: true}) RETURN COUNT(DISTINCT o) AS discontinued_orders",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "discontinued_orders": 2
      }
    ],
    "answer": "Based on the query result, Alfreds Futterkiste has 2 orders that connect to discontinued products."
  },
  {
    "question": "What's the minimum units in stock for stuff ordered by Ernst Handel?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.unitsInStock IS NOT NULL RETURN MIN(p.unitsInStock) AS lowest_stock",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "lowest_stock": 0
      }
    ],
    "answer": "The minimum units in stock for products ordered by Ernst Handel is 0."
  },
  {
    "question": "Show me the fax number of Alfrads Futterkiste",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'}) RETURN c.fax AS fax_number",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "fax_number": "030-0076545"
      }
    ],
    "answer": "The fax number for Alfreds Futterkiste is 030-0076545."
  },
  {
    "question": "How many customers share suppliers with White Clover Markets through product orders?",
    "cypher": "MATCH (c1:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o1:Order)-[:ORDERS]->(p1:Product)<-[:SUPPLIES]-(s:Supplier)-[:SUPPLIES]->(p2:Product)<-[:ORDERS]-(o2:Order)<-[:PURCHASED]-(c2:Customer) WHERE c1 <> c2 RETURN COUNT(DISTINCT c2) AS shared_supplier_customers",
    "query_type": "Existence Verification",
    "complexity": "5-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "shared_supplier_customers": 87
      }
    ],
    "answer": "87 customers share suppliers with White Clover Markets through product orders."
  },
  {
    "question": "What's the average discount percentage for orders containing Sasquach Ale?",
    "cypher": "MATCH (p:Product {productName: 'Sasquatch Ale'})<-[ord:ORDERS]-(o:Order) RETURN AVG(TOFLOAT(ord.discount)) AS average_discount",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "average_discount": 0.05
      }
    ],
    "answer": "The average discount percentage for orders containing Sasquatch Ale is 5% (0.05)."
  },
  {
    "question": "Which supplier provides the most products ordered by German customers?",
    "cypher": "MATCH (c:Customer {country: 'Germany'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier) WITH s, COUNT(DISTINCT p) AS product_count ORDER BY product_count DESC LIMIT 1 RETURN s.companyName AS top_supplier",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "top_supplier": "Plutzer Lebensmittelgro\u00dfm\u00e4rkte AG"
      }
    ],
    "answer": "According to the data, Plutzer Lebensmittelgro\u00dfm\u00e4rkte AG is the supplier that provides the most products ordered by German customers."
  },
  {
    "question": "What's the ship via value for order 10556?",
    "cypher": "MATCH (o:Order {orderID: '10556'}) RETURN o.shipVia AS shipping_method",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "shipping_method": "1"
      }
    ],
    "answer": "The ship via value for order 10556 is 1."
  },
  {
    "question": "How many orders link products from London suppliers to USA customers?",
    "cypher": "MATCH (s:Supplier {city: 'London'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer {country: 'USA'}) RETURN COUNT(DISTINCT o) AS linking_orders",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "linking_orders": 16
      }
    ],
    "answer": "There are 16 distinct orders that link products from London suppliers to customers in the USA."
  },
  {
    "question": "What's the total value of products ordered by Lonesome Pine Restarant?",
    "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'})-[:PURCHASED]->(o:Order)-[ord:ORDERS]->(p:Product) RETURN SUM(ord.quantity * TOFLOAT(ord.unitPrice)) AS total_value",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_value": 4258.6
      }
    ],
    "answer": "The total value of products ordered by Lonesome Pine Restaurant is $4,258.60."
  },
  {
    "question": "Find the region where Morgenstern Gesundkost is located",
    "cypher": "MATCH (c:Customer {companyName: 'Morgenstern Gesundkost'}) RETURN c.region AS customer_region",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_region": "NULL"
      }
    ],
    "answer": "UNKNOWN\n\nThe query result shows a NULL value for the customer's region, which means no specific region information was found for Morgenstern Gesundkost in the database."
  },
  {
    "question": "What's the peak units on order among products supplied by folks in the UK?",
    "cypher": "MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product) WHERE p.unitsOnOrder IS NOT NULL RETURN MAX(p.unitsOnOrder) AS max_units_on_order",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "max_units_on_order": 70
      }
    ],
    "answer": "The peak units on order among products supplied by UK suppliers is 70 units."
  },
  {
    "question": "How many products are supplied by companies that also provide items to customers in Germany?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p1:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer {country: 'Germany'}), (s)-[:SUPPLIES]->(p2:Product) RETURN COUNT(DISTINCT p2) AS total_products",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_products": 73
      }
    ],
    "answer": "73 products are supplied by companies that also provide items to customers in Germany."
  },
  {
    "question": "What's the average unit price of products ordered by White Clover Markets that come from UK suppliers?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier {country: 'UK'}) RETURN AVG(p.unitPrice) AS average_price",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "average_price": 19.0
      }
    ],
    "answer": "The average unit price of products ordered by White Clover Markets from UK suppliers is $19.00."
  },
  {
    "question": "Tell me the company name of the supplier providing Chai",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {productName: 'Chai'}) RETURN s.companyName AS supplier_company",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_company": "Exotic Liquids"
      }
    ],
    "answer": "The supplier of Chai is Exotic Liquids."
  },
  {
    "question": "What's the highest freight cost for orders containing products from the Beverages category?",
    "cypher": "MATCH (c:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product)<-[:ORDERS]-(o:Order) WHERE o.freight IS NOT NULL RETURN MAX(toFloat(o.freight)) AS highest_freight",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "highest_freight": 1007.64
      }
    ],
    "answer": "The highest freight cost for orders containing Beverages products is $1,007.64."
  },
  {
    "question": "How many different customers have purchased products supplied by Exotic Liquids?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) RETURN COUNT(DISTINCT c) AS customer_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_count": 49
      }
    ],
    "answer": "49 different customers have purchased products supplied by Exotic Liquids."
  },
  {
    "question": "What city is White Clover Markets located in?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'}) RETURN c.city AS customer_city",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_city": "Seattle"
      }
    ],
    "answer": "White Clover Markets is located in Seattle."
  },
  {
    "question": "Count the number of orders that connect Lonesome Pine Restaurant to suppliers in London",
    "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier {city: 'London'}) RETURN COUNT(DISTINCT o) AS connection_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "connection_count": 1
      }
    ],
    "answer": "Lonesome Pine Restaurant has 1 order that connects to suppliers in London."
  },
  {
    "question": "What's the total quantity of Sasquatch Ale ordered across all purchases?",
    "cypher": "MATCH (p:Product {productName: 'Sasquatch Ale'})<-[r:ORDERS]-(o:Order) RETURN SUM(r.quantity) AS total_quantity",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_quantity": 506
      }
    ],
    "answer": "The total quantity of Sasquatch Ale ordered across all purchases is 506."
  },
  {
    "question": "Find the lowest unit price among products in categories that also contain discontinued items",
    "cypher": "MATCH (c:Category)<-[:PART_OF]-(p1:Product {discontinued: true}), (c)<-[:PART_OF]-(p2:Product) WHERE p2.unitPrice IS NOT NULL RETURN MIN(p2.unitPrice) AS lowest_price",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "lowest_price": 7.0
      }
    ],
    "answer": "The lowest unit price among products in categories containing discontinued items is $7.00."
  },
  {
    "question": "What's the contact name for the vendor that supplies Chai?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {productName: 'Chai'}) RETURN s.contactName AS contact_person",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "contact_person": "Charlotte Cooper"
      }
    ],
    "answer": "Charlotte Cooper is the contact name for the vendor that supplies Chai."
  },
  {
    "question": "How many products connect Ernst Handel to suppliers through their orders?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier) RETURN COUNT(DISTINCT p) AS product_bridges",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_bridges": 56
      }
    ],
    "answer": "56 distinct products connect Ernst Handel to suppliers through their orders."
  },
  {
    "question": "What's the maximum quantity ordered in a single transaction for products from UK suppliers?",
    "cypher": "MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)<-[r:ORDERS]-(o:Order) WHERE r.quantity IS NOT NULL RETURN MAX(r.quantity) AS max_quantity",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "max_quantity": 100
      }
    ],
    "answer": "The maximum quantity ordered in a single transaction for products from UK suppliers is 100."
  },
  {
    "question": "Tell me the category description for products ordered by Alfreds Futterkiste",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) RETURN cat.description AS category_description LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_description": "Dried fruit and bean curd"
      }
    ],
    "answer": "The category description for products ordered by Alfreds Futterkiste is \"Dried fruit and bean curd\"."
  },
  {
    "question": "How many folks from Germany have ordered stuff from the Beverages category?",
    "cypher": "MATCH (c:Customer {country: 'Germany'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Beverages'}) RETURN COUNT(DISTINCT c) AS customer_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_count": 11
      }
    ],
    "answer": "11 customers from Germany have ordered products from the Beverages category."
  },
  {
    "question": "What's the ship country for orders containing Mozzarella di Giovanni?",
    "cypher": "MATCH (p:Product {productName: 'Mozzarella di Giovanni'})<-[:ORDERS]-(o:Order) RETURN o.shipCountry AS shipping_country LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "shipping_country": "Denmark"
      }
    ],
    "answer": "The ship country for an order containing Mozzarella di Giovanni is Denmark."
  },
  {
    "question": "Find the earliest order date for products supplied by companys in the UK",
    "cypher": "MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order) WHERE o.orderDate IS NOT NULL RETURN MIN(o.orderDate) AS earliest_date",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "earliest_date": "1996-07-12 00:00:00.000"
      }
    ],
    "answer": "The earliest order date for products supplied by companies in the UK is July 12, 1996."
  },
  {
    "question": "How many suppliers are connected to Simons bistro through product orders?",
    "cypher": "MATCH (c:Customer {companyName: 'Simons bistro'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier) RETURN COUNT(DISTINCT s) AS supplier_connections",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_connections": 13
      }
    ],
    "answer": "13 suppliers are connected to Simons bistro through product orders."
  },
  {
    "question": "What's the sum of all freight costs for orders shipped to Seattle?",
    "cypher": "MATCH (o:Order {shipCity: 'Seattle'}) RETURN SUM(toFloat(o.freight)) AS total_freight",
    "query_type": "Aggregation",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_freight": 1353.06
      }
    ],
    "answer": "The total freight cost for orders shipped to Seattle is $1,353.06."
  },
  {
    "question": "Which postal code belongs to Exotic Liquds?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'}) RETURN s.postalCode AS supplier_postal_code",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_postal_code": "EC1 4SD"
      }
    ],
    "answer": "The postal code for Exotic Liquids is EC1 4SD."
  },
  {
    "question": "Count how many categories contain products ordered by customers in Portland",
    "cypher": "MATCH (c:Customer {city: 'Portland'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) RETURN COUNT(DISTINCT cat) AS category_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_count": 8
      }
    ],
    "answer": "8 categories contain products that have been ordered by customers in Portland."
  },
  {
    "question": "What's the highest unit price for merch in the same category as Sasquatch Ale?",
    "cypher": "MATCH (p1:Product {productName: 'Sasquatch Ale'})-[:PART_OF]->(c:Category)<-[:PART_OF]-(p2:Product) WHERE p2.unitPrice IS NOT NULL RETURN MAX(p2.unitPrice) AS highest_price",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "highest_price": 263.5
      }
    ],
    "answer": "The highest unit price for merchandise in the same category as Sasquatch Ale is $263.50."
  },
  {
    "question": "How many orders link products from London suppliers to German customers?",
    "cypher": "MATCH (s:Supplier {city: 'London'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer {country: 'Germany'}) RETURN COUNT(DISTINCT o) AS linking_orders",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "linking_orders": 14
      }
    ],
    "answer": "Based on the query result, there are 14 orders that link products from London suppliers to German customers."
  },
  {
    "question": "What's the phone number of the biz that ordered product ID 72?",
    "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:Product {productID: '72'}) RETURN c.phone AS customer_phone LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_phone": "31 12 34 56"
      }
    ],
    "answer": "The phone number of the business that ordered product ID 72 is 31 12 34 56."
  },
  {
    "question": "Find the average discount given on orders containing beverages",
    "cypher": "MATCH (cat:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product)<-[r:ORDERS]-(o:Order) RETURN AVG(toFloat(r.discount)) AS average_discount",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "average_discount": 0.061881188118811895
      }
    ],
    "answer": "The average discount on orders containing beverages is approximately 6.19%."
  },
  {
    "question": "What's the minimum reorder level for products supplied by UK vendors?",
    "cypher": "MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product) WHERE p.reorderLevel IS NOT NULL RETURN MIN(p.reorderLevel) AS min_reorder_level",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "min_reorder_level": 10
      }
    ],
    "answer": "The minimum reorder level for products supplied by UK vendors is 10."
  },
  {
    "question": "Tell me the employee ID who handled the order for R\u00f6ssle Sauerkraut",
    "cypher": "MATCH (p:Product {productName: 'R\u00f6ssle Sauerkraut'})<-[:ORDERS]-(o:Order) RETURN o.employeeID AS employee_id LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "employee_id": "2"
      }
    ],
    "answer": "The employee with ID 2 handled the order for R\u00f6ssle Sauerkraut."
  },
  {
    "question": "How many different products connect Morgenstern Gesundkost to various suppliers?",
    "cypher": "MATCH (c:Customer {companyName: 'Morgenstern Gesundkost'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier) RETURN COUNT(DISTINCT p) AS connecting_products",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "connecting_products": 10
      }
    ],
    "answer": "10 different products connect Morgenstern Gesundkost to various suppliers."
  },
  {
    "question": "What's the total number of products that are both supplied and belong to a category?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)-[:PART_OF]->(c:Category) RETURN COUNT(DISTINCT p) AS total_products",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_products": 77
      }
    ],
    "answer": "There are 77 unique products that are both supplied by a supplier and belong to a category."
  },
  {
    "question": "Find the latest shipped date for orders containing products from Exotic Liquids",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order) WHERE o.shippedDate IS NOT NULL RETURN MAX(o.shippedDate) AS latest_shipment",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "latest_shipment": "NULL"
      }
    ],
    "answer": "UNKNOWN\n\nThe query result shows a NULL value for the latest shipment date, which could mean either no orders were found or the shippedDate field is empty for orders involving products from Exotic Liquids."
  },
  {
    "question": "What's the fax number of the customer who purchased order 10248?",
    "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order {orderID: '10248'}) RETURN c.fax AS customer_fax",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_fax": "26.47.15.11"
      }
    ],
    "answer": "The fax number of the customer who purchased order 10248 is 26.47.15.11."
  },
  {
    "question": "Count the products that have been ordered by both Simons bistro and Ernst Handel",
    "cypher": "MATCH (c1:Customer {companyName: 'Simons bistro'})-[:PURCHASED]->(o1:Order)-[:ORDERS]->(p:Product)<-[:ORDERS]-(o2:Order)<-[:PURCHASED]-(c2:Customer {companyName: 'Ernst Handel'}) RETURN COUNT(DISTINCT p) AS shared_products",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "shared_products": 12
      }
    ],
    "answer": "Simons bistro and Ernst Handel have ordered 12 products in common."
  },
  {
    "question": "What's the average units in stock for items in the Beverages category?",
    "cypher": "MATCH (c:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product) RETURN AVG(p.unitsInStock) AS average_stock",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "average_stock": 46.583333333333336
      }
    ],
    "answer": "The average number of units in stock for items in the Beverages category is approximately 47 units."
  },
  {
    "question": "Which region does the supplier of Teatime Chocolate Biscuits operate from?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {productName: 'Teatime Chocolate Biscuits'}) RETURN s.region AS supplier_region",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_region": "Manchester"
      }
    ],
    "answer": "The supplier of Teatime Chocolate Biscuits operates from Manchester."
  },
  {
    "question": "Find the highest freight charge among orders shipped to France containing UK-supplied products",
    "cypher": "MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order {shipCountry: 'France'}) WHERE o.freight IS NOT NULL RETURN MAX(toFloat(o.freight)) AS max_freight",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "max_freight": 249.93
      }
    ],
    "answer": "The highest freight charge for orders shipped to France containing UK-supplied products is $249.93."
  },
  {
    "question": "How many customers are connected to the Beverages category through their purchases?",
    "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Beverages'}) RETURN COUNT(DISTINCT c) AS customer_connections",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_connections": 83
      }
    ],
    "answer": "83 customers are connected to the Beverages category through their purchases."
  },
  {
    "question": "What's the total value of all Chai orders (quantity \u00d7 unit price)?",
    "cypher": "MATCH (p:Product {productName: 'Chai'})<-[r:ORDERS]-(o:Order) RETURN SUM(r.quantity * toFloat(r.unitPrice)) AS total_value",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_value": 14277.6
      }
    ],
    "answer": "The total value of all Chai orders is $14,277.60."
  },
  {
    "question": "Tell me the contact title of whoever runs White Clovr Markets",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'}) RETURN c.contactTitle AS contact_title",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "contact_title": "Owner"
      }
    ],
    "answer": "The contact title of the person running White Clovr Markets is Owner."
  },
  {
    "question": "What's the smallest order quantity for products from suppliers in Austria?",
    "cypher": "MATCH (s:Supplier {country: 'Austria'})-[:SUPPLIES]->(p:Product)<-[r:ORDERS]-(o:Order) WHERE r.quantity IS NOT NULL RETURN MIN(r.quantity) AS min_quantity",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "min_quantity": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Count how many suppliers provide products that have been shipped to Denmark",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order {shipCountry: 'Denmark'}) RETURN COUNT(DISTINCT s) AS supplier_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_count": 21
      }
    ],
    "answer": "21 suppliers provide products that have been shipped to Denmark."
  },
  {
    "question": "What category does the most expensive product ordered by Alfreds Futterkiste belong to?",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) WHERE p.unitPrice IS NOT NULL RETURN cat.categoryName AS category_name ORDER BY p.unitPrice DESC LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_name": "Dairy Products"
      }
    ],
    "answer": "The most expensive product ordered by Alfreds Futterkiste belongs to the Dairy Products category."
  },
  {
    "question": "How many discontinued products are supplied by folks from London?",
    "cypher": "MATCH (s:Supplier {city: 'London'})-[:SUPPLIES]->(p:Product {discontinued: true}) RETURN COUNT(DISTINCT p) AS discontinued_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "discontinued_count": 0
      }
    ],
    "answer": "0 discontinued products are supplied by suppliers from London."
  },
  {
    "question": "Find the peak units on order among products in categories with more than 10 items",
    "cypher": "MATCH (c:Category)<-[:PART_OF]-(p1:Product) WITH c, COUNT(p1) as productCount WHERE productCount > 10 MATCH (c)<-[:PART_OF]-(p2:Product) WHERE p2.unitsOnOrder IS NOT NULL RETURN MAX(p2.unitsOnOrder) AS max_units_on_order",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "max_units_on_order": 100
      }
    ],
    "answer": "The peak units on order among products in categories with more than 10 items is 100."
  },
  {
    "question": "What's the address of the firm that supplies products ordered by Ernst Handel?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier) RETURN s.address AS supplier_address LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_address": "Marketing Manager"
      }
    ],
    "answer": "UNKNOWN\n\nThe query result only contains \"Marketing Manager\" which does not appear to be a complete address. While the query attempted to find a supplier address for Ernst Handel's products, the result does not provide a specific street address or location details."
  },
  {
    "question": "What's the average freight cost for orders containing products priced above $30?",
    "cypher": "MATCH (p:Product)<-[:ORDERS]-(o:Order) WHERE p.unitPrice > 30 RETURN AVG(toFloat(o.freight)) AS average_freight",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "average_freight": 125.72856940509904
      }
    ],
    "answer": "The average freight cost for orders containing products priced above $30 is $125.73."
  },
  {
    "question": "Tell me the quantity per unit specification for Mozzarela di Giovanni",
    "cypher": "MATCH (p:Product {productName: 'Mozzarella di Giovanni'}) RETURN p.quantityPerUnit AS quantity_specification",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "quantity_specification": "24 - 200 g pkgs."
      }
    ],
    "answer": "The quantity per unit specification for Mozzarella di Giovanni is 24 - 200 g pkgs."
  },
  {
    "question": "What's the earliest required date for orders from customers who've bought beverages?",
    "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o1:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Beverages'}), (c)-[:PURCHASED]->(o2:Order) WHERE o2.requiredDate IS NOT NULL RETURN MIN(o2.requiredDate) AS earliest_required_date",
    "query_type": "Sorting",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "earliest_required_date": "1996-07-24 00:00:00.000"
      }
    ],
    "answer": "The earliest required date for orders from customers who have bought beverages is July 24, 1996."
  },
  {
    "question": "Count how many products supplied by UK companies have been ordered with a discount",
    "cypher": "MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)<-[r:ORDERS]-(o:Order) WHERE toFloat(r.discount) > 0 RETURN COUNT(DISTINCT p) AS discounted_products",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "discounted_products": 3
      }
    ],
    "answer": "3 products supplied by UK companies have been ordered with a discount."
  },
  {
    "question": "What's the home page URL of the supplier providing the most expensive product?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product) WHERE p.unitPrice IS NOT NULL RETURN s.homePage AS supplier_homepage ORDER BY p.unitPrice DESC LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_homepage": "(1) 03.83.00.62"
      }
    ],
    "answer": "The home page URL of the supplier providing the most expensive product appears to be \"(1) 03.83.00.62\". However, this looks more like a phone number than a typical URL, so I cannot confidently confirm it as a true home page address."
  },
  {
    "question": "How many distinct products were ordered by customers who also purchased Chai?",
    "cypher": "MATCH (p:Product {productName: 'Chai'})<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer)-[:PURCHASED]->(o2:Order)-[:ORDERS]->(p2:Product) RETURN COUNT(DISTINCT p2) AS total_products",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_products": 77
      }
    ],
    "answer": "Customers who ordered Chai also purchased 77 distinct products."
  },
  {
    "question": "What's the company name of the supplier that provides Sasquatch Ale?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product {productName: 'Sasquatch Ale'}) RETURN s.companyName AS supplier_company",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_company": "Bigfoot Breweries"
      }
    ],
    "answer": "Bigfoot Breweries provides Sasquatch Ale."
  },
  {
    "question": "What's the highest unit price among products ordered by White Clover Markets?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.unitPrice IS NOT NULL RETURN MAX(p.unitPrice) AS highest_price",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "highest_price": 263.5
      }
    ],
    "answer": "The highest unit price among products ordered by White Clover Markets is $263.50."
  },
  {
    "question": "How many orders connect Alfreds Futterkiste to products in the Beverages category?",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Beverages'}) RETURN COUNT(DISTINCT o) AS connection_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "connection_count": 2
      }
    ],
    "answer": "Alfreds Futterkiste has 2 orders that connect to products in the Beverages category."
  },
  {
    "question": "What's the total quantity of R\u00f6ssle Sauerkraut ordered across all customers?",
    "cypher": "MATCH (p:Product {productName: 'R\u00f6ssle Sauerkraut'})<-[r:ORDERS]-(o:Order) RETURN SUM(r.quantity) AS total_quantity",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_quantity": 640
      }
    ],
    "answer": "The total quantity of R\u00f6ssle Sauerkraut ordered across all customers is 640."
  },
  {
    "question": "Tell me the city where Exotic Liquids is located",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'}) RETURN s.city AS supplier_city",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_city": "London"
      }
    ],
    "answer": "Exotic Liquids is located in London."
  },
  {
    "question": "How many suppliers provide products to orders shipped to Germany?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order {shipCountry: 'Germany'}) RETURN COUNT(DISTINCT s) AS supplier_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_count": 29
      }
    ],
    "answer": "29 suppliers provide products to orders shipped to Germany."
  },
  {
    "question": "What's the average unit price of products in orders placed by Ernst Handel?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) RETURN AVG(p.unitPrice) AS average_price",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "average_price": 28.346568627450985
      }
    ],
    "answer": "The average unit price of products in orders placed by Ernst Handel is $28.35."
  },
  {
    "question": "Which category does Mozzarella di Giovanni belong to?",
    "cypher": "MATCH (p:Product {productName: 'Mozzarella di Giovanni'})-[:PART_OF]->(c:Category) RETURN c.categoryName AS product_category",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_category": "Dairy Products"
      }
    ],
    "answer": "Mozzarella di Giovanni belongs to the Dairy Products category."
  },
  {
    "question": "Find the maximum quantity ordered for any product supplied by Charlotte Cooper's company",
    "cypher": "MATCH (s:Supplier {contactName: 'Charlotte Cooper'})-[:SUPPLIES]->(p:Product)<-[r:ORDERS]-(o:Order) WHERE r.quantity IS NOT NULL RETURN MAX(r.quantity) AS highest_quantity",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "highest_quantity": 100
      }
    ],
    "answer": "The maximum quantity ordered for any product supplied by Charlotte Cooper is 100."
  },
  {
    "question": "How many products connect White Clover Markets to the Beverages category through their orders?",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category {categoryName: 'Beverages'}) RETURN COUNT(DISTINCT p) AS product_bridges",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_bridges": 5
      }
    ],
    "answer": "5 products connect White Clover Markets to the Beverages category through their orders."
  },
  {
    "question": "Count the number of customers who ordered products supplied by Exotic Liquids",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) RETURN COUNT(DISTINCT c) AS customer_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_count": 49
      }
    ],
    "answer": "49 customers have ordered products supplied by Exotic Liquids."
  },
  {
    "question": "What's the contact title of the person at Simons bistro?",
    "cypher": "MATCH (c:Customer {companyName: 'Simons bistro'}) RETURN c.contactTitle AS contact_position",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "contact_position": "Owner"
      }
    ],
    "answer": "The contact title of the person at Simons bistro is Owner."
  },
  {
    "question": "Which product has the peak reorder level among items ordered by customers in Denmark?",
    "cypher": "MATCH (c:Customer {country: 'Denmark'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.reorderLevel IS NOT NULL RETURN MAX(p.reorderLevel) AS highest_reorder_level",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "highest_reorder_level": 30
      }
    ],
    "answer": "The peak reorder level among products ordered by customers in Denmark is 30."
  },
  {
    "question": "How many different categories are represented in orders from Lonesome Pine Restaurant?",
    "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)-[:PART_OF]->(cat:Category) RETURN COUNT(DISTINCT cat) AS category_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_count": 7
      }
    ],
    "answer": "Lonesome Pine Restaurant has orders across 7 different product categories."
  },
  {
    "question": "Tell me the phone number of White Clover Marketts",
    "cypher": "MATCH (c:Customer {companyName: 'White Clover Markets'}) RETURN c.phone AS customer_phone",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_phone": "(206) 555-4112"
      }
    ],
    "answer": "The phone number for White Clover Markets is (206) 555-4112."
  },
  {
    "question": "What's the lowest units in stock for products that have been ordered by customers in France?",
    "cypher": "MATCH (c:Customer {country: 'France'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WHERE p.unitsInStock IS NOT NULL RETURN MIN(p.unitsInStock) AS lowest_stock",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "lowest_stock": 0
      }
    ],
    "answer": "Based on the query result, the lowest number of units in stock for products ordered by customers in France is 0."
  },
  {
    "question": "How many suppliers connect to customers in the USA through their product orders?",
    "cypher": "MATCH (s:Supplier)-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer {country: 'USA'}) RETURN COUNT(DISTINCT s) AS supplier_bridges",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_bridges": 29
      }
    ],
    "answer": "29 suppliers connect to customers in the USA through their product orders."
  },
  {
    "question": "What's the average quantity per unit for stuff ordered by Alfreds Futterkiste?",
    "cypher": "MATCH (c:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) RETURN COUNT(DISTINCT p) AS product_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_count": 11
      }
    ],
    "answer": "UNKNOWN\n\nThe query result only provides the count of distinct products ordered by Alfreds Futterkiste (11 products), but does not include any information about the average quantity per unit. To answer the original question, a different Cypher query would be needed that calculates the average quantity."
  },
  {
    "question": "Which address does Ernst Handel use for their business?",
    "cypher": "MATCH (c:Customer {companyName: 'Ernst Handel'}) RETURN c.address AS business_address",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "business_address": "Kirchgasse 6"
      }
    ],
    "answer": "Ernst Handel's business address is Kirchgasse 6."
  },
  {
    "question": "Find the highest unit price among discontinued products ordered by German companys",
    "cypher": "MATCH (c:Customer {country: 'Germany'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product {discontinued: true}) WHERE p.unitPrice IS NOT NULL RETURN MAX(p.unitPrice) AS top_price",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "top_price": 123.79
      }
    ],
    "answer": "The highest unit price among discontinued products ordered by German companies is $123.79."
  },
  {
    "question": "How many orders shipped to Seattle contain products from multiple categories?",
    "cypher": "MATCH (o:Order {shipCity: 'Seattle'})-[:ORDERS]->(p:Product)-[:PART_OF]->(c:Category) WITH o, COUNT(DISTINCT c) AS cat_count WHERE cat_count > 1 RETURN COUNT(DISTINCT o) AS multi_category_orders",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "multi_category_orders": 11
      }
    ],
    "answer": "11 orders shipped to Seattle contain products from multiple categories."
  },
  {
    "question": "What's the total number of distinct products supplied by companies in the UK?",
    "cypher": "MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product) RETURN COUNT(DISTINCT p) AS uk_product_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "uk_product_count": 3
      }
    ],
    "answer": "Based on the query result, there are 3 distinct products supplied by companies in the UK."
  },
  {
    "question": "Show me the quantity per unit for Sasquatch Ale",
    "cypher": "MATCH (p:Product {productName: 'Sasquatch Ale'}) RETURN p.quantityPerUnit AS product_quantity_unit",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_quantity_unit": "24 - 12 oz bottles"
      }
    ],
    "answer": "The quantity per unit for Sasquatch Ale is 24 - 12 oz bottles."
  },
  {
    "question": "How many different postal codes are used by customers who ordered Chai?",
    "cypher": "MATCH (p:Product {productName: 'Chai'})<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) RETURN COUNT(DISTINCT c.postalCode) AS postal_code_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "postal_code_count": 30
      }
    ],
    "answer": "30 different postal codes are used by customers who ordered Chai."
  },
  {
    "question": "Calculate the sum of all unit prices for products in the Beverages category",
    "cypher": "MATCH (c:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product) RETURN SUM(p.unitPrice) AS total_beverage_price",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "total_beverage_price": 455.75
      }
    ],
    "answer": "The total sum of unit prices for products in the Beverages category is $455.75."
  },
  {
    "question": "What's the ship name used for order 10248?",
    "cypher": "MATCH (o:Order {orderID: '10248'}) RETURN o.shipName AS order_ship_name",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "order_ship_name": "Vins et alcools Chevalier"
      }
    ],
    "answer": "The ship name for order 10248 is Vins et alcools Chevalier."
  },
  {
    "question": "How many products supplied by Exotic Liqiuds have been ordered by customers in the USA?",
    "cypher": "MATCH (s:Supplier {companyName: 'Exotic Liquids'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer {country: 'USA'}) RETURN COUNT(DISTINCT p) AS product_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "product_count": 3
      }
    ],
    "answer": "3 products supplied by Exotic Liquids have been ordered by customers in the USA."
  },
  {
    "question": "What's the mean units on order for products that have been shipped to Portland?",
    "cypher": "MATCH (o:Order {shipCity: 'Portland'})-[:ORDERS]->(p:Product) RETURN AVG(p.unitsOnOrder) AS average_on_order",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "average_on_order": 1.4285714285714286
      }
    ],
    "answer": "The mean units on order for products shipped to Portland is approximately 1.43 units."
  },
  {
    "question": "Find the region of the customer who placed order 10556",
    "cypher": "MATCH (o:Order {orderID: '10556'})<-[:PURCHASED]-(c:Customer) RETURN c.region AS customer_region",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "customer_region": "NULL"
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "What's the top quantity ordered in a single order for products from the Beverages category?",
    "cypher": "MATCH (cat:Category {categoryName: 'Beverages'})<-[:PART_OF]-(p:Product)<-[r:ORDERS]-(o:Order) WHERE r.quantity IS NOT NULL RETURN MAX(r.quantity) AS peak_quantity",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "peak_quantity": 130
      }
    ],
    "answer": "The top quantity ordered in a single order for Beverages products is 130."
  },
  {
    "question": "How many ways can you connect Simon's bistro to suppliers through their product orders?",
    "cypher": "MATCH path = (c:Customer {companyName: 'Simons bistro'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier) RETURN COUNT(path) AS connection_paths",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "connection_paths": 15
      }
    ],
    "answer": "Simon's bistro can connect to suppliers through 15 distinct product order paths."
  },
  {
    "question": "Count how many times products have been reordered by companys who also bought from Charlotte Cooper's supplier",
    "cypher": "MATCH (s:Supplier {contactName: 'Charlotte Cooper'})-[:SUPPLIES]->(p1:Product)<-[:ORDERS]-(o1:Order)<-[:PURCHASED]-(c:Customer)-[:PURCHASED]->(o2:Order)-[:ORDERS]->(p2:Product) WHERE o1.orderID <> o2.orderID RETURN COUNT(DISTINCT p2) AS reorder_count",
    "query_type": "Aggregation",
    "complexity": "5-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "reorder_count": 77
      }
    ],
    "answer": "Based on the query result, products have been reordered 77 times by companies who also bought from Charlotte Cooper's supplier."
  },
  {
    "question": "What description is associated with the category containing Chai?",
    "cypher": "MATCH (p:Product {productName: 'Chai'})-[:PART_OF]->(c:Category) RETURN c.description AS category_description",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "category_description": "Soft drinks, coffees, teas, beers, and ales"
      }
    ],
    "answer": "The category containing Chai is described as \"Soft drinks, coffees, teas, beers, and ales\"."
  },
  {
    "question": "How many different employees processed orders containing products from UK suppliers?",
    "cypher": "MATCH (s:Supplier {country: 'UK'})-[:SUPPLIES]->(p:Product)<-[:ORDERS]-(o:Order) RETURN COUNT(DISTINCT o.employeeID) AS employee_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "employee_count": 9
      }
    ],
    "answer": "9 different employees processed orders containing products from UK suppliers."
  },
  {
    "question": "Which fax number belongs to the supplier of product ID 1?",
    "cypher": "MATCH (p:Product {productID: '1'})<-[:SUPPLIES]-(s:Supplier) RETURN s.fax AS supplier_fax",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "supplier_fax": "NULL"
      }
    ],
    "answer": "The query result shows a NULL value for the fax number, which means no fax number was found for the supplier of product ID 1."
  },
  {
    "question": "Find the greatest units in stock among stuff that's been shipped to Austria",
    "cypher": "MATCH (o:Order {shipCountry: 'Austria'})-[:ORDERS]->(p:Product) WHERE p.unitsInStock IS NOT NULL RETURN MAX(p.unitsInStock) AS maximum_stock",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "maximum_stock": 125
      }
    ],
    "answer": "The greatest number of units in stock for products shipped to Austria is 125."
  },
  {
    "question": "How many categories contain products ordered by both Alfreds Futterkiste and Ernst Handel?",
    "cypher": "MATCH (c1:Customer {companyName: 'Alfreds Futterkiste'})-[:PURCHASED]->(o1:Order)-[:ORDERS]->(p1:Product)-[:PART_OF]->(cat:Category)<-[:PART_OF]-(p2:Product)<-[:ORDERS]-(o2:Order)<-[:PURCHASED]-(c2:Customer {companyName: 'Ernst Handel'}) RETURN COUNT(DISTINCT cat) AS shared_categories",
    "query_type": "Existence Verification",
    "complexity": "6-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "shared_categories": 5
      }
    ],
    "answer": "Based on the query result, there are 5 categories that contain products ordered by both Alfreds Futterkiste and Ernst Handel."
  },
  {
    "question": "What postal code does Lonesome Pine Restaraunt use?",
    "cypher": "MATCH (c:Customer {companyName: 'Lonesome Pine Restaurant'}) RETURN c.postalCode AS restaurant_postal_code",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "restaurant_postal_code": "97219"
      }
    ],
    "answer": "The postal code for Lonesome Pine Restaurant is 97219."
  },
  {
    "question": "Which biz ordered products with the lowest average unit price?",
    "cypher": "MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product) WITH c, AVG(p.unitPrice) AS avg_price WHERE avg_price IS NOT NULL ORDER BY avg_price ASC LIMIT 1 RETURN c.companyName AS cheapest_customer",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "cheapest_customer": "Laughing Bacchus Wine Cellars"
      }
    ],
    "answer": "Laughing Bacchus Wine Cellars ordered products with the lowest average unit price."
  },
  {
    "question": "How many paths exist between Vins et alcools Chevalier and UK-based suppliers through product orders?",
    "cypher": "MATCH path = (c:Customer {companyName: 'Vins et alcools Chevalier'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:Product)<-[:SUPPLIES]-(s:Supplier {country: 'UK'}) RETURN COUNT(path) AS path_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "northwind",
    "validated": true,
    "result": [
      {
        "path_count": 0
      }
    ],
    "answer": "Based on the query result, there are 0 paths between Vins et alcools Chevalier and UK-based suppliers through product orders."
  },
  {
    "question": "What's the name of protein P38117?",
    "cypher": "MATCH (p:Protein {id: 'P38117'}) RETURN p.name AS protein_name",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "protein_name": "ETFB"
      }
    ],
    "answer": "The name of protein P38117 is ETFB."
  },
  {
    "question": "What taxid does gene ETFB belong to?",
    "cypher": "MATCH (g:Gene {id: 'ETFB'}) RETURN g.taxid AS gene_taxid",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "gene_taxid": "9606"
      }
    ],
    "answer": "The taxid for gene ETFB is 9606, which corresponds to the human genome."
  },
  {
    "question": "Tell me the description of angiosarcoma",
    "cypher": "MATCH (d:Disease {name: 'angiosarcoma'}) RETURN d.description AS disease_description",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "disease_description": "A vascular cancer that derives_from the cells that line the walls of blood vessels or lymphatic vessels. [url:http\\://emedicine.medscape.com/article/276512-overview, url:http\\://en.wikipedia.org/wiki/Hemangiosarcoma, url:https\\://en.wikipedia.org/wiki/Angiosarcoma, url:https\\://ncit.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI_Thesaurus&ns=ncit&code=C3088, url:https\\://www.ncbi.nlm.nih.gov/pubmed/23327728]"
      }
    ],
    "answer": "Angiosarcoma is a vascular cancer that originates from the cells lining the walls of blood vessels or lymphatic vessels."
  },
  {
    "question": "What's Alberto Santos' username?",
    "cypher": "MATCH (u:User {name: 'Alberto Santos'}) RETURN u.username AS user_username",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "user_username": "asantos"
      }
    ],
    "answer": "Alberto Santos' username is 'asantos'."
  },
  {
    "question": "What's the journal of publication 21730168?",
    "cypher": "MATCH (p:Publication {id: '21730168'}) RETURN p.journal AS publication_journal",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "publication_journal": "Proc Natl Acad Sci U S A"
      }
    ],
    "answer": "The journal of publication 21730168 is Proc Natl Acad Sci U S A."
  },
  {
    "question": "Find the position of modified protein P38117-2_M172-ox",
    "cypher": "MATCH (m:Modified_protein {id: 'P38117-2_M172-ox'}) RETURN m.position AS modification_position",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "modification_position": "172"
      }
    ],
    "answer": "The position of the modified protein P38117-2_M172-ox is 172."
  },
  {
    "question": "What's the effect of variant chr19:g.51354221C>A?",
    "cypher": "MATCH (v:Known_variant {id: 'chr19:g.51354221C>A'}) RETURN v.effect AS variant_effect",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "variant_effect": "missense variant"
      }
    ],
    "answer": "The variant chr19:g.51354221C>A is a missense variant, which means it results in a change in the amino acid sequence of the protein."
  },
  {
    "question": "What type is tissue BTO:0002256?",
    "cypher": "MATCH (t:Tissue {id: 'BTO:0002256'}) RETURN t.type AS tissue_type",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "tissue_type": "-25"
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Tell me the chemical formula of metabolite HMDB0094081",
    "cypher": "MATCH (m:Metabolite {id: 'HMDB0094081'}) RETURN m.chemical_formula AS metabolite_formula",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "metabolite_formula": "C42H82O5"
      }
    ],
    "answer": "The chemical formula of metabolite HMDB0094081 is C42H82O5."
  },
  {
    "question": "What's the acronym of project P0000006?",
    "cypher": "MATCH (p:Project {id: 'P0000006'}) RETURN p.acronym AS project_acronym",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "project_acronym": "P-CT45"
      }
    ],
    "answer": "P-CT45"
  },
  {
    "question": "How many transcripts does gene EFTB have?",
    "cypher": "MATCH (g:Gene {id: 'ETFB'})-[:TRANSCRIBED_INTO]->(t:Transcript) RETURN COUNT(t) AS transcript_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "transcript_count": 6
      }
    ],
    "answer": "The gene ETFB has 6 transcripts."
  },
  {
    "question": "What proteins are translated from gene ETFB?",
    "cypher": "MATCH (g:Gene {id: 'ETFB'})-[:TRANSLATED_INTO]->(p:Protein) RETURN COUNT(p) AS protein_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "protein_count": 4
      }
    ],
    "answer": "The query result indicates that 4 proteins are translated from the gene ETFB, but it does not provide the specific protein names. To get the actual protein identifiers, a modified Cypher query retrieving the protein details would be needed."
  },
  {
    "question": "How many projects is Alberto Santoss responsible for?",
    "cypher": "MATCH (u:User {name: 'Alberto Santos'})-[:IS_RESPONSIBLE]->(p:Project) RETURN COUNT(p) AS project_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "project_count": 4
      }
    ],
    "answer": "Alberto Santos is responsible for 4 projects."
  },
  {
    "question": "Count the peptides that belong to protein P38117",
    "cypher": "MATCH (pep:Peptide)-[:BELONGS_TO_PROTEIN]->(p:Protein {id: 'P38117'}) RETURN COUNT(pep) AS peptide_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "peptide_count": 93
      }
    ],
    "answer": "There are 93 peptides that belong to protein P38117."
  },
  {
    "question": "What's the name of the tissue that project P0000006 studies?",
    "cypher": "MATCH (p:Project {id: 'P0000006'})-[:STUDIES_TISSUE]->(t:Tissue) RETURN t.name AS tissue_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "tissue_name": "OVCA-5 cell"
      }
    ],
    "answer": "The tissue that project P0000006 studies is the OVCA-5 cell."
  },
  {
    "question": "Tell me which disease project P-CT45 is investigating",
    "cypher": "MATCH (p:Project {acronym: 'P-CT45'})-[:STUDIES_DISEASE]->(d:Disease) RETURN d.name AS disease_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "disease_name": "ovarian serous carcinoma"
      }
    ],
    "answer": "Project P-CT45 is investigating ovarian serous carcinoma."
  },
  {
    "question": "What's the parent of disease angiosarcoma?",
    "cypher": "MATCH (d:Disease {name: 'angiosarcoma'})-[:HAS_PARENT]->(parent:Disease) RETURN parent.name AS parent_disease",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "parent_disease": "vascular cancer"
      }
    ],
    "answer": "The parent of angiosarcoma is vascular cancer."
  },
  {
    "question": "How many folks participate in project P0000005?",
    "cypher": "MATCH (u:User)-[:PARTICIPATES_IN]->(p:Project {id: 'P0000005'}) RETURN COUNT(u) AS participant_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "participant_count": 1
      }
    ],
    "answer": "1 person participates in project P0000005."
  },
  {
    "question": "What modification does modified protein P38117-2_M172-ox have?",
    "cypher": "MATCH (mp:Modified_protein {id: 'P38117-2_M172-ox'})-[:HAS_MODIFICATION]->(m:Modification) RETURN m.name AS modification_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "modification_name": "L-methionine sulfone"
      }
    ],
    "answer": "The modified protein P38117-2_M172-ox has the modification L-methionine sulfone."
  },
  {
    "question": "Count proteins associated with ovarian angiosaarcoma",
    "cypher": "MATCH (p:Protein)-[:ASSOCIATED_WITH]->(d:Disease {name: 'ovarian angiosarcoma'}) RETURN COUNT(p) AS protein_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "protein_count": 1
      }
    ],
    "answer": "1 protein is associated with ovarian angiosarcoma."
  },
  {
    "question": "What's the source of functional region PF16474?",
    "cypher": "MATCH (f:Functional_region {id: 'PF16474'}) RETURN f.source AS region_source",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "region_source": "PFam"
      }
    ],
    "answer": "The source of functional region PF16474 is PFam."
  },
  {
    "question": "Tell me the trait that GWAS study GCST005799 examines",
    "cypher": "MATCH (g:GWAS_study {id: 'GCST005799'}) RETURN g.trait AS study_trait",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "study_trait": "gout"
      }
    ],
    "answer": "The GWAS study GCST005799 examines the trait of gout."
  },
  {
    "question": "What's the year of publication with DOI 10.1073/pnas.1105703108?",
    "cypher": "MATCH (p:Publication {DOI: '10.1073/pnas.1105703108'}) RETURN p.year AS publication_year",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "publication_year": 2011
      }
    ],
    "answer": "The publication with DOI 10.1073/pnas.1105703108 was published in 2011."
  },
  {
    "question": "Find the sequence size of amino acid sequence A0A024R1R8",
    "cypher": "MATCH (a:Amino_acid_sequence {id: 'A0A024R1R8'}) RETURN a.size AS sequence_size",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "sequence_size": "64"
      }
    ],
    "answer": "The sequence size of amino acid sequence A0A024R1R8 is 64 amino acids long."
  },
  {
    "question": "What's the clinical relevance of genetic change chr19:g.51354221C>A?",
    "cypher": "MATCH (v:Known_variant {id: 'chr19:g.51354221C>A'}) RETURN v.clinical_relevance AS clinical_relevance",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "clinical_relevance": "-"
      }
    ],
    "answer": "UNKNOWN\n\nThe query result only returns a '-' for clinical relevance, which does not provide meaningful information about the genetic change's clinical significance."
  },
  {
    "question": "How many publications mention protein CD34?",
    "cypher": "MATCH (p:Protein {name: 'CD34'})-[:MENTIONED_IN_PUBLICATION]->(pub:Publication) RETURN COUNT(pub) AS publication_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "publication_count": 6538
      }
    ],
    "answer": "There are 6,538 publications that mention the protein CD34."
  },
  {
    "question": "What experimental factors does GWAS study GCST003926 investigate?",
    "cypher": "MATCH (g:GWAS_study {id: 'GCST003926'})-[:STUDIES_TRAIT]->(e:Experimental_factor) RETURN e.name AS factor_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "factor_name": "gout"
      }
    ],
    "answer": "The GWAS study GCST003926 investigates the trait/experimental factor of gout."
  },
  {
    "question": "Count the structures of protein P49914",
    "cypher": "MATCH (p:Protein {id: 'P49914'})-[:HAS_STRUCTURE]->(s:Protein_structure) RETURN COUNT(s) AS structure_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "structure_count": 4
      }
    ],
    "answer": "The protein P49914 has 4 known protein structures."
  },
  {
    "question": "How many pathways is protein MTHFS annotated in?",
    "cypher": "MATCH (p:Protein {name: 'MTHFS'})-[:ANNOTATED_IN_PATHWAY]->(path:Pathway) RETURN COUNT(path) AS pathway_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "pathway_count": 5
      }
    ],
    "answer": "Protein MTHFS is annotated in 5 pathways."
  },
  {
    "question": "What chromosome is transcript NM_001371091.1 located on?",
    "cypher": "MATCH (t:Transcript {id: 'NM_001371091.1'})-[:LOCATED_IN]->(c:Chromosome) RETURN c.name AS chromosome_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "chromosome_name": "4"
      }
    ],
    "answer": "Transcript NM_001371091.1 is located on chromosome 4."
  },
  {
    "question": "What's the affiliation of user asantos?",
    "cypher": "MATCH (u:User {username: 'asantos'}) RETURN u.affiliation AS user_affiliation",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "user_affiliation": "CPR"
      }
    ],
    "answer": "The affiliation of user asantos is CPR."
  },
  {
    "question": "Count proteins that interact with ETFB_HUMAN through curation",
    "cypher": "MATCH (p:Protein {accession: 'ETFB_HUMAN'})-[:CURATED_INTERACTS_WITH]->(p2:Protein) RETURN COUNT(p2) AS interaction_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "interaction_count": 8
      }
    ],
    "answer": "The protein ETFB_HUMAN has 8 curated protein interactions."
  },
  {
    "question": "What gene produces transcript variant X6 of MVB12B?",
    "cypher": "MATCH (g:Gene)-[:TRANSCRIBED_INTO]->(t:Transcript {name: 'multivesicular body subunit 12B, transcript variant X6'}) RETURN g.name AS gene_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "gene_name": "multivesicular body subunit 12B"
      }
    ],
    "answer": "The gene that produces transcript variant X6 of MVB12B is multivesicular body subunit 12B."
  },
  {
    "question": "How many biological processes is protein A0A024R1R8 linked to?",
    "cypher": "MATCH (p:Protein {id: 'A0A024R1R8'})-[:ASSOCIATED_WITH]->(b:Biological_process) RETURN COUNT(b) AS process_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "process_count": 1
      }
    ],
    "answer": "The protein A0A024R1R8 is linked to 1 biological process."
  },
  {
    "question": "What's the responsible person for project COV318-INT-CT45?",
    "cypher": "MATCH (p:Project {acronym: 'COV318-INT-CT45'}) RETURN p.responsible AS project_responsible",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "project_responsible": "Alberto Santos"
      }
    ],
    "answer": "Alberto Santos is the responsible person for project COV318-INT-CT45."
  },
  {
    "question": "Which gene contains variant chr16:g.28487714T>A?",
    "cypher": "MATCH (v:Known_variant {id: 'chr16:g.28487714T>A'})-[:VARIANT_FOUND_IN_GENE]->(g:Gene) RETURN g.name AS gene_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "gene_name": "CLN3 lysosomal/endosomal transmembrane protein, battenin"
      }
    ],
    "answer": "The variant chr16:g.28487714T>A is found in the CLN3 gene, which encodes the lysosomal/endosomal transmembrane protein known as battenin."
  },
  {
    "question": "Count proteins belonging to peptides that are part of CD34",
    "cypher": "MATCH (p1:Protein {name: 'CD34'})<-[:BELONGS_TO_PROTEIN]-(pep:Peptide)-[:BELONGS_TO_PROTEIN]->(p2:Protein) WHERE p1.id <> p2.id RETURN COUNT(DISTINCT p2) AS protein_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "protein_count": 3
      }
    ],
    "answer": "Based on the query result, there are 3 distinct proteins that belong to peptides associated with CD34."
  },
  {
    "question": "Find diseases that share publications with angiosarcoma",
    "cypher": "MATCH (d1:Disease {name: 'angiosarcoma'})-[:MENTIONED_IN_PUBLICATION]->(pub:Publication)<-[:MENTIONED_IN_PUBLICATION]-(d2:Disease) WHERE d1.id <> d2.id RETURN COUNT(DISTINCT d2) AS disease_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "disease_count": 2691
      }
    ],
    "answer": "Based on the query result, 2,691 diseases share publications with angiosarcoma."
  },
  {
    "question": "What projects does Ana Rita Colaco participate in that Alberto Santos manages?",
    "cypher": "MATCH (u1:User {name: 'Alberto Santos'})-[:IS_RESPONSIBLE]->(p:Project)<-[:PARTICIPATES_IN]-(u2:User {name: 'Ana Rita Cola\u00e7o'}) RETURN COUNT(p) AS project_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "project_count": 4
      }
    ],
    "answer": "Ana Rita Colaco participates in 4 projects that are managed by Alberto Santos."
  },
  {
    "question": "How many tissues have the same parent as heterotroph?",
    "cypher": "MATCH (t1:Tissue {name: 'heterotroph'})-[:HAS_PARENT]->(parent:Tissue)<-[:HAS_PARENT]-(t2:Tissue) WHERE t1.id <> t2.id RETURN COUNT(DISTINCT t2) AS tissue_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "tissue_count": 42
      }
    ],
    "answer": "42 tissues have the same parent as the heterotroph tissue."
  },
  {
    "question": "Count molecular functions that have zinc transporter activity as parent",
    "cypher": "MATCH (m1:Molecular_function)-[:HAS_PARENT]->(m2:Molecular_function {name: 'zinc ion transmembrane transporter activity'})<-[:HAS_PARENT]-(m3:Molecular_function) WHERE m1.id <> m3.id RETURN COUNT(DISTINCT m3) AS function_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "function_count": 3
      }
    ],
    "answer": "There are 3 molecular functions that have zinc transporter activity as a parent."
  },
  {
    "question": "Find proteins translated from transcripts of gene MVB12B",
    "cypher": "MATCH (g:Gene {id: 'MVB12B'})-[:TRANSCRIBED_INTO]->(t:Transcript)-[:TRANSLATED_INTO]->(p:Protein) RETURN COUNT(DISTINCT p) AS protein_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "protein_count": 4
      }
    ],
    "answer": "The gene MVB12B has 4 distinct proteins translated from its transcripts."
  },
  {
    "question": "What publications study experimental factors related to cleft lip?",
    "cypher": "MATCH (e:Experimental_factor {name: 'cleft lip'})<-[:STUDIES_TRAIT]-(g:GWAS_study)-[:PUBLISHED_IN]->(p:Publication) RETURN COUNT(DISTINCT p) AS publication_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "publication_count": 8
      }
    ],
    "answer": "8 publications study experimental factors related to cleft lip."
  },
  {
    "question": "How many proteins are associated with diseases that are also linked to proteins translated from the CRLS1 gene?",
    "cypher": "MATCH (g:Gene {name: 'CRLS1'})-[:TRANSLATED_INTO]->(p1:Protein)-[:ASSOCIATED_WITH]->(d:Disease)<-[:ASSOCIATED_WITH]-(p2:Protein) RETURN COUNT(DISTINCT p2) AS total_proteins",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "total_proteins": 0
      }
    ],
    "answer": "Based on the query result, there are 0 proteins associated with diseases that are also linked to proteins translated from the CRLS1 gene."
  },
  {
    "question": "What's the name of the tissue studied in projects that Alberto Santos is responsible for?",
    "cypher": "MATCH (u:User {name: 'Alberto Santos'})-[:IS_RESPONSIBLE]->(proj:Project)-[:STUDIES_TISSUE]->(t:Tissue) RETURN t.name AS tissue_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "tissue_name": "OVCA-5 cell"
      }
    ],
    "answer": "OVCA-5 cell is the tissue studied in the project that Alberto Santos is responsible for."
  },
  {
    "question": "Count the number of modificatons that are parents of modifications with monoisotopic mass differences nominally equal at 0.1 Da resolution?",
    "cypher": "MATCH (m1:Modification {name: 'modifications with monoisotopic mass differences that are nominally equal at a resolution below 0.1 Da'})-[:HAS_PARENT]->(m2:Modification)-[:HAS_PARENT]->(m3:Modification) RETURN COUNT(DISTINCT m3) AS parent_modifications",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "parent_modifications": 1
      }
    ],
    "answer": "Based on the query result, there is 1 parent modification that has modifications with monoisotopic mass differences nominally equal at 0.1 Da resolution."
  },
  {
    "question": "What's the highest average molecular weight among metabolites annotated in pathways that also contain Hydrogen Ion?",
    "cypher": "MATCH (m1:Metabolite {name: 'Hydrogen Ion'})-[:ANNOTATED_IN_PATHWAY]->(path:Pathway)<-[:ANNOTATED_IN_PATHWAY]-(m2:Metabolite) WHERE m2.average_molecular_weight IS NOT NULL RETURN MAX(toFloat(m2.average_molecular_weight)) AS highest_molecular_weight",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "highest_molecular_weight": 1690.518
      }
    ],
    "answer": "The highest average molecular weight among metabolites in pathways containing Hydrogen Ion is 1690.518."
  },
  {
    "question": "How many distinct peptides belong to proteins that have variants found in chromosome 20?",
    "cypher": "MATCH (chr:Chromosome {name: '20'})<-[:VARIANT_FOUND_IN_CHROMOSOME]-(v:Known_variant)-[:VARIANT_FOUND_IN_PROTEIN]->(prot:Protein)<-[:BELONGS_TO_PROTEIN]-(pep:Peptide) RETURN COUNT(DISTINCT pep) AS total_peptides",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "total_peptides": 20587
      }
    ],
    "answer": "There are 20,587 distinct peptides that belong to proteins with variants found in chromosome 20."
  },
  {
    "question": "How many publications mention proteins that interact with proteins associated with mitochondrion distribution?",
    "cypher": "MATCH (bp:Biological_process {name: 'mitochondrion distribution'})<-[:ASSOCIATED_WITH]-(p1:Protein)-[:CURATED_INTERACTS_WITH]->(p2:Protein)-[:MENTIONED_IN_PUBLICATION]->(pub:Publication) RETURN COUNT(DISTINCT pub) AS publication_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "publication_count": 17631
      }
    ],
    "answer": "There are 17,631 publications that mention proteins that interact with proteins associated with mitochondrion distribution."
  },
  {
    "question": "What's the chemical formula of the metabolite with the lowest molecular weight in pathway SMP0033411?",
    "cypher": "MATCH (path:Pathway {id: 'SMP0033411'})<-[:ANNOTATED_IN_PATHWAY]-(m:Metabolite) WHERE m.average_molecular_weight IS NOT NULL AND m.chemical_formula IS NOT NULL ORDER BY toFloat(m.average_molecular_weight) ASC LIMIT 1 RETURN m.chemical_formula AS chemical_formula",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "chemical_formula": "H"
      }
    ],
    "answer": "The chemical formula of the metabolite with the lowest molecular weight in pathway SMP0033411 is H."
  },
  {
    "question": "What's the description of the disease studied in project CT45?",
    "cypher": "MATCH (proj:Project {acronym: 'CT45'})-[:STUDIES_DISEASE]->(d:Disease) RETURN d.description AS disease_description",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "disease_description": "An ovarian carcinoma that has_material_basis_in the lining of the ovary and produces a serum-like fluid. [url:http\\://en.wikipedia.org/wiki/Serous_carcinoma]"
      }
    ],
    "answer": "The disease studied in project CT45 is a serous carcinoma, which is an ovarian carcinoma that originates in the lining of the ovary and produces a serum-like fluid."
  },
  {
    "question": "Count how many pathways contain both metabolites and proteins associated with tissue BTO:0001494?",
    "cypher": "MATCH (t:Tissue {id: 'BTO:0001494'})<-[:ASSOCIATED_WITH]-(p:Protein)-[:ANNOTATED_IN_PATHWAY]->(path:Pathway)<-[:ANNOTATED_IN_PATHWAY]-(m:Metabolite) RETURN COUNT(DISTINCT path) AS pathway_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "pathway_count": 0
      }
    ],
    "answer": "Based on the query result, there are 0 pathways that contain both metabolites and proteins associated with tissue BTO:0001494."
  },
  {
    "question": "What's the maximum imdbRating among proteins detected in ovarian serous carcinoma pathology samples?",
    "cypher": "MATCH (d:Disease {name: 'ovarian serous carcinoma'})<-[:DETECTED_IN_PATHOLOGY_SAMPLE]-(p:Protein) WHERE p.imdbRating IS NOT NULL RETURN MAX(p.imdbRating) AS highest_rating",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "highest_rating": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Tell me the linkout URL for the pathway that glycerol 3-phosphate is annotated in?",
    "cypher": "MATCH (m:Metabolite {name: 'Glycerol 3-phosphate'})-[:ANNOTATED_IN_PATHWAY]->(p:Pathway) RETURN p.linkout AS pathway_url LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "pathway_url": "http://smpdb.ca/view/SMP0027534"
      }
    ],
    "answer": "The linkout URL for the pathway that glycerol 3-phosphate is annotated in is http://smpdb.ca/view/SMP0027534."
  },
  {
    "question": "How many folks are responsible for projects studying ovrian serous carcinoma?",
    "cypher": "MATCH (d:Disease {name: 'ovarian serous carcinoma'})<-[:STUDIES_DISEASE]-(proj:Project)<-[:IS_RESPONSIBLE]-(u:User) RETURN COUNT(DISTINCT u) AS user_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism_typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "user_count": 1
      }
    ],
    "answer": "1 person is responsible for projects studying ovarian serous carcinoma."
  },
  {
    "question": "Which gene has the highest number of transcripts that are located on chromosome 1?",
    "cypher": "MATCH (chr:Chromosome {name: '1'})<-[:LOCATED_IN]-(t:Transcript)<-[:TRANSCRIBED_INTO]-(g:Gene) WITH g, COUNT(DISTINCT t) AS transcript_count ORDER BY transcript_count DESC LIMIT 1 RETURN g.name AS gene_name",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "gene_name": "SH3GL interacting endocytic adaptor 1"
      }
    ],
    "answer": "The gene with the highest number of transcripts on chromosome 1 is \"SH3GL interacting endocytic adaptor 1\"."
  },
  {
    "question": "Count the number of GWAS studies that investigated gout and were published after 2017?",
    "cypher": "MATCH (ef:Experimental_factor {name: 'gout'})<-[:STUDIES_TRAIT]-(gs:GWAS_study) WHERE toInteger(substring(gs.date, 0, 4)) > 2017 RETURN COUNT(DISTINCT gs) AS study_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "study_count": 3
      }
    ],
    "answer": "Based on the query result, there are 3 GWAS studies that investigated gout and were published after 2017."
  },
  {
    "question": "How many proteins in complex organisms are associated with cellular components that have parent terms?",
    "cypher": "MATCH (c:Complex)-[:IS_SUBUNIT_OF]-(p:Protein)-[:ASSOCIATED_WITH]->(cc1:Cellular_component)-[:HAS_PARENT]->(cc2:Cellular_component) RETURN COUNT(DISTINCT p) AS protein_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "protein_count": 3625
      }
    ],
    "answer": "Based on the query result, 3,625 distinct proteins in complex organisms are associated with cellular components that have parent terms."
  },
  {
    "question": "What's the lowest molecular weight metabolite that has content in any food item?",
    "cypher": "MATCH (f:Food)-[:HAS_CONTENT]->(m:Metabolite) WHERE m.average_molecular_weight IS NOT NULL ORDER BY toFloat(m.average_molecular_weight) ASC LIMIT 1 RETURN m.name AS metabolite_name",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "metabolite_name": "Carbon dioxide"
      }
    ],
    "answer": "Carbon dioxide is the lowest molecular weight metabolite that has content in any food item."
  },
  {
    "question": "How many connecting pathways exist between MTHFS protein and hydrogen ion metabolite?",
    "cypher": "MATCH (p:Protein {name: 'MTHFS'})-[:ANNOTATED_IN_PATHWAY]->(path:Pathway)<-[:ANNOTATED_IN_PATHWAY]-(m:Metabolite {name: 'Hydrogen Ion'}) RETURN COUNT(DISTINCT path) AS pathway_connections",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "pathway_connections": 5
      }
    ],
    "answer": "There are 5 connecting pathways between the MTHFS protein and the hydrogen ion metabolite."
  },
  {
    "question": "What's the super class of metabolites found in SMPDB pathways associated with GPD2 protien?",
    "cypher": "MATCH (p:Protein {name: 'GPD2'})<-[:ASSOCIATED_WITH]-(m:Metabolite)-[:ANNOTATED_IN_PATHWAY]->(path:Pathway {source: 'SMPDB'}) RETURN m.super_class AS metabolite_superclass LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "metabolite_superclass": "Nucleosides, nucleotides, and analogues"
      }
    ],
    "answer": "The super class of metabolites found in SMPDB pathways associated with the GPD2 protein is \"Nucleosides, nucleotides, and analogues\"."
  },
  {
    "question": "Count distinct biological processes associated with proteins that have peptide SEEKPEVAPVENR?",
    "cypher": "MATCH (pep:Peptide {id: 'SEEKPEVAPVENR'})-[:BELONGS_TO_PROTEIN]->(prot:Protein)-[:ASSOCIATED_WITH]->(bp:Biological_process) RETURN COUNT(DISTINCT bp) AS process_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "process_count": 6
      }
    ],
    "answer": "6 distinct biological processes are associated with proteins containing the peptide SEEKPEVAPVENR."
  },
  {
    "question": "What's the highest score for protein-protein interactions where both proteins are associated with zinc ion transmembrane transporter activity?",
    "cypher": "MATCH (mf:Molecular_function {name: 'zinc ion transmembrane transporter activity'})<-[:ASSOCIATED_WITH]-(p1:Protein)-[r:CURATED_INTERACTS_WITH|COMPILED_INTERACTS_WITH]-(p2:Protein)-[:ASSOCIATED_WITH]->(mf) WHERE r.score IS NOT NULL RETURN MAX(r.score) AS highest_interaction_score",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "highest_interaction_score": 0.938
      }
    ],
    "answer": "The highest score for protein-protein interactions where both proteins are associated with zinc ion transmembrane transporter activity is 0.938."
  },
  {
    "question": "How many proteins translated from genes are quality control markers in tissues with heterotroph parents?",
    "cypher": "MATCH (t1:Tissue {name: 'heterotroph'})<-[:HAS_PARENT]-(t2:Tissue)<-[:IS_QCMARKER_IN_TISSUE]-(p:Protein)<-[:TRANSLATED_INTO]-(g:Gene) RETURN COUNT(DISTINCT p) AS qc_protein_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "qc_protein_count": 0
      }
    ],
    "answer": "Based on the query result, there are 0 proteins translated from genes that are quality control markers in tissues with heterotroph parents."
  },
  {
    "question": "Tell me the intervention used in phosphoproteomics project P-CT45?",
    "cypher": "MATCH (proj:Project {acronym: 'P-CT45'}) RETURN proj.intervention AS project_intervention",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "project_intervention": "Carboplatin (108759002)"
      }
    ],
    "answer": "The intervention used in phosphoproteomics project P-CT45 is Carboplatin."
  },
  {
    "question": "How many pathways connect metabolites with kingdom 'Organic compounds' to metabolites with kingdom 'Inorganic compounds'?",
    "cypher": "MATCH (m1:Metabolite {kingdom: 'Organic compounds'})-[:ANNOTATED_IN_PATHWAY]->(path:Pathway)<-[:ANNOTATED_IN_PATHWAY]-(m2:Metabolite {kingdom: 'Inorganic compounds'}) RETURN COUNT(DISTINCT path) AS connecting_pathways",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "connecting_pathways": 49234
      }
    ],
    "answer": "49,234 pathways connect metabolites from the 'Organic compounds' kingdom to metabolites from the 'Inorganic compounds' kingdom."
  },
  {
    "question": "What's the affiliation of users who participate in clinical projects studying COV318 cell tissue?",
    "cypher": "MATCH (t:Tissue {name: 'COV318 cell'})<-[:STUDIES_TISSUE]-(proj:Project)<-[:PARTICIPATES_IN]-(u:User) WHERE proj.type CONTAINS 'clinical' RETURN u.affiliation AS user_affiliation LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "user_affiliation": "CPR"
      }
    ],
    "answer": "Based on the query result, users participating in clinical projects studying COV318 cell tissue have an affiliation with CPR."
  },
  {
    "question": "Count the number of somatic mutations in chromosome 1 that are known variants affecting genes transcribing multiple transcripts?",
    "cypher": "MATCH (chr:Chromosome {name: '1'})<-[:VARIANT_FOUND_IN_CHROMOSOME]-(sm:Somatic_mutation)-[:IS_A_KNOWN_VARIANT]->(kv:Known_variant)-[:VARIANT_FOUND_IN_GENE]->(g:Gene)-[:TRANSCRIBED_INTO]->(t:Transcript) WITH sm, COUNT(DISTINCT t) AS transcript_count WHERE transcript_count > 1 RETURN COUNT(DISTINCT sm) AS mutation_count",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "mutation_count": 3
      }
    ],
    "answer": "Based on the query result, there are 3 somatic mutations in chromosome 1 that are known variants affecting genes transcribing multiple transcripts."
  },
  {
    "question": "What's the peak replication size among GWAS studies published in 2016 journals?",
    "cypher": "MATCH (gs:GWAS_study)-[:PUBLISHED_IN]->(pub:Publication {year: 2016}) WHERE gs.replication_size IS NOT NULL AND gs.replication_size <> 'NA' RETURN gs.replication_size AS highest_replication_size ORDER BY toInteger(split(gs.replication_size, ' ')[0]) DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "highest_replication_size": "45,773 European ancestry cases, 106,354 European ancestry controls"
      }
    ],
    "answer": "The peak replication size among GWAS studies published in 2016 journals is 45,773 European ancestry cases and 106,354 European ancestry controls."
  },
  {
    "question": "How many unique proteins have sequences stored in the database?",
    "cypher": "MATCH (p:Protein)-[:HAS_SEQUENCE]->(aas:Amino_acid_sequence) RETURN COUNT(DISTINCT p) AS proteins_with_sequences",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "proteins_with_sequences": 20605
      }
    ],
    "answer": "There are 20,605 unique proteins with sequences stored in the database."
  },
  {
    "question": "What's the name of the gene with the smallest ID number that's translated into CLN3 protein?",
    "cypher": "MATCH (g:Gene)-[:TRANSLATED_INTO]->(p:Protein {name: 'CLN3'}) WHERE g.id IS NOT NULL ORDER BY toInteger(g.id) ASC LIMIT 1 RETURN g.name AS gene_name",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "gene_name": "CLN3 lysosomal/endosomal transmembrane protein, battenin"
      }
    ],
    "answer": "The name of the gene with the smallest ID number that's translated into CLN3 protein is \"CLN3 lysosomal/endosomal transmembrane protein, battenin\"."
  },
  {
    "question": "How many intermediate tissues connect fungus to the root tissue type through HAS_PARENT relationships?",
    "cypher": "MATCH path = (t1:Tissue {name: 'fungus'})-[:HAS_PARENT*]->(t2:Tissue {name: 'tissues, cell types and enzyme sources'}) RETURN LENGTH(path) - 1 AS intermediate_tissues",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "intermediate_tissues": 0
      }
    ],
    "answer": "0 intermediate tissues connect fungus to the root tissue type through HAS_PARENT relationships."
  },
  {
    "question": "Tell me what stuff is the direct parent of DG(19:0/20:0/0:0) metabolite?",
    "cypher": "MATCH (m:Metabolite {name: 'DG(19:0/20:0/0:0)'}) RETURN m.direct_parent AS parent_class",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "parent_class": "1,2-diacylglycerols"
      }
    ],
    "answer": "The direct parent of DG(19:0/20:0/0:0) metabolite is 1,2-diacylglycerols."
  },
  {
    "question": "What's the highest position value among modified protein sites that are substrates of PPPP4C?",
    "cypher": "MATCH (mp:Modified_protein)-[:IS_SUBSTRATE_OF]->(p:Protein {name: 'PP4C'}) WHERE mp.position IS NOT NULL RETURN MAX(toInteger(mp.position)) AS highest_position",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "highest_position": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query returned None for the highest position, which could mean either there are no modified protein sites with a valid position for PP4C substrates, or the position data is missing or invalid."
  },
  {
    "question": "How many publications have DOIs and mention proteins in pathways with organism 9606?",
    "cypher": "MATCH (path:Pathway {organism: '9606'})<-[:ANNOTATED_IN_PATHWAY]-(p:Protein)-[:MENTIONED_IN_PUBLICATION]->(pub:Publication) WHERE pub.DOI IS NOT NULL RETURN COUNT(DISTINCT pub) AS publication_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "publication_count": 440948
      }
    ],
    "answer": "There are 440,948 publications with DOIs that mention proteins in pathways for organism 9606 (human)."
  },
  {
    "question": "Count how many complexes have subunits that are also found as QC markers in any tissue?",
    "cypher": "MATCH (c:Complex)<-[:IS_SUBUNIT_OF]-(p:Protein)-[:IS_QCMARKER_IN_TISSUE]->(t:Tissue) RETURN COUNT(DISTINCT c) AS complex_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "complex_count": 105
      }
    ],
    "answer": "There are 105 distinct complexes that have subunits which are also found as quality control (QC) markers in some tissue."
  },
  {
    "question": "What's the longest amino acid sequence size for proteins translated from transcripts on chromosome 16?",
    "cypher": "MATCH (chr:Chromosome {name: '16'})<-[:LOCATED_IN]-(t:Transcript)-[:TRANSLATED_INTO]->(p:Protein)-[:HAS_SEQUENCE]->(seq:Amino_acid_sequence) WHERE seq.size IS NOT NULL ORDER BY toInteger(seq.size) DESC LIMIT 1 RETURN seq.size AS longest_sequence",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "longest_sequence": "5121"
      }
    ],
    "answer": "The longest amino acid sequence size for proteins translated from transcripts on chromosome 16 is 5,121 amino acids."
  },
  {
    "question": "How many clinical relevant variants are associated with diseases mentioned in publications from journal 'Ann Rheum Dis'?",
    "cypher": "MATCH (crv:Clinically_relevant_variant)-[:ASSOCIATED_WITH]->(d:Disease)-[:MENTIONED_IN_PUBLICATION]->(pub:Publication {journal: 'Ann Rheum Dis'}) RETURN COUNT(DISTINCT crv) AS variant_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "variant_count": 2132
      }
    ],
    "answer": "According to the query result, there are 2,132 clinically relevant variants associated with diseases mentioned in publications from the journal 'Ann Rheum Dis'."
  },
  {
    "question": "Tell me the organism property of pathways containing both MTHFS and hydrogen stuff?",
    "cypher": "MATCH (p:Protein {name: 'MTHFS'})-[:ANNOTATED_IN_PATHWAY]->(path:Pathway)<-[:ANNOTATED_IN_PATHWAY]-(m:Metabolite {name: 'Hydrogen Ion'}) RETURN path.organism AS pathway_organism LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "pathway_organism": "9606"
      }
    ],
    "answer": "The organism property of the pathway containing both MTHFS and Hydrogen Ion is 9606, which represents the human organism (Homo sapiens)."
  },
  {
    "question": "What's the minimum number of subjects in projects that study both tissue and disease simultaneously?",
    "cypher": "MATCH (proj:Project)-[:STUDIES_TISSUE]->(t:Tissue), (proj)-[:STUDIES_DISEASE]->(d:Disease) WHERE proj.subjects IS NOT NULL ORDER BY toInteger(proj.subjects) ASC LIMIT 1 RETURN proj.subjects AS minimum_subjects",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "minimum_subjects": "9"
      }
    ],
    "answer": "The minimum number of subjects in projects that study both tissue and disease simultaneously is 9."
  },
  {
    "question": "How many peptides are shared between isoforms of GMIP protein?",
    "cypher": "MATCH (p1:Protein {name: 'GMIP'})<-[:BELONGS_TO_PROTEIN]-(pep:Peptide)-[:BELONGS_TO_PROTEIN]->(p2:Protein {name: 'GMIP'}) WHERE p1.id <> p2.id RETURN COUNT(DISTINCT pep) AS shared_peptides",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "shared_peptides": 83
      }
    ],
    "answer": "83 peptides are shared between different isoforms of the GMIP protein."
  },
  {
    "question": "How many proteins are associated with angiosarcoma through shared peptides?",
    "cypher": "MATCH (p:Peptide)-[:BELONGS_TO_PROTEIN]->(prot:Protein)-[:ASSOCIATED_WITH]->(d:Disease {name: 'angiosarcoma'}) RETURN COUNT(DISTINCT prot) AS total_proteins",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "total_proteins": 202
      }
    ],
    "answer": "202 proteins are associated with angiosarcoma through shared peptides."
  },
  {
    "question": "What's the highest association score between proteins and the phosphopyruvate hydratase complex?",
    "cypher": "MATCH (p:Protein)-[r:ASSOCIATED_WITH]->(c:Cellular_component {name: 'phosphopyruvate hydratase complex'}) WHERE r.score IS NOT NULL RETURN MAX(r.score) AS highest_score",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "highest_score": 5.0
      }
    ],
    "answer": "The highest association score between proteins and the phosphopyruvate hydratase complex is 5.0."
  },
  {
    "question": "What's the average molecular weight of metabolites associated with proteins?",
    "cypher": "MATCH (m:Metabolite)-[:ASSOCIATED_WITH]->(p:Protein) WHERE m.average_molecular_weight IS NOT NULL RETURN AVG(toFloat(m.average_molecular_weight)) AS avg_molecular_weight",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "avg_molecular_weight": 850.8441363255454
      }
    ],
    "answer": "Based on the query result, the average molecular weight of metabolites associated with proteins is approximately 850.84 g/mol."
  },
  {
    "question": "Find the tissue studied by projects that Ana Rita Colaco participates in",
    "cypher": "MATCH (u:User {name: 'Ana Rita Cola\u00e7o'})-[:PARTICIPATES_IN]->(p:Project)-[:STUDIES_TISSUE]->(t:Tissue) RETURN t.name AS tissue_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "tissue_name": "OVCA-5 cell"
      }
    ],
    "answer": "According to the query result, Ana Rita Colaco participates in a project that studies the OVCA-5 cell tissue."
  },
  {
    "question": "What's the minimum year of publications mentioning ovarian angiosarcoma?",
    "cypher": "MATCH (d:Disease {name: 'ovarian angiosarcoma'})-[:MENTIONED_IN_PUBLICATION]->(pub:Publication) WHERE pub.year IS NOT NULL RETURN MIN(pub.year) AS earliest_year",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "earliest_year": 2010
      }
    ],
    "answer": "The minimum year of publications mentioning ovarian angiosarcoma is 2010."
  },
  {
    "question": "Count the number of variants found in the CRLS1 gene",
    "cypher": "MATCH (v:Known_variant)-[:VARIANT_FOUND_IN_GENE]->(g:Gene {name: 'CRLS1'}) RETURN COUNT(DISTINCT v) AS variant_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "variant_count": 0
      }
    ],
    "answer": "There are 0 variants found in the CRLS1 gene based on the database query."
  },
  {
    "question": "What biological process is associated with complexes that include NTF3 protein?",
    "cypher": "MATCH (p:Protein {name: 'NTF3'})-[:IS_SUBUNIT_OF]->(c:Complex)-[:ASSOCIATED_WITH]->(bp:Biological_process) RETURN bp.name AS process_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "process_name": "generation of neurons"
      }
    ],
    "answer": "Based on the query result, the biological process associated with complexes that include NTF3 protein is the generation of neurons."
  },
  {
    "question": "How many proteins connect mitochondrion inheritance to its parent biological processes?",
    "cypher": "MATCH (bp1:Biological_process {name: 'mitochondrion inheritance'})-[:HAS_PARENT]->(bp2:Biological_process)<-[:ASSOCIATED_WITH]-(p:Protein) RETURN COUNT(DISTINCT p) AS connecting_proteins",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "connecting_proteins": 8
      }
    ],
    "answer": "8 proteins connect mitochondrion inheritance to its parent biological processes."
  },
  {
    "question": "What's the total number of subjects across all projects studying ovarian serous carcinoma?",
    "cypher": "MATCH (p:Project)-[:STUDIES_DISEASE]->(d:Disease {name: 'ovarian serous carcinoma'}) WHERE p.subjects IS NOT NULL RETURN SUM(toInteger(p.subjects)) AS total_subjects",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "total_subjects": 62
      }
    ],
    "answer": "The total number of subjects across all projects studying ovarian serous carcinoma is 62."
  },
  {
    "question": "Find the highest imdb rating... wait, wrong database. What's the max sample size in GWAS studies on gout?",
    "cypher": "MATCH (g:GWAS_study)-[:STUDIES_TRAIT]->(e:Experimental_factor {name: 'gout'}) WITH g, split(g.sample_size, ' ')[0] AS sample_num WHERE sample_num IS NOT NULL RETURN MAX(toInteger(replace(sample_num, ',', ''))) AS largest_sample_size",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "largest_sample_size": 13179
      }
    ],
    "answer": "The largest sample size in GWAS studies on gout is 13,179 individuals."
  },
  {
    "question": "How many transcripts does the MVB12B gene produce?",
    "cypher": "MATCH (g:Gene {name: 'MVB12B'})-[:TRANSCRIBED_INTO]->(t:Transcript) RETURN COUNT(DISTINCT t) AS transcript_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "transcript_count": 0
      }
    ],
    "answer": "Based on the query result, the MVB12B gene produces 0 transcripts."
  },
  {
    "question": "What's the shortest path length between projects CT45 and COV318-INT-CT45?",
    "cypher": "MATCH path = shortestPath((p1:Project {acronym: 'CT45'})-[*]-(p2:Project {acronym: 'COV318-INT-CT45'})) RETURN LENGTH(path) AS path_length",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "path_length": 1
      }
    ],
    "answer": "The shortest path length between projects CT45 and COV318-INT-CT45 is 1."
  },
  {
    "question": "Find the organism associated with the Neurotrophin-3-p75 complex",
    "cypher": "MATCH (c:Complex {name: 'Neurotrophin-3-p75 complex'}) RETURN c.organism AS organism_id",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "organism_id": "9606"
      }
    ],
    "answer": "The organism associated with the Neurotrophin-3-p75 complex is Homo sapiens (human), with the taxonomy ID 9606."
  },
  {
    "question": "What's the lowest association score for proteins linked to zinc ion transmembrane transporter activity?",
    "cypher": "MATCH (p:Protein)-[r:ASSOCIATED_WITH]->(mf:Molecular_function {name: 'zinc ion transmembrane transporter activity'}) WHERE r.score IS NOT NULL RETURN MIN(r.score) AS lowest_score",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "lowest_score": 5.0
      }
    ],
    "answer": "The lowest association score for proteins linked to zinc ion transmembrane transporter activity is 5.0."
  },
  {
    "question": "How many folks have proteins with variants affecting interaction with other proteins?",
    "cypher": "MATCH (v:Known_variant)-[:CURATED_AFFECTS_INTERACTION_WITH]->(p:Protein) RETURN COUNT(DISTINCT p) AS affected_proteins",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "affected_proteins": 3677
      }
    ],
    "answer": "Based on the query result, 3,677 proteins have variants that affect their interaction with other proteins."
  },
  {
    "question": "What chromosome contains the variant chr14:g.92932742G>A?",
    "cypher": "MATCH (v:Known_variant {id: 'chr14:g.92932742G>A'})-[:VARIANT_FOUND_IN_CHROMOSOME]->(c:Chromosome) RETURN c.name AS chromosome_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "chromosome_name": "14"
      }
    ],
    "answer": "Chromosome 14 contains the variant chr14:g.92932742G>A."
  },
  {
    "question": "Count distinct publications that mention both functional regions and their associated proteins",
    "cypher": "MATCH (fr:Functional_region)-[:MENTIONED_IN_PUBLICATION]->(pub:Publication)<-[:MENTIONED_IN_PUBLICATION]-(p:Protein), (fr)-[:FOUND_IN_PROTEIN]->(p) RETURN COUNT(DISTINCT pub) AS shared_publications",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "shared_publications": 498
      }
    ],
    "answer": "There are 498 distinct publications that mention both functional regions and their associated proteins."
  },
  {
    "question": "What's the sum of all years for publications linked to gout GWAS studies?",
    "cypher": "MATCH (g:GWAS_study)-[:STUDIES_TRAIT]->(e:Experimental_factor {name: 'gout'}), (g)-[:PUBLISHED_IN]->(p:Publication) WHERE p.year IS NOT NULL RETURN SUM(p.year) AS total_years",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "total_years": 14108
      }
    ],
    "answer": "The sum of all years for publications linked to gout GWAS studies is 14,108."
  },
  {
    "question": "Find the description of the tissue mentioned in ovarian angiosarcoma publications",
    "cypher": "MATCH (d:Disease {name: 'ovarian angiosarcoma'})-[:MENTIONED_IN_PUBLICATION]->(pub:Publication)<-[:MENTIONED_IN_PUBLICATION]-(t:Tissue) RETURN t.description AS tissue_description LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "tissue_description": "cell property"
      }
    ],
    "answer": "Based on the query result, the tissue description for ovarian angiosarcoma is \"cell property\". However, this description seems quite generic and may not provide a detailed understanding of the specific tissue involved in ovarian angiosarcoma."
  },
  {
    "question": "What's the highest position value for modified protein sites in CHGA?",
    "cypher": "MATCH (p:Protein {name: 'CHGA'})-[:HAS_MODIFIED_SITE]->(mp:Modified_protein) WHERE mp.position IS NOT NULL RETURN MAX(toInteger(mp.position)) AS highest_position",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "highest_position": 372
      }
    ],
    "answer": "The highest position value for modified protein sites in CHGA is 372."
  },
  {
    "question": "How many peptides belong to proteins associated with ovarian angiosarcoma?",
    "cypher": "MATCH (pep:Peptide)-[:BELONGS_TO_PROTEIN]->(prot:Protein)-[:ASSOCIATED_WITH]->(d:Disease {name: 'ovarian angiosarcoma'}) RETURN COUNT(DISTINCT pep) AS peptide_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "peptide_count": 29
      }
    ],
    "answer": "29 peptides belong to proteins associated with ovarian angiosarcoma."
  },
  {
    "question": "What disease is studied by the project with internal ID CP1585140316?",
    "cypher": "MATCH (p:Project {internal_id: 'CP1585140316'})-[:STUDIES_DISEASE]->(d:Disease) RETURN d.name AS disease_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "disease_name": "ovarian serous carcinoma"
      }
    ],
    "answer": "The project with internal ID CP1585140316 studies ovarian serous carcinoma."
  },
  {
    "question": "What's the average length of peptide sequences belonging to CD34 protein?",
    "cypher": "MATCH (pep:Peptide)-[:BELONGS_TO_PROTEIN]->(p:Protein {name: 'CD34'}) RETURN AVG(size(pep.id)) AS avg_peptide_length",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "avg_peptide_length": 17.60810810810811
      }
    ],
    "answer": "The average length of peptide sequences belonging to the CD34 protein is approximately 18 amino acids (17.61 to be precise)."
  },
  {
    "question": "Find the molecular weight of glycerol 3-phosphate metabolite",
    "cypher": "MATCH (m:Metabolite {name: 'Glycerol 3-phosphate'}) RETURN m.average_molecular_weight AS molecular_weight",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "molecular_weight": "172.0737"
      }
    ],
    "answer": "The molecular weight of glycerol 3-phosphate is 172.0737 g/mol."
  },
  {
    "question": "What's the minimum publication year for papers studying zinc-related molecular functions?",
    "cypher": "MATCH (mf:Molecular_function)-[:HAS_PARENT*]->(parent:Molecular_function) WHERE mf.name CONTAINS 'zinc' WITH mf MATCH (p:Protein)-[:ASSOCIATED_WITH]->(mf) WITH p MATCH (p)-[:MENTIONED_IN_PUBLICATION]->(pub:Publication) WHERE pub.year IS NOT NULL RETURN MIN(pub.year) AS earliest_year",
    "query_type": "Sorting",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "earliest_year": 1872
      }
    ],
    "answer": "The minimum publication year for papers studying zinc-related molecular functions is 1872."
  },
  {
    "question": "How many unique proteins are substrates of modified protein sites?",
    "cypher": "MATCH (mp:Modified_protein)-[:IS_SUBSTRATE_OF]->(p:Protein) RETURN COUNT(DISTINCT p) AS substrate_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "substrate_count": 174
      }
    ],
    "answer": "There are 174 unique proteins that are substrates of modified protein sites."
  },
  {
    "question": "What's the source database for complex ID 5408?",
    "cypher": "MATCH (c:Complex {id: '5408'}) RETURN c.source AS complex_source",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "complex_source": "CORUM"
      }
    ],
    "answer": "The source database for complex ID 5408 is CORUM."
  },
  {
    "question": "How many users participate in projects studying ovarrian serous carcinoma?",
    "cypher": "MATCH (u:User)-[:PARTICIPATES_IN]->(p:Project)-[:STUDIES_DISEASE]->(d:Disease {name: 'ovarian serous carcinoma'}) RETURN COUNT(DISTINCT u) AS user_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "user_count": 1
      }
    ],
    "answer": "1 user participates in projects studying ovarian serous carcinoma."
  },
  {
    "question": "What's the highest score for curated protein interactions in the database?",
    "cypher": "MATCH (p1:Protein)-[r:CURATED_INTERACTS_WITH]->(p2:Protein) WHERE r.score IS NOT NULL RETURN MAX(r.score) AS max_interaction_score",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "max_interaction_score": 0.99
      }
    ],
    "answer": "The highest score for curated protein interactions is 0.99."
  },
  {
    "question": "Tell me how many diseases have parent relationships",
    "cypher": "MATCH (d1:Disease)-[:HAS_PARENT]->(d2:Disease) RETURN COUNT(DISTINCT d1) AS diseases_with_parents",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "diseases_with_parents": 10063
      }
    ],
    "answer": "10,063 diseases have parent relationships in the database."
  },
  {
    "question": "What clinical relevance is noted for variant chr20:g.6034501C>T?",
    "cypher": "MATCH (v:Known_variant {id: 'chr20:g.6034501C>T'}) RETURN v.clinical_relevance AS clinical_significance",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "clinical_significance": "-"
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Count the proteins connected to catalytic complex through parent-child relationships",
    "cypher": "MATCH (cc1:Cellular_component)-[:HAS_PARENT]->(cc2:Cellular_component {name: 'catalytic complex'})<-[:HAS_PARENT]-(cc3:Cellular_component)<-[:ASSOCIATED_WITH]-(p:Protein) RETURN COUNT(DISTINCT p) AS connected_proteins",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "connected_proteins": 7233
      }
    ],
    "answer": "There are 7,233 proteins connected to the catalytic complex through parent-child relationships."
  },
  {
    "question": "What's the sum of all subject counts in phosphoproteomics projects?",
    "cypher": "MATCH (p:Project) WHERE p.type CONTAINS 'phosphoproteomics' AND p.subjects IS NOT NULL RETURN SUM(toInteger(p.subjects)) AS total_phospho_subjects",
    "query_type": "Aggregation",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "total_phospho_subjects": 16
      }
    ],
    "answer": "The sum of all subject counts in phosphoproteomics projects is 16."
  },
  {
    "question": "Find the effect type of variant affecting PLPP3 gene at position chr1:g.56512122C>T",
    "cypher": "MATCH (v:Known_variant {id: 'chr1:g.56512122C>T'}) RETURN v.effect AS variant_effect",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "variant_effect": "missense variant"
      }
    ],
    "answer": "The variant chr1:g.56512122C>T is a missense variant affecting the PLPP3 gene."
  },
  {
    "question": "What's the lowest association score between tissues and metabolites?",
    "cypher": "MATCH (m:Metabolite)-[r:ASSOCIATED_WITH]->(t:Tissue) WHERE r.score IS NOT NULL RETURN MIN(r.score) AS min_association_score",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "min_association_score": null
      }
    ],
    "answer": "UNKNOWN\n\n(The query result returns None, which indicates that no valid association score was found, possibly due to missing or null values in the score attribute)"
  },
  {
    "question": "How many proteins are mentioned in publications from year 2016?",
    "cypher": "MATCH (p:Protein)-[:MENTIONED_IN_PUBLICATION]->(pub:Publication {year: 2016}) RETURN COUNT(DISTINCT p) AS proteins_in_2016",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "proteins_in_2016": 10392
      }
    ],
    "answer": "10,392 proteins were mentioned in publications from the year 2016."
  },
  {
    "question": "What journal published the study with ID 21730168?",
    "cypher": "MATCH (pub:Publication {id: '21730168'}) RETURN pub.journal AS journal_name",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "journal_name": "Proc Natl Acad Sci U S A"
      }
    ],
    "answer": "The study with ID 21730168 was published in the journal Proc Natl Acad Sci U S A."
  },
  {
    "question": "How many distinct cellular components serve as intermediates between phosphopyruvate hydratase complex and dimethyl sulfoxide reductase complex?",
    "cypher": "MATCH (cc1:Cellular_component {name: 'phosphopyruvate hydratase complex'})-[:HAS_PARENT]->(parent:Cellular_component)<-[:HAS_PARENT]-(cc2:Cellular_component {name: 'dimethyl sulfoxide reductase complex'}) RETURN COUNT(DISTINCT parent) AS intermediate_components",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "intermediate_components": 1
      }
    ],
    "answer": "Based on the query result, there is 1 distinct cellular component serving as an intermediate between the phosphopyruvate hydratase complex and the dimethyl sulfoxide reductase complex."
  },
  {
    "question": "What's the average number of synonyms for stuff in the Molecular_function category?",
    "cypher": "MATCH (mf:Molecular_function) WHERE mf.synonyms IS NOT NULL RETURN AVG(size(mf.synonyms)) AS avg_synonym_count",
    "query_type": "Aggregation",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "avg_synonym_count": 5.972516615771488
      }
    ],
    "answer": "The average number of synonyms for items in the Molecular_function category is approximately 6 synonyms."
  },
  {
    "question": "Find the chemical formula of metabolites in the Glycerophosphates subclass",
    "cypher": "MATCH (m:Metabolite {sub_class: 'Glycerophosphates'}) RETURN m.chemical_formula AS chemical_formula LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "chemical_formula": "C47H79O8P"
      }
    ],
    "answer": "The chemical formula for a metabolite in the Glycerophosphates subclass is C47H79O8P."
  },
  {
    "question": "What's the highest pubmed ID among publications mentioning SPIR1 protein?",
    "cypher": "MATCH (p:Protein {accession: 'SPIR1_HUMAN'})-[:MENTIONED_IN_PUBLICATION]->(pub:Publication) WHERE pub.id IS NOT NULL RETURN MAX(toInteger(pub.id)) AS highest_pubmed_id",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "highest_pubmed_id": 29453575
      }
    ],
    "answer": "The highest PubMed ID among publications mentioning the SPIR1 protein is 29453575."
  },
  {
    "question": "Count how many genes are transcribed into proteins that form complexes",
    "cypher": "MATCH (g:Gene)-[:TRANSCRIBED_INTO]->(t:Transcript)-[:TRANSLATED_INTO]->(p:Protein)-[:IS_SUBUNIT_OF]->(c:Complex) RETURN COUNT(DISTINCT g) AS gene_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "gene_count": 3615
      }
    ],
    "answer": "3,615 genes are transcribed into proteins that form complexes."
  },
  {
    "question": "What type of project is COV318-INT-CT45?",
    "cypher": "MATCH (p:Project {acronym: 'COV318-INT-CT45'}) RETURN p.type AS project_type",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "project_type": "clinical|interactomics"
      }
    ],
    "answer": "The project COV318-INT-CT45 is a clinical and interactomics type of project."
  },
  {
    "question": "How many pathways connect proteins that interact with SLC39A8?",
    "cypher": "MATCH (p1:Protein {name: 'SLC39A8'})-[:CURATED_INTERACTS_WITH|COMPILED_INTERACTS_WITH]-(p2:Protein)-[:ANNOTATED_IN_PATHWAY]->(path:Pathway) RETURN COUNT(DISTINCT path) AS pathway_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "pathway_count": 247
      }
    ],
    "answer": "Based on the query result, there are 247 distinct pathways connecting proteins that interact with SLC39A8."
  },
  {
    "question": "What's the sum of scores for all associations between GPD2 protein and cellular components?",
    "cypher": "MATCH (p:Protein {name: 'GPD2'})-[r:ASSOCIATED_WITH]->(cc:Cellular_component) WHERE r.score IS NOT NULL RETURN SUM(r.score) AS total_association_score",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "total_association_score": 162.15500000000003
      }
    ],
    "answer": "The sum of scores for all associations between GPD2 protein and cellular components is 162.155."
  },
  {
    "question": "Find the position of the modified site with ID chr16:g.28487714T>A",
    "cypher": "MATCH (v:Known_variant {id: 'chr16:g.28487714T>A'}) WITH v, split(v.alternative_names, ',')[3] AS position_info RETURN split(position_info, '.')[1] AS chromosome_position",
    "query_type": "Property Retrieval",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "chromosome_position": "1"
      }
    ],
    "answer": "UNKOWN\n\nThe query result does not provide a clear or meaningful position for the modified site. While the query was executed, the returned chromosome_position value of '1' does not appear to be a valid or precise location for the variant chr16:g.28487714T>A."
  },
  {
    "question": "What's the name of the gene that's translated into the ETFB protein which has a modified site at position 172?",
    "cypher": "MATCH (g:Gene)-[:TRANSLATED_INTO]->(p:Protein {name: 'ETFB'})-[:HAS_MODIFIED_SITE]->(mp:Modified_protein {position: '172'}) RETURN g.name AS gene_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "gene_name": "electron transfer flavoprotein subunit beta"
      }
    ],
    "answer": "The gene that's translated into the ETFB protein with a modified site at position 172 is \"electron transfer flavoprotein subunit beta\"."
  },
  {
    "question": "Tell me the highest imdbRating score among all proteins associated with cellular components through COMPARTMENTS?",
    "cypher": "MATCH (p:Protein)-[:ASSOCIATED_WITH {source: 'COMPARTMENTS'}]->(cc:Cellular_component) WHERE p.imdbRating IS NOT NULL RETURN MAX(p.imdbRating) AS highest_rating",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "highest_rating": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "How many distinct pathways connect metabolites that are associated with the GPD2 protein?",
    "cypher": "MATCH (m:Metabolite)-[:ANNOTATED_IN_PATHWAY]->(pw:Pathway)<-[:ANNOTATED_IN_PATHWAY]-(m2:Metabolite)-[:ASSOCIATED_WITH]->(p:Protein {name: 'GPD2'}) RETURN COUNT(DISTINCT pw) AS pathway_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "pathway_count": 46722
      }
    ],
    "answer": "There are 46,722 distinct pathways that connect metabolites associated with the GPD2 protein."
  },
  {
    "question": "What's the total number of known variants found in genes that are transcribed into transcripts translated into proteins with HPA017369 synonym?",
    "cypher": "MATCH (kv:Known_variant)-[:VARIANT_FOUND_IN_GENE]->(g:Gene)-[:TRANSCRIBED_INTO]->(t:Transcript)-[:TRANSLATED_INTO]->(p:Protein) WHERE 'HPA017369' IN p.synonyms RETURN COUNT(DISTINCT kv) AS variant_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "variant_count": 411
      }
    ],
    "answer": "Based on the query result, there are 411 known variants found in genes that are transcribed into transcripts translated into proteins with the HPA017369 synonym."
  },
  {
    "question": "What's the lowest position value among modified proteins that are substrates of proteins involved in pathways?",
    "cypher": "MATCH (mp:Modified_protein)-[:IS_SUBSTRATE_OF]->(p:Protein)-[:ANNOTATED_IN_PATHWAY]->(pw:Pathway) WHERE mp.position IS NOT NULL RETURN MIN(toInteger(mp.position)) AS lowest_position",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "lowest_position": 2
      }
    ],
    "answer": "The lowest position value among modified proteins that are substrates of proteins involved in pathways is 2."
  },
  {
    "question": "Count all the distinct modifications that are parents of parents of modifications with monoisotopic mass differences?",
    "cypher": "MATCH (m1:Modification)-[:HAS_PARENT]->(m2:Modification)-[:HAS_PARENT]->(m3:Modification)-[:HAS_PARENT]->(m4:Modification) WHERE m1.description CONTAINS 'monoisotopic mass' RETURN COUNT(DISTINCT m3) AS modification_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "modification_count": 3
      }
    ],
    "answer": "Based on the query result, there are 3 distinct modifications that are parents of parents of modifications with monoisotopic mass differences."
  },
  {
    "question": "Tell me the highest score value for protein associations with diseases that have UniProt as their source?",
    "cypher": "MATCH (p:Protein)-[:ASSOCIATED_WITH {source: 'UniProt'}]->(d:Disease) WHERE p.score IS NOT NULL RETURN MAX(p.score) AS max_score",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "max_score": null
      }
    ],
    "answer": "UNKNOWN. The query result returned None, which means no valid score was found for protein-disease associations from UniProt."
  },
  {
    "question": "How many folks have proteins that interact with ETFB through curated interactions?",
    "cypher": "MATCH (p1:Protein {name: 'ETFB'})-[:CURATED_INTERACTS_WITH]->(p2:Protein) RETURN COUNT(DISTINCT p2) AS interacting_proteins",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "interacting_proteins": 8
      }
    ],
    "answer": "8 proteins have curated interactions with ETFB."
  },
  {
    "question": "Find the peak year of publication among those that published GWAS studies investigating gout?",
    "cypher": "MATCH (gs:GWAS_study)-[:STUDIES_TRAIT]->(ef:Experimental_factor {name: 'gout'})<-[:STUDIES_TRAIT]-(gs2:GWAS_study)-[:PUBLISHED_IN]->(pub:Publication) WHERE pub.year IS NOT NULL RETURN MAX(pub.year) AS latest_year",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "latest_year": 2018
      }
    ],
    "answer": "Based on the query result, 2018 was the peak year of publication for GWAS studies investigating gout."
  },
  {
    "question": "How many proteins act on other proteins that are subunits of complexes associated with biological processes?",
    "cypher": "MATCH (p1:Protein)-[:ACTS_ON]->(p2:Protein)-[:IS_SUBUNIT_OF]->(c:Complex)-[:ASSOCIATED_WITH]->(bp:Biological_process) RETURN COUNT(DISTINCT p1) AS acting_proteins",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "acting_proteins": 13380
      }
    ],
    "answer": "Based on the query result, 13,380 distinct proteins act on other proteins that are subunits of complexes associated with biological processes."
  },
  {
    "question": "What's the sum of all position values for modified proteins that have oxidation modifications?",
    "cypher": "MATCH (mp:Modified_protein)-[:HAS_MODIFICATION]->(m:Modification) WHERE mp.residue = 'M' AND mp.id CONTAINS '-ox' RETURN SUM(toInteger(mp.position)) AS total_positions",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "total_positions": 15412420
      }
    ],
    "answer": "The sum of all position values for modified methionine (M) proteins with oxidation modifications is 15,412,420."
  },
  {
    "question": "Show me the linkout URL for pathways that contain Glycerol 3-phosphate and are from SMPDB source?",
    "cypher": "MATCH (m:Metabolite {name: 'Glycerol 3-phosphate'})-[:ANNOTATED_IN_PATHWAY]->(pw:Pathway {source: 'SMPDB'}) RETURN pw.linkout AS pathway_url LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "pathway_url": "http://smpdb.ca/view/SMP0049409"
      }
    ],
    "answer": "The linkout URL for the SMPDB pathway containing Glycerol 3-phosphate is: http://smpdb.ca/view/SMP0049409"
  },
  {
    "question": "What's the lowest sample size among GWAS studies that investigate experimental factors mapped to diseases?",
    "cypher": "MATCH (gs:GWAS_study)-[:STUDIES_TRAIT]->(ef:Experimental_factor)-[:MAPS_TO]->(d:Disease) WHERE gs.sample_size IS NOT NULL RETURN MIN(gs.sample_size) AS min_sample_size",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "min_sample_size": "1 Afghanistan ancestry case, 154 Middle Eastern/North African ancestry cases, 2 Cape Verdian cases, 1 Curacao case, 1 Dominican Republic ancestry cases, 54 European ancestry cases, 1 Israeli case, 1 Surinamese ancestry case, 1 Thai ancestry case, 1 Chinese ancestry case, 119 Turkish ancestry cases, 87 Middle Eastern/North African ancestry controls, 5,756 controls"
      }
    ],
    "answer": "The lowest sample size appears to be individual case counts of 1 from various ancestries (1 Afghanistan, 1 Curacao, 1 Dominican Republic, 1 Israeli, 1 Surinamese, 1 Thai, and 1 Chinese ancestry cases). However, the sample size representation is complex and includes multiple ancestry groups, making a precise single numeric \"lowest\" sample size determination challenging."
  },
  {
    "question": "Count the number of distinct chrommosomes where known variants with missense effects are found?",
    "cypher": "MATCH (kv:Known_variant {effect: 'missense variant'})-[:VARIANT_FOUND_IN_CHROMOSOME]->(chr:Chromosome) RETURN COUNT(DISTINCT chr) AS chromosome_count",
    "query_type": "Existence Verification",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "chromosome_count": 24
      }
    ],
    "answer": "Based on the query result, there are 24 distinct chromosomes where known variants with missense effects are found."
  },
  {
    "question": "How many proteins mentioned in publications from 1999 have peptides that belong to them?",
    "cypher": "MATCH (p:Protein)-[:MENTIONED_IN_PUBLICATION]->(pub:Publication {year: 1999}), (pep:Peptide)-[:BELONGS_TO_PROTEIN]->(p) RETURN COUNT(DISTINCT p) AS protein_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "protein_count": 3555
      }
    ],
    "answer": "Based on the query result, 3,555 proteins mentioned in publications from 1999 have peptides that belong to them."
  },
  {
    "question": "Find the highest association score between proteins and tissues through COMPARTMENTS evidence?",
    "cypher": "MATCH (p:Protein)-[r:ASSOCIATED_WITH {source: 'COMPARTMENTS'}]->(t:Tissue) WHERE r.score IS NOT NULL RETURN MAX(r.score) AS max_association_score",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "max_association_score": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query result shows a max_association_score of None, which suggests that either no association scores were found or there was an issue retrieving the data."
  },
  {
    "question": "How many pathways serve as bridges between metabolites that have chemical formulas starting with C?",
    "cypher": "MATCH (m1:Metabolite)-[:ANNOTATED_IN_PATHWAY]->(pw:Pathway)<-[:ANNOTATED_IN_PATHWAY]-(m2:Metabolite) WHERE m1.chemical_formula STARTS WITH 'C' AND m2.chemical_formula STARTS WITH 'C' AND m1.id <> m2.id RETURN COUNT(DISTINCT pw) AS bridge_pathways",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "bridge_pathways": 49716
      }
    ],
    "answer": "49,716 pathways serve as bridges between metabolites with chemical formulas starting with C."
  },
  {
    "question": "What's the average position of all modified protiens that are substrates of ETFB?",
    "cypher": "MATCH (mp:Modified_protein)-[:IS_SUBSTRATE_OF]->(p:Protein {name: 'ETFB'}) WHERE mp.position IS NOT NULL RETURN AVG(toInteger(mp.position)) AS average_position",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "average_position": null
      }
    ],
    "answer": "UNKNOWN\n\n(The query returned None, which suggests there are no modified proteins with a valid position that are substrates of ETFB, or there might be an issue with the data retrieval.)"
  },
  {
    "question": "Tell me the acronym of projects that study ovarian serous carcinoma and have phosphoproteomics type?",
    "cypher": "MATCH (pr:Project)-[:STUDIES_DISEASE]->(d:Disease {name: 'ovarian serous carcinoma'}) WHERE pr.type CONTAINS 'phosphoproteomics' RETURN pr.acronym AS project_acronym LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "project_acronym": "P-CT45"
      }
    ],
    "answer": "P-CT45"
  },
  {
    "question": "What's the smallest page number among publications that mention proteins translated from PLPP3 gene?",
    "cypher": "MATCH (g:Gene {name: 'PLPP3'})-[:TRANSLATED_INTO]->(p:Protein)-[:MENTIONED_IN_PUBLICATION]->(pub:Publication) WHERE pub.page IS NOT NULL RETURN MIN(toInteger(pub.page)) AS min_page",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "min_page": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "How many users named Ana Rita Cola\u00e7o participate in projects that follow up other projects?",
    "cypher": "MATCH (u:User {name: 'Ana Rita Cola\u00e7o'})-[:PARTICIPATES_IN]->(p1:Project)-[:FOLLOWS_UP_PROJECT]->(p2:Project) RETURN COUNT(DISTINCT p1) AS project_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "project_count": 3
      }
    ],
    "answer": "Ana Rita Cola\u00e7o participates in 3 projects that follow up other projects."
  },
  {
    "question": "Count all the distinct stuff that's transcribed from genes and then translated into proteins with accession ETFB_HUMAN?",
    "cypher": "MATCH (g:Gene)-[:TRANSCRIBED_INTO]->(t:Transcript)-[:TRANSLATED_INTO]->(p:Protein {accession: 'ETFB_HUMAN'}) RETURN COUNT(DISTINCT t) AS transcript_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "transcript_count": 2
      }
    ],
    "answer": "There are 2 distinct transcripts that are transcribed from genes and translated into the protein with accession ETFB_HUMAN."
  },
  {
    "question": "Find the highest evidence score for protein interactions compiled from multiple sources?",
    "cypher": "MATCH (p1:Protein)-[r:COMPILED_INTERACTS_WITH]->(p2:Protein) WHERE r.score IS NOT NULL RETURN MAX(r.score) AS max_interaction_score",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "max_interaction_score": 0.999
      }
    ],
    "answer": "The highest evidence score for protein interactions compiled from multiple sources is 0.999."
  },
  {
    "question": "What's the name of the tissue studied by project P0000003?",
    "cypher": "MATCH (pr:Project {id: 'P0000003'})-[:STUDIES_TISSUE]->(t:Tissue) RETURN t.name AS tissue_name",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "tissue_name": "abdominal adipose tissue"
      }
    ],
    "answer": "The tissue studied by project P0000003 is abdominal adipose tissue."
  },
  {
    "question": "How many distinct peptides belong to proteins that have structures linked to UniProt source?",
    "cypher": "MATCH (pep:Peptide)-[:BELONGS_TO_PROTEIN]->(p:Protein)-[:HAS_STRUCTURE {source: 'UniProt'}]->(ps:Protein_structure) RETURN COUNT(DISTINCT pep) AS peptide_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "peptide_count": 433772
      }
    ],
    "answer": "Based on the query result, there are 433,772 distinct peptides that belong to proteins with structures linked to UniProt."
  },
  {
    "question": "Count how many functional regions are found in proteins that are QC markers in tissues?",
    "cypher": "MATCH (fr:Functional_region)-[:FOUND_IN_PROTEIN]->(p:Protein)-[:IS_QCMARKER_IN_TISSUE]->(t:Tissue) RETURN COUNT(DISTINCT fr) AS functional_region_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "functional_region_count": 108
      }
    ],
    "answer": "There are 108 distinct functional regions found in proteins that are QC markers in tissues."
  },
  {
    "question": "What's the top PMC_id value among publications from journal 'Ann Rheum Dis'?",
    "cypher": "MATCH (pub:Publication {journal: 'Ann Rheum Dis'}) WHERE pub.PMC_id IS NOT NULL RETURN pub.PMC_id AS pmc_id ORDER BY pub.PMC_id DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "pmc_id": "PMC6957763"
      }
    ],
    "answer": "The top PMC_id value among publications from the journal 'Ann Rheum Dis' is PMC6957763."
  },
  {
    "question": "How many proteins that interact with CLN3 through compiled interactions also have associated diseases?",
    "cypher": "MATCH (p1:Protein {name: 'CLN3'})-[:COMPILED_INTERACTS_WITH]->(p2:Protein)-[:ASSOCIATED_WITH]->(d:Disease) RETURN COUNT(DISTINCT p2) AS protein_with_disease_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "protein_with_disease_count": 79
      }
    ],
    "answer": "79 proteins that interact with CLN3 through compiled interactions are also associated with diseases."
  },
  {
    "question": "Sum up all the start positions in LOCATED_IN relationships between transcripts and chromosomes with taxid 9606?",
    "cypher": "MATCH (t:Transcript)-[r:LOCATED_IN]->(chr:Chromosome {taxid: '9606'}) WHERE r.start IS NOT NULL RETURN SUM(toInteger(r.start)) AS total_start_positions",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "total_start_positions": 21047052961343
      }
    ],
    "answer": "The sum of all start positions for transcripts located on chromosomes with taxid 9606 is 21,047,052,961,343."
  },
  {
    "question": "Find the lowest position among clinically relevent variants associated with diseases?",
    "cypher": "MATCH (crv:Clinically_relevant_variant)-[:ASSOCIATED_WITH]->(d:Disease) WHERE crv.position IS NOT NULL RETURN MIN(crv.position) AS min_position",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "min_position": 1803568
      }
    ],
    "answer": "The lowest position among clinically relevant variants associated with diseases is 1,803,568."
  },
  {
    "question": "How many somatic mutations are known variants found in genes translated into proteins?",
    "cypher": "MATCH (sm:Somatic_mutation)-[:IS_A_KNOWN_VARIANT]->(kv:Known_variant)-[:VARIANT_FOUND_IN_GENE]->(g:Gene)-[:TRANSLATED_INTO]->(p:Protein) RETURN COUNT(DISTINCT sm) AS somatic_mutation_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "somatic_mutation_count": 29
      }
    ],
    "answer": "Based on the query result, there are 29 somatic mutations that are known variants found in genes translated into proteins."
  },
  {
    "question": "What's the sequence window of modified protein at position 172 that's a site of ETFB?",
    "cypher": "MATCH (p:Protein {name: 'ETFB'})-[:HAS_MODIFIED_SITE]->(mp:Modified_protein {position: '172'}) RETURN mp.sequence_window AS sequence_window",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "sequence_window": "CGPAQCQETIRTALAMGADRGIHVEVPPAEA"
      }
    ],
    "answer": "The sequence window of the modified protein at position 172 for ETFB is: CGPAQCQETIRTALAMGADRGIHVEVPPAEA."
  },
  {
    "question": "Count how many foods have content of metabolites annotated in pathways from SMPDB?",
    "cypher": "MATCH (f:Food)-[:HAS_CONTENT]->(m:Metabolite)-[:ANNOTATED_IN_PATHWAY]->(pw:Pathway {source: 'SMPDB'}) RETURN COUNT(DISTINCT f) AS food_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "food_count": 44
      }
    ],
    "answer": "44 foods have metabolites annotated in pathways from SMPDB."
  },
  {
    "question": "What's the maximum toInteger value of positions for functional regions found in proteins associated with GO:0000015?",
    "cypher": "MATCH (fr:Functional_region)-[:FOUND_IN_PROTEIN]->(p:Protein)-[:ASSOCIATED_WITH]->(cc:Cellular_component {id: 'GO:0000015'}) WHERE fr.start IS NOT NULL RETURN MAX(toInteger(fr.start)) AS max_position",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "max_position": null
      }
    ],
    "answer": "UNKNOWN\n\nExplanation: The query result shows max_position as None, which means no valid integer position was found for functional regions in proteins associated with GO:0000015. This could be due to missing start position data or no matching proteins."
  },
  {
    "question": "Tell me the directionality value of the action between proteins where the target is a subunit of complexs?",
    "cypher": "MATCH (p1:Protein)-[r:ACTS_ON]->(p2:Protein)-[:IS_SUBUNIT_OF]->(c:Complex) WHERE r.directionality IS NOT NULL RETURN r.directionality AS action_directionality LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "action_directionality": false
      }
    ],
    "answer": "Based on the query result, the directionality value for the action between proteins where the target is a subunit of complexes is False."
  },
  {
    "question": "How many amino acid sequences belong to proteins that are detected in pathology samples of diseases?",
    "cypher": "MATCH (aas:Amino_acid_sequence)<-[:HAS_SEQUENCE]-(p:Protein)-[:DETECTED_IN_PATHOLOGY_SAMPLE]->(d:Disease) RETURN COUNT(DISTINCT aas) AS sequence_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "sequence_count": 19110
      }
    ],
    "answer": "Based on the query result, there are 19,110 distinct amino acid sequences that belong to proteins detected in pathology samples of diseases."
  },
  {
    "question": "What's the name of the user responsible for project with internal_id CP1585140316?",
    "cypher": "MATCH (pr:Project {internal_id: 'CP1585140316'})<-[:IS_RESPONSIBLE]-(u:User) RETURN u.name AS responsible_user",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "anthropic-chat",
    "database": "ClinicalKnowledgeGraph",
    "validated": true,
    "result": [
      {
        "responsible_user": "Alberto Santos"
      }
    ],
    "answer": "Alberto Santos is the user responsible for the project with internal_id CP1585140316."
  },
  {
    "question": "What is the revenue of Microsoft Corporation?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'}) RETURN o.revenue AS organization_revenue",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "organization_revenue": 198270000000.0
      }
    ],
    "answer": "Based on the query result, the revenue of Microsoft Corporation is $198,270,000,000."
  },
  {
    "question": "How many employees does SAP have?",
    "cypher": "MATCH (o:Organization {name: 'SAP'}) RETURN o.nbrEmployees AS number_of_employees",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_employees": 111961
      }
    ],
    "answer": "SAP has 111,961 employees."
  },
  {
    "question": "What's the motto for Mircosoft Corporation?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'}) RETURN o.motto AS organization_motto",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "organization_motto": "We\u2019re on a mission to empower every person and every organization on the planet to achieve more."
      }
    ],
    "answer": "Microsoft's motto is: \"We're on a mission to empower every person and every organization on the planet to achieve more.\""
  },
  {
    "question": "Is IBM a public company?",
    "cypher": "MATCH (o:Organization {name: 'IBM'}) RETURN o.isPublic AS is_public",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "is_public": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Tell me the summary for the person named Julie Spellman Sweet.",
    "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'}) RETURN p.summary AS person_summary",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "person_summary": "CEO at Accenture"
      }
    ],
    "answer": "Julie Spellman Sweet is the CEO at Accenture."
  },
  {
    "question": "Find out if Cloud Sherpas is a dissolved biz.",
    "cypher": "MATCH (o:Organization {name: 'Cloud Sherpas'}) RETURN o.isDissolved AS is_dissolved",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "is_dissolved": true
      }
    ],
    "answer": "Yes, Cloud Sherpas is a dissolved business according to the database."
  },
  {
    "question": "Gimme the revenue for SAP.",
    "cypher": "MATCH (o:Organization {name: 'SAP'}) RETURN o.revenue AS organization_revenue",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "organization_revenue": 30870000000.0
      }
    ],
    "answer": "Based on the query result, SAP's revenue is $30,870,000,000."
  },
  {
    "question": "Show me the summary for the company named IBM.",
    "cypher": "MATCH (o:Organization {name: 'IBM'}) RETURN o.summary AS organization_summary",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "organization_summary": "American multinational technology and consulting corporation"
      }
    ],
    "answer": "IBM is an American multinational technology and consulting corporation."
  },
  {
    "question": "What is the title of the article with ID 'ART176872705964'?",
    "cypher": "MATCH (a:Article {id: 'ART176872705964'}) RETURN a.title AS article_title",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_title": "Funds for Consumer Behavior Specialist Infinite Analytics"
      }
    ],
    "answer": "The title of the article with ID 'ART176872705964' is \"Funds for Consumer Behavior Specialist Infinite Analytics\"."
  },
  {
    "question": "What's the sentiment score for article 'ART176872705964'?",
    "cypher": "MATCH (a:Article {id: 'ART176872705964'}) RETURN a.sentiment AS article_sentiment",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_sentiment": 0.856
      }
    ],
    "answer": "The sentiment score for article 'ART176872705964' is 0.856, which suggests a quite positive sentiment."
  },
  {
    "question": "Which website published the article titled 'Funds for Consumer Behavior Specialist Infinite Analytics'?",
    "cypher": "MATCH (a:Article {title: 'Funds for Consumer Behavior Specialist Infinite Analytics'}) RETURN a.siteName AS site_name",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "site_name": "MrWeb"
      }
    ],
    "answer": "The article titled 'Funds for Consumer Behavior Specialist Infinite Analytics' was published on the website MrWeb."
  },
  {
    "question": "What is the employee count for New Energy Group?",
    "cypher": "MATCH (o:Organization {name: 'New Energy Group'}) RETURN o.nbrEmployees AS number_of_employees",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_employees": 375
      }
    ],
    "answer": "New Energy Group has 375 employees."
  },
  {
    "question": "Is New Energy Group a publicly traded company?",
    "cypher": "MATCH (o:Organization {name: 'New Energy Group'}) RETURN o.isPublic AS is_public",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "is_public": false
      }
    ],
    "answer": "No, New Energy Group is not a publicly traded company."
  },
  {
    "question": "What's the name of the country with ID 'E01d4EK33MmCosgI2KXa4-A'?",
    "cypher": "MATCH (c:Country {id: 'E01d4EK33MmCosgI2KXa4-A'}) RETURN c.name AS country_name",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "country_name": "United States of America"
      }
    ],
    "answer": "The country with ID 'E01d4EK33MmCosgI2KXa4-A' is the United States of America."
  },
  {
    "question": "Tell me the name of the city with the ID 'EZHWv2xKgN92oYDKSjhJ2gw'.",
    "cypher": "MATCH (c:City {id: 'EZHWv2xKgN92oYDKSjhJ2gw'}) RETURN c.name AS city_name",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_name": "Seattle"
      }
    ],
    "answer": "The city with the ID 'EZHWv2xKgN92oYDKSjhJ2gw' is Seattle."
  },
  {
    "question": "Who is the CEO of Accenture?",
    "cypher": "MATCH (o:Organization {name: 'Accenture'})-[:HAS_CEO]->(p:Person) RETURN p.name AS ceo_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Julie Spellman Sweet"
      }
    ],
    "answer": "Julie Spellman Sweet is the CEO of Accenture."
  },
  {
    "question": "How many subsidiaries does SAP have?",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization) RETURN COUNT(sub) AS number_of_subsidiaries",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_subsidiaries": 94
      }
    ],
    "answer": "According to the query result, SAP has 94 subsidiaries."
  },
  {
    "question": "Count the number of competitors for Oracel.",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(c:Organization) RETURN COUNT(c) AS number_of_competitors",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_competitors": 24
      }
    ],
    "answer": "Oracle has 24 competitors."
  },
  {
    "question": "How many investors (people or organizations) does Infinite Analytics have?",
    "cypher": "MATCH (o:Organization {name: 'Infinite Analytics'})-[:HAS_INVESTOR]->(inv) RETURN COUNT(inv) AS total_investors",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_investors": 9
      }
    ],
    "answer": "Infinite Analytics has 9 investors."
  },
  {
    "question": "What is the total number of suppliers for IBM?",
    "cypher": "MATCH (o:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(sup:Organization) RETURN COUNT(sup) AS number_of_suppliers",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_suppliers": 560
      }
    ],
    "answer": "IBM has 560 suppliers."
  },
  {
    "question": "What is the name of the CEO of the firm named Accenture?",
    "cypher": "MATCH (o:Organization {name: 'Accenture'})-[:HAS_CEO]->(p:Person) RETURN p.name AS ceo_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Julie Spellman Sweet"
      }
    ],
    "answer": "Julie Spellman Sweet is the CEO of Accenture."
  },
  {
    "question": "How many articles mention IBM?",
    "cypher": "MATCH (a:Article)-[:MENTIONS]->(o:Organization {name: 'IBM'}) RETURN COUNT(a) AS total_articles",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_articles": 823
      }
    ],
    "answer": "823 articles mention IBM."
  },
  {
    "question": "Find the highest revenue among all of SAP's subsidiaries.",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.revenue IS NOT NULL RETURN MAX(sub.revenue) AS highest_subsidiary_revenue",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_subsidiary_revenue": 50200000000.0
      }
    ],
    "answer": "The highest revenue among SAP's subsidiaries is $50.2 billion."
  },
  {
    "question": "What's the name of the company run by Julie Spelman Sweet?",
    "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'})<-[:HAS_CEO]-(o:Organization) RETURN o.name AS organization_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "organization_name": "Accenture"
      }
    ],
    "answer": "Accenture is the company run by Julie Spelman Sweet."
  },
  {
    "question": "How many board members does Mircosoft Corporation have?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'})-[:HAS_BOARD_MEMBER]->(p:Person) RETURN COUNT(p) AS number_of_board_members",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_board_members": 22
      }
    ],
    "answer": "Microsoft Corporation has 22 board members."
  },
  {
    "question": "What's the average number of employees across all of IBM's suppliers?",
    "cypher": "MATCH (o:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(sup:Organization) WHERE sup.nbrEmployees IS NOT NULL RETURN AVG(sup.nbrEmployees) AS average_supplier_employees",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_supplier_employees": 7808.862068965517
      }
    ],
    "answer": "Based on the query result, the average number of employees across IBM's suppliers is approximately 7,809 employees."
  },
  {
    "question": "What's the name of the least populous subsidiary of SAP?",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.nbrEmployees IS NOT NULL RETURN sub.name AS least_populous_subsidiary ORDER BY sub.nbrEmployees ASC LIMIT 1",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "least_populous_subsidiary": "Deloitte"
      }
    ],
    "answer": "Deloitte"
  },
  {
    "question": "How many subsidiaries does Accenture's supplier, Microsoft Corporation, have?",
    "cypher": "MATCH (:Organization {name: 'Accenture'})<-[:HAS_SUPPLIER]-(s:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY]->(sub:Organization) RETURN COUNT(sub) AS number_of_subsidiaries",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_subsidiaries": 338
      }
    ],
    "answer": "According to the query result, Microsoft Corporation has 338 subsidiaries."
  },
  {
    "question": "Find the name of an investor in a company mentioned in the article 'Funds for Consumer Behavior Specialist Infinite Analytics'.",
    "cypher": "MATCH (a:Article {title: 'Funds for Consumer Behavior Specialist Infinite Analytics'})-[:MENTIONS]->(o:Organization)-[:HAS_INVESTOR]->(inv) RETURN inv.name AS investor_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_name": "Rajesh Kamat"
      }
    ],
    "answer": "According to the data, Rajesh Kamat is an investor in the company mentioned in the article 'Funds for Consumer Behavior Specialist Infinite Analytics'."
  },
  {
    "question": "What's the country for New Relic, which is in Seattle?",
    "cypher": "MATCH (:Organization {name: 'New Relic'})-[:IN_CITY]->(:City {name: 'Seattle'})-[:IN_COUNTRY]->(cy:Country) RETURN cy.name AS country_name",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "country_name": "United States of America"
      }
    ],
    "answer": "The country for New Relic, which is in Seattle, is the United States of America."
  },
  {
    "question": "Name a subsidiary of a supplier to Mircosoft Corporation.",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(s:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) RETURN sub.name AS subsidiary_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_name": "Chadwick Martin Bailey"
      }
    ],
    "answer": "Chadwick Martin Bailey is a subsidiary of a supplier to Microsoft Corporation."
  },
  {
    "question": "What's the city of a company that is a competitor to Oracle?",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(c:Organization)-[:IN_CITY]->(city:City) RETURN city.name AS city_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_name": "S\u00e3o Leopoldo"
      }
    ],
    "answer": "S\u00e3o Leopoldo is the city of a company that is a competitor to Oracle."
  },
  {
    "question": "How many people work for a subsidiary of the company run by Julie Spellman Sweet?",
    "cypher": "MATCH (:Person {name: 'Julie Spellman Sweet'})<-[:HAS_CEO]-(o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.nbrEmployees IS NOT NULL RETURN sub.nbrEmployees AS subsidiary_employee_count LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_employee_count": 501
      }
    ],
    "answer": "501 people work for a subsidiary of the company run by Julie Spellman Sweet."
  },
  {
    "question": "Find the name of a subsidiary for a company in Seattle.",
    "cypher": "MATCH (:City {name: 'Seattle'})<-[:IN_CITY]-(o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) RETURN sub.name AS subsidiary_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_name": "Immediately"
      }
    ],
    "answer": "The subsidiary name is Immediately."
  },
  {
    "question": "Whats the motto of a company that supplies stuff to IBM?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(s:Organization) WHERE s.motto IS NOT NULL AND s.motto <> '' RETURN s.motto AS supplier_motto LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_motto": "Preserving open source software for future generations"
      }
    ],
    "answer": "The motto of a company that supplies to IBM is: \"Preserving open source software for future generations\""
  },
  {
    "question": "What is the name of a company that has invested in a subsidiary of SAP?",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)<-[:HAS_INVESTOR]-(inv:Organization) RETURN inv.name AS investor_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_name": "Mayfield Fund"
      }
    ],
    "answer": "Mayfield Fund is a company that has invested in a subsidiary of SAP."
  },
  {
    "question": "Find the name of the CEO of a supplier for IBM.",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(s:Organization)-[:HAS_CEO]->(p:Person) RETURN p.name AS ceo_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Ryan Roslansky"
      }
    ],
    "answer": "Ryan Roslansky is the CEO of a supplier for IBM."
  },
  {
    "question": "Give me the name of a city where a competitor of Mircosoft Corporation is located.",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(c:Organization)-[:IN_CITY]->(city:City) RETURN city.name AS competitor_city_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "competitor_city_name": "Elk Grove"
      }
    ],
    "answer": "Elk Grove is a city where a competitor of Microsoft Corporation is located."
  },
  {
    "question": "What's the name of the industry for a biz that supplies Oracel?",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(s:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) RETURN ic.name AS industry_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "industry_name": "Electronic Products Manufacturers"
      }
    ],
    "answer": "The industry for a business that supplies Oracle is Electronic Products Manufacturers."
  },
  {
    "question": "What is the total number of employees working for subsidiaries of SAP's suppliers?",
    "cypher": "MATCH (:Organization {name: 'SAP'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.nbrEmployees IS NOT NULL RETURN sum(sub.nbrEmployees) AS total_subsidiary_employees",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_subsidiary_employees": 510956
      }
    ],
    "answer": "Based on the query result, the total number of employees working for subsidiaries of SAP's suppliers is 510,956 employees."
  },
  {
    "question": "Find the name of the city where the subsidiary of a competitor to IBM is located.",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(c:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(city:City) RETURN city.name AS competitor_subsidiary_city LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "competitor_subsidiary_city": "Coral Gables"
      }
    ],
    "answer": "Coral Gables is the city where a subsidiary of an IBM competitor is located."
  },
  {
    "question": "Which supplier of Microsoft Corporation has the highest revenue?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(s:Organization) WHERE s.revenue IS NOT NULL RETURN s.name AS top_supplier_name ORDER BY s.revenue DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "top_supplier_name": "Meta Platforms"
      }
    ],
    "answer": "Based on the query result, Meta Platforms is the supplier of Microsoft Corporation with the highest revenue."
  },
  {
    "question": "How many degrees of separation are in the shortest supply chain path between Oracle and SAP?",
    "cypher": "MATCH path = shortestPath((o1:Organization {name: 'Oracle'})-[:HAS_SUPPLIER*]-(o2:Organization {name: 'SAP'})) RETURN length(path) AS supply_chain_distance",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supply_chain_distance": 2
      }
    ],
    "answer": "Based on the query result, the shortest supply chain path between Oracle and SAP has 2 degrees of separation."
  },
  {
    "question": "How many distinct companys are suppliers to the competitors of Mircosoft Corp?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(c:Organization)<-[:HAS_SUPPLIER]-(s:Organization) RETURN count(DISTINCT s) AS num_suppliers_of_competitors",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo, grammatical",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "num_suppliers_of_competitors": 252
      }
    ],
    "answer": "There are 252 distinct companies that are suppliers to Microsoft Corporation's competitors."
  },
  {
    "question": "What's the minimum number of employees for a subsidiary of an Oracle supplier?",
    "cypher": "MATCH (:Organization {name: 'Oracle'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.nbrEmployees IS NOT NULL RETURN min(sub.nbrEmployees) AS min_subsidiary_employees",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "min_subsidiary_employees": 1
      }
    ],
    "answer": "Based on the query result, the minimum number of employees for a subsidiary of an Oracle supplier is 1."
  },
  {
    "question": "Count how many organizations are both suppliers and competitors to IBM.",
    "cypher": "MATCH (ibm:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(org:Organization)<-[:HAS_SUPPLIER]-(ibm) RETURN count(org) AS competitor_supplier_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "competitor_supplier_count": 8
      }
    ],
    "answer": "Based on the query result, 8 organizations are both suppliers and competitors to IBM."
  },
  {
    "question": "What's the average revenue of firms in the same industry as SAP's subsidiary Concur?",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(:Organization {name: 'Concur'})-[:HAS_CATEGORY]->(cat:IndustryCategory)<-[:HAS_CATEGORY]-(org:Organization) WHERE org.revenue IS NOT NULL RETURN avg(org.revenue) AS average_industry_revenue",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_industry_revenue": 1841448329.9659972
      }
    ],
    "answer": "Based on the query result, the average revenue of firms in the same industry category as Concur is approximately $1.84 billion."
  },
  {
    "question": "Tell me the motto of a supplier to a competitor of SAP.",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(c:Organization)<-[:HAS_SUPPLIER]-(s:Organization) WHERE s.motto IS NOT NULL AND s.motto <> '' RETURN s.motto AS supplier_motto LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_motto": "Helping accounting and tax pros save time, grow their practice and serve their clients as trusted advisors."
      }
    ],
    "answer": "A supplier to a competitor of SAP has the motto: \"Helping accounting and tax pros save time, grow their practice and serve their clients as trusted advisors.\""
  },
  {
    "question": "Find the name of the board member of the company with the lowest revenue that is a supplier to Oracle.",
    "cypher": "MATCH (p:Person)<-[:HAS_BOARD_MEMBER]-(s:Organization)-[:HAS_SUPPLIER]->(:Organization {name: 'Oracle'}) WHERE s.revenue IS NOT NULL RETURN p.name AS board_member_name ORDER BY s.revenue ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "board_member_name": "Tony Bates"
      }
    ],
    "answer": "Tony Bates is the board member of the company with the lowest revenue that is a supplier to Oracle."
  },
  {
    "question": "How many investors are linked to the subsidiaries of Acenture?",
    "cypher": "MATCH (:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_INVESTOR]->(inv) RETURN count(DISTINCT inv) AS total_investors",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_investors": 16
      }
    ],
    "answer": "16 investors are linked to the subsidiaries of Accenture."
  },
  {
    "question": "Calculate the total number of employees for all public companies that supply to IBM's competitors.",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(c:Organization)<-[:HAS_SUPPLIER]-(s:Organization) WHERE s.isPublic = true AND s.nbrEmployees IS NOT NULL RETURN sum(s.nbrEmployees) AS total_public_supplier_employees",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_public_supplier_employees": 6214924
      }
    ],
    "answer": "Based on the query result, the total number of employees for all public companies that supply to IBM's competitors is 6,214,924 employees."
  },
  {
    "question": "What's the name of the country where a supplier to a subsidiary of Microsoft Corporation is located?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_SUBSIDIARY]->(sub:Organization)<-[:HAS_SUPPLIER]-(sup:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(co:Country) RETURN co.name AS supplier_country_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_country_name": "United States of America"
      }
    ],
    "answer": "The supplier to a subsidiary of Microsoft Corporation is located in the United States of America."
  },
  {
    "question": "What is the name of the city hosting the Oracle competitor with the largest workforce?",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(c:Organization)-[:IN_CITY]->(city:City) WHERE c.nbrEmployees IS NOT NULL RETURN city.name AS largest_competitor_city ORDER BY c.nbrEmployees DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "largest_competitor_city": "Weston"
      }
    ],
    "answer": "Weston is the city hosting the Oracle competitor with the largest workforce."
  },
  {
    "question": "How many cities are associated with suppliers of the company where Julie Spellman Sweet is the CEO?",
    "cypher": "MATCH (:Person {name: 'Julie Spellman Sweet'})<-[:HAS_CEO]-(o:Organization)<-[:HAS_SUPPLIER]-(s:Organization)-[:IN_CITY]->(c:City) RETURN count(DISTINCT c) AS number_of_supplier_cities",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_supplier_cities": 1054
      }
    ],
    "answer": "1,054 cities are associated with suppliers of the company where Julie Spellman Sweet is the CEO."
  },
  {
    "question": "Count the number of dissolved companies that were once competitors of SAP.",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(c:Organization) WHERE c.isDissolved = true RETURN count(c) AS dissolved_competitor_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "dissolved_competitor_count": 1
      }
    ],
    "answer": "SAP has 1 dissolved competitor."
  },
  {
    "question": "Show me the industry category of a firm that supplies parts to a subsidiary of IBM.",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_SUBSIDIARY]->(sub:Organization)<-[:HAS_SUPPLIER]-(sup:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) RETURN cat.name AS supplier_category_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_category_name": "Electronic Products Manufacturers"
      }
    ],
    "answer": "The industry category of a firm that supplies parts to a subsidiary of IBM is Electronic Products Manufacturers."
  },
  {
    "question": "What is the maximum sentiment score of an article that mentions a competitor of Oracle?",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(c:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment IS NOT NULL RETURN max(a.sentiment) AS max_article_sentiment",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "max_article_sentiment": NaN
      }
    ],
    "answer": "UNKNOWN\n\nThe query returned `nan` (not a number), which suggests there are no articles with a valid sentiment score that mention an Oracle competitor. Therefore, I cannot provide a specific maximum sentiment score."
  },
  {
    "question": "Is there a supply chain link between IBM and Oracle? Give me the connection count.",
    "cypher": "MATCH path = (o1:Organization {name: 'IBM'})-[:HAS_SUPPLIER*1..3]->(o2:Organization {name: 'Oracle'}) RETURN count(path) AS connection_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connection_count": 290
      }
    ],
    "answer": "Yes, there is a supply chain link between IBM and Oracle. The query results show 290 distinct supply chain connections between these two organizations."
  },
  {
    "question": "What's the total revenue for all suppliers of Mircosoft Corp that are located in Seattle?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(s:Organization)-[:IN_CITY]->(:City {name: 'Seattle'}) WHERE s.revenue IS NOT NULL RETURN sum(s.revenue) AS total_revenue_seattle_suppliers",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_revenue_seattle_suppliers": 34332048000.0
      }
    ],
    "answer": "The total revenue for Microsoft's suppliers located in Seattle is $34,332,048,000."
  },
  {
    "question": "Find the name of the CEO of a company that is a competitor to a supplier of SAP.",
    "cypher": "MATCH (:Organization {name: 'SAP'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_COMPETITOR]->(c:Organization)-[:HAS_CEO]->(p:Person) RETURN p.name AS ceo_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Alex Bouzari"
      }
    ],
    "answer": "The CEO of a company that is a competitor to a SAP supplier is Alex Bouzari."
  },
  {
    "question": "Which subsidiary of a Microsoft Corporation competitor, located in the United States of America, has the smallest number of employees?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(c:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(:Country {name: 'United States of America'}) WHERE sub.nbrEmployees IS NOT NULL RETURN sub.name AS smallest_us_subsidiary ORDER BY sub.nbrEmployees ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "smallest_us_subsidiary": "MuleSoft"
      }
    ],
    "answer": "MuleSoft, a subsidiary of a Microsoft Corporation competitor located in the United States, has the smallest number of employees."
  },
  {
    "question": "How many board members does Oracle's suppliers have in total?",
    "cypher": "MATCH (:Organization {name: 'Oracle'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN count(DISTINCT p) AS total_board_members",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_board_members": 631
      }
    ],
    "answer": "Oracle's suppliers have a total of 631 board members."
  },
  {
    "question": "What's the average headcount of organizations mentioned in articles from 'Reuters' that are also suppliers to IBM?",
    "cypher": "MATCH (:Organization {name: 'IBM'})<-[:HAS_SUPPLIER]-(org:Organization)<-[:MENTIONS]-(:Article {siteName: 'Reuters'}) WHERE org.nbrEmployees IS NOT NULL RETURN avg(org.nbrEmployees) AS average_headcount",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_headcount": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returned None for the average headcount, which could mean either no matching organizations were found or the employees data is missing for the organizations that are suppliers to IBM and mentioned in Reuters articles."
  },
  {
    "question": "What is the name of the city where a supplier to SAP is located?",
    "cypher": "MATCH (:Organization {name: 'SAP'})<-[:HAS_SUPPLIER]-(s:Organization)-[:IN_CITY]->(c:City) RETURN c.name AS supplier_city LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_city": "Weston"
      }
    ],
    "answer": "Weston is the city where a supplier to SAP is located."
  },
  {
    "question": "What is the title of the most recent article mentioning a subsidiary of Acenture?",
    "cypher": "MATCH (:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub:Organization)<-[:MENTIONS]-(a:Article) WHERE a.date IS NOT NULL RETURN a.title AS recent_article_title ORDER BY a.date DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "recent_article_title": "BPO Giant Accenture to Invest $3 Billion in AI"
      }
    ],
    "answer": "The most recent article mentioning an Accenture subsidiary is titled \"BPO Giant Accenture to Invest $3 Billion in AI\"."
  },
  {
    "question": "How many paths exist from an article to a country via a mentioned organization and its location?",
    "cypher": "MATCH path = (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(co:Country) WHERE a.title = 'Funds for Consumer Behavior Specialist Infinite Analytics' RETURN count(path) AS path_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "path_count": 4
      }
    ],
    "answer": "There are 4 paths from the article \"Funds for Consumer Behavior Specialist Infinite Analytics\" to a country, going through a mentioned organization and its city/location."
  },
  {
    "question": "Count the number of subsidiaries for all of IBM's competitors combined.",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(c:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) RETURN count(sub) AS total_competitor_subsidiaries",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_competitor_subsidiaries": 2335
      }
    ],
    "answer": "IBM's competitors have a total of 2,335 subsidiaries combined."
  },
  {
    "question": "What's the summary for the parent company of Cloud Sherpas?",
    "cypher": "MATCH (:Organization {name: 'Cloud Sherpas'})<-[:HAS_SUBSIDIARY]-(parent:Organization) RETURN parent.summary AS parent_company_summary LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_company_summary": "Financial services company based in Dublin, Ireland and owned by Cloud Sherpas"
      }
    ],
    "answer": "The parent company is a financial services company based in Dublin, Ireland and owned by Cloud Sherpas."
  },
  {
    "question": "Which person is the CEO of the Oracle competitor with the most revenue?",
    "cypher": "MATCH (p:Person)<-[:HAS_CEO]-(c:Organization)-[:HAS_COMPETITOR]->(:Organization {name: 'Oracle'}) WHERE c.revenue IS NOT NULL RETURN p.name AS top_ceo_name ORDER BY c.revenue DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "top_ceo_name": "Satya Nadella"
      }
    ],
    "answer": "Satya Nadella is the CEO of the Oracle competitor with the most revenue."
  },
  {
    "question": "How many distinct countries are IBM's competitors and their subsidiaries located in?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(comp)-[:HAS_SUBSIDIARY*0..1]->(org)-[:IN_CITY]->(city)-[:IN_COUNTRY]->(country) RETURN count(DISTINCT country) AS total_countries",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_countries": 96
      }
    ],
    "answer": "IBM's competitors and their subsidiaries are located in 96 distinct countries."
  },
  {
    "question": "What is the total revenue of all companys that are suppliers to both Mircosoft Corp and IBM?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_SUPPLIER]->(:Organization {name: 'IBM'}) WHERE s.revenue IS NOT NULL RETURN sum(s.revenue) AS shared_supplier_revenue",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo, grammatical",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "shared_supplier_revenue": 7289379000.0
      }
    ],
    "answer": "The total revenue of companies that are suppliers to both Microsoft Corporation and IBM is $7,289,379,000."
  },
  {
    "question": "What is the name of the CEO for a company that supplies to a subsidiary of SAP?",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)<-[:HAS_SUPPLIER]-(sup:Organization)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS supplier_ceo_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_ceo_name": "Carsten Knobel"
      }
    ],
    "answer": "Carsten Knobel is the CEO of a company that supplies to a subsidiary of SAP."
  },
  {
    "question": "Find the name of the city that is home to the supplier of IBM with the smallest workforce.",
    "cypher": "MATCH (:Organization {name: 'IBM'})<-[:HAS_SUPPLIER]-(s:Organization)-[:IN_CITY]->(c:City) WHERE s.nbrEmployees IS NOT NULL RETURN c.name AS city_of_smallest_supplier ORDER BY s.nbrEmployees ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_of_smallest_supplier": "New York City"
      }
    ],
    "answer": "New York City is the city that is home to the supplier of IBM with the smallest workforce."
  },
  {
    "question": "Count the total number of board members across all suppliers of Oracle.",
    "cypher": "MATCH (:Organization {name: 'Oracle'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN count(p) AS total_supplier_board_members",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_supplier_board_members": 639
      }
    ],
    "answer": "The total number of board members across all suppliers of Oracle is 639."
  },
  {
    "question": "Find the name of an investor in a subsidiary of a company supplied by Oracle.",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(c:Organization)-[:HAS_SUBSIDIARY]->(s:Organization)-[:HAS_INVESTOR]->(i) RETURN i.name AS investor_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_name": "Shlomo Kramer"
      }
    ],
    "answer": "Shlomo Kramer is an investor in a subsidiary of a company that supplies Oracle."
  },
  {
    "question": "What's the highest revenue among public companies that are competitors to the firm run by Julie Spellman Sweet?",
    "cypher": "MATCH (:Person {name: 'Julie Spellman Sweet'})<-[:HAS_CEO]-(o:Organization)-[:HAS_COMPETITOR]->(c:Organization) WHERE c.isPublic = true AND c.revenue IS NOT NULL RETURN max(c.revenue) AS highest_competitor_revenue",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo, colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_competitor_revenue": 4825000000.0
      }
    ],
    "answer": "The highest revenue among public competitors to Julie Spellman Sweet's firm is $4,825,000,000."
  },
  {
    "question": "How many corporate investors does IBM's suppliers have?",
    "cypher": "MATCH (:Organization {name: 'IBM'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_INVESTOR]->(inv:Organization) RETURN count(DISTINCT inv) AS corporate_investor_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "corporate_investor_count": 44
      }
    ],
    "answer": "Based on the query result, IBM's suppliers have 44 distinct corporate investors."
  },
  {
    "question": "What is the average number of employees for suppliers of Mircosoft Corp's competitors?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(c:Organization)<-[:HAS_SUPPLIER]-(s:Organization) WHERE s.nbrEmployees IS NOT NULL RETURN avg(s.nbrEmployees) AS avg_employee_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "avg_employee_count": 63235.193548387106
      }
    ],
    "answer": "Based on the query result, the average number of employees for suppliers of Microsoft Corporation's competitors is approximately 63,235 employees."
  },
  {
    "question": "What's the name of the parent org for the company 'New Energy Group'?",
    "cypher": "MATCH (:Organization {name: 'New Energy Group'})<-[:HAS_SUBSIDIARY]-(p:Organization) RETURN p.name AS parent_organization_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_organization_name": "Accenture"
      }
    ],
    "answer": "Accenture is the parent organization for New Energy Group."
  },
  {
    "question": "Find the title of the article with the lowest sentiment that mentions a supplier of SAP.",
    "cypher": "MATCH (:Organization {name: 'SAP'})<-[:HAS_SUPPLIER]-(s:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment IS NOT NULL RETURN a.title AS lowest_sentiment_article ORDER BY a.sentiment ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "lowest_sentiment_article": "Analytics for Apache Hadoop not visible in IBM Bluemix, why?"
      }
    ],
    "answer": "The article with the lowest sentiment that mentions a supplier of SAP is \"Analytics for Apache Hadoop not visible in IBM Bluemix, why?\""
  },
  {
    "question": "How many suppliers does the company 'Accenture' have that are also competitors to 'IBM'?",
    "cypher": "MATCH (:Organization {name: 'Accenture'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_COMPETITOR]->(:Organization {name: 'IBM'}) RETURN count(s) AS shared_supplier_competitor_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "shared_supplier_competitor_count": 2
      }
    ],
    "answer": "Accenture has 2 suppliers that are also competitors to IBM."
  },
  {
    "question": "Count all the subsidiaries of public companies that are suppliers to IBM.",
    "cypher": "MATCH (:Organization {name: 'IBM'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE s.isPublic = true RETURN count(sub) AS total_subsidiaries",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_subsidiaries": 200
      }
    ],
    "answer": "Based on the query result, there are 200 subsidiaries of public companies that are suppliers to IBM."
  },
  {
    "question": "Get me the name of the country where a competitor to a subsidiary of SAP is located.",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization)-[:HAS_COMPETITOR]->(comp:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN country.name AS competitor_country_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "competitor_country_name": "Canada"
      }
    ],
    "answer": "The competitor to a SAP subsidiary is located in Canada."
  },
  {
    "question": "Which biz that supplies stuff to Oracle has the most investors (people or orgs)?",
    "cypher": "MATCH (:Organization {name: 'Oracle'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_INVESTOR]->(i) WITH s, count(i) AS investorCount RETURN s.name AS top_investor_supplier ORDER BY investorCount DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "top_investor_supplier": "Dell"
      }
    ],
    "answer": "According to the data, Dell has the most investors among Oracle's suppliers."
  },
  {
    "question": "How many different cities host the headquarters of IBM's suppliers' subsidiaries?",
    "cypher": "MATCH (:Organization {name: 'IBM'})<-[:HAS_SUPPLIER]-(s:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City) RETURN count(DISTINCT c) AS number_of_cities",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_cities": 1205
      }
    ],
    "answer": "Based on the query result, there are 1,205 different cities that host the headquarters of IBM's suppliers' subsidiaries."
  },
  {
    "question": "What is the total revenue of all subsidiaries of companies located in Seattle?",
    "cypher": "MATCH (:City {name: 'Seattle'})<-[:IN_CITY]-(o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization) WHERE s.revenue IS NOT NULL RETURN sum(s.revenue) AS total_seattle_subsidiary_revenue",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_seattle_subsidiary_revenue": 77027443256.0
      }
    ],
    "answer": "The total revenue of all subsidiaries of companies located in Seattle is $77,027,443,256."
  },
  {
    "question": "What is the total revenue of all subsidiaries of SAP?",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.revenue IS NOT NULL RETURN sum(sub.revenue) AS total_subsidiary_revenue",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_subsidiary_revenue": 50200000000.0
      }
    ],
    "answer": "The total revenue of SAP's subsidiaries is $50.2 billion."
  },
  {
    "question": "Tell me the name of the CEO of one of Oracle's competitors.",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(:Organization)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS competitor_ceo_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "competitor_ceo_name": "Satya Nadella"
      }
    ],
    "answer": "Satya Nadella, who is the CEO of Microsoft (a competitor of Oracle), is the name of the CEO mentioned in the query result."
  },
  {
    "question": "Find the highest revenue among all competitors of Microsoft Corporation.",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(comp:Organization) WHERE comp.revenue IS NOT NULL RETURN max(comp.revenue) AS max_competitor_revenue",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "max_competitor_revenue": 30870000000.0
      }
    ],
    "answer": "The highest revenue among Microsoft Corporation's competitors is $30,870,000,000."
  },
  {
    "question": "What is the shortest connection length between IBM and Microsoft Corporation through their business relationships?",
    "cypher": "MATCH p = shortestPath((o1:Organization {name: 'IBM'})-[*..5]-(o2:Organization {name: 'Microsoft Corporation'})) RETURN length(p) AS connection_distance",
    "query_type": "Existence Verification",
    "complexity": "5-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connection_distance": 1
      }
    ],
    "answer": "Based on the query result, the shortest connection length between IBM and Microsoft Corporation is 1, indicating they have a direct business relationship."
  },
  {
    "question": "How many board members does Acenture have?",
    "cypher": "MATCH (:Organization {name: 'Accenture'})-[:HAS_BOARD_MEMBER]->(p:Person) RETURN count(p) AS total_board_members",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_board_members": 24
      }
    ],
    "answer": "Accenture has 24 board members."
  },
  {
    "question": "What is the industry category for a competitor of a subsidiary of Oracle?",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_SUBSIDIARY]->(sub)-[:HAS_COMPETITOR]->(comp)-[:HAS_CATEGORY]->(cat) RETURN cat.name AS competitor_industry_category LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "competitor_industry_category": "Software As A Service Companies"
      }
    ],
    "answer": "The industry category for a competitor of an Oracle subsidiary is \"Software As A Service Companies\"."
  },
  {
    "question": "Which biz that supplies Microsoft Corporation has the most employees? Give me its name.",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(s:Organization) WHERE s.nbrEmployees IS NOT NULL RETURN s.name AS largest_supplier_by_employees ORDER BY s.nbrEmployees DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "largest_supplier_by_employees": "Foxconn"
      }
    ],
    "answer": "Foxconn is the supplier of Microsoft Corporation with the most employees."
  },
  {
    "question": "How many investors does SAP have that are also investors in its competitors?",
    "cypher": "MATCH (p)-[:HAS_INVESTOR]->(:Organization {name: 'SAP'}), (p)-[:HAS_INVESTOR]->(competitor) WHERE (:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(competitor) RETURN count(DISTINCT p) AS shared_investor_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "shared_investor_count": 0
      }
    ],
    "answer": "Based on the query result, SAP has 0 investors that are also investors in its competitors."
  },
  {
    "question": "What is the total number of employees for all subsidiaries of suppliers to IBM?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(supplier)-[:HAS_SUBSIDIARY]->(sub) WHERE sub.nbrEmployees IS NOT NULL RETURN sum(sub.nbrEmployees) AS total_subsidiary_employees",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_subsidiary_employees": 333464
      }
    ],
    "answer": "The total number of employees across all subsidiaries of IBM's suppliers is 333,464."
  },
  {
    "question": "In what city is the headquarters of one of IBMs suppliers located?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(:Organization)-[:IN_CITY]->(c:City) RETURN c.name AS supplier_city LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_city": "Marblehead"
      }
    ],
    "answer": "The headquarters of one of IBM's suppliers is located in Marblehead."
  },
  {
    "question": "Find the name of the CEO of the subsidiary with the lowest revenue, for any subsidiary of a competitor of Mircosoft Corporation.",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(comp)-[:HAS_SUBSIDIARY]->(sub)-[:HAS_CEO]->(ceo:Person) WHERE sub.revenue IS NOT NULL RETURN ceo.name AS ceo_of_lowest_revenue_sub ORDER BY sub.revenue ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_of_lowest_revenue_sub": "Simon Parmett"
      }
    ],
    "answer": "Simon Parmett is the CEO of the subsidiary with the lowest revenue among Microsoft Corporation's competitors."
  },
  {
    "question": "How many distinct countries are suppliers of Microsoft Corporation's competitors located in?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(comp)-[:HAS_SUPPLIER]->(sup)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country) RETURN count(DISTINCT c) AS supplier_country_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_country_count": 110
      }
    ],
    "answer": "Based on the query result, there are 110 distinct countries that are home to suppliers of Microsoft Corporation's competitors."
  },
  {
    "question": "What's the average sentiment of articles that mention any firm in the same city as Accenture?",
    "cypher": "MATCH (:Organization {name: 'Accenture'})-[:IN_CITY]->(c:City)<-[:IN_CITY]-(o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment IS NOT NULL RETURN avg(a.sentiment) AS average_article_sentiment",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_article_sentiment": NaN
      }
    ],
    "answer": "UNKNOWN\n\n(The query result shows a 'nan' (Not a Number) value, which indicates that no valid sentiment data was found for articles mentioning organizations in the same city as Accenture, preventing a definitive average sentiment calculation.)"
  },
  {
    "question": "Find the name of the least recent article that mentions IBM.",
    "cypher": "MATCH (a:Article)-[:MENTIONS]->(:Organization {name: 'IBM'}) WHERE a.date IS NOT NULL RETURN a.title AS oldest_article_title ORDER BY a.date ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "oldest_article_title": "Dassault Sys. & IBM Est. Korean CATIA Competency Center"
      }
    ],
    "answer": "The least recent article mentioning IBM is titled \"Dassault Sys. & IBM Est. Korean CATIA Competency Center\"."
  },
  {
    "question": "How many supply chain steps separate Oracle from IBM?",
    "cypher": "MATCH p = shortestPath((:Organization {name: 'Oracle'})-[:HAS_SUPPLIER*..5]-(:Organization {name: 'IBM'})) RETURN length(p) AS supply_chain_distance",
    "query_type": "Existence Verification",
    "complexity": "5-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supply_chain_distance": 1
      }
    ],
    "answer": "There is 1 supply chain step separating Oracle from IBM."
  },
  {
    "question": "What is the total revenue for all of Microsoft Corporations competitors suppliers?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(c)-[:HAS_SUPPLIER]->(s) WHERE s.revenue IS NOT NULL RETURN sum(s.revenue) AS total_supplier_revenue",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_supplier_revenue": 2735087777691.0
      }
    ],
    "answer": "The total revenue for all of Microsoft Corporation's competitors' suppliers is $2,735,087,777,691."
  },
  {
    "question": "What is the minimum number of employees for a subsidiary of a company located in Seattle?",
    "cypher": "MATCH (:City {name: 'Seattle'})<-[:IN_CITY]-(org)-[:HAS_SUBSIDIARY]->(sub) WHERE sub.nbrEmployees IS NOT NULL RETURN min(sub.nbrEmployees) AS min_subsidiary_employees",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "min_subsidiary_employees": 1
      }
    ],
    "answer": "The minimum number of employees for a subsidiary of a company located in Seattle is 1."
  },
  {
    "question": "How many different industry categories do the competitors of the IBM biz fall into?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) RETURN count(DISTINCT cat) AS competitor_category_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "competitor_category_count": 31
      }
    ],
    "answer": "Based on the query result, IBM's competitors span 31 different industry categories."
  },
  {
    "question": "Count the number of unique investors in companies that are suppliers to SAP's competitors.",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->()<-[:HAS_SUPPLIER]-(sup)<-[:HAS_INVESTOR]-(inv) RETURN count(DISTINCT inv) AS total_investors",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_investors": 875
      }
    ],
    "answer": "There are 875 unique investors in companies that are suppliers to SAP's competitors."
  },
  {
    "question": "Find the name of a person who is a board member of a company that is a supplier to Oracle.",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(s)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN p.name AS board_member_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "board_member_name": "Satya Nadella"
      }
    ],
    "answer": "Satya Nadella is a board member of a company that is a supplier to Oracle."
  },
  {
    "question": "What's the name of the public company with the least cash that is a supplier to IBM?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(s:Organization) WHERE s.isPublic = true AND s.revenue IS NOT NULL RETURN s.name AS lowest_revenue_public_supplier ORDER BY s.revenue ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "lowest_revenue_public_supplier": "VanceInfo Technologies"
      }
    ],
    "answer": "VanceInfo Technologies is the public company with the least cash that is a supplier to IBM."
  },
  {
    "question": "What is the average number of employees for suppliers of Mircosoft Corporation?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(s:Organization) WHERE s.nbrEmployees IS NOT NULL RETURN avg(s.nbrEmployees) AS avg_supplier_employees",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "avg_supplier_employees": 14181.43921568628
      }
    ],
    "answer": "Based on the query result, the average number of employees for suppliers of Microsoft Corporation is approximately 14,181 employees."
  },
  {
    "question": "An article mentioned IBM Research. What is the name of the country where a supplier of its parent company is located?",
    "cypher": "MATCH (:Organization {name: 'IBM Research'})<-[:HAS_SUBSIDIARY]-(parent)-[:HAS_SUPPLIER]->(supplier)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(country) RETURN country.name AS parent_supplier_country LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_supplier_country": "United States of America"
      }
    ],
    "answer": "United States of America"
  },
  {
    "question": "Among all companies located in the United States of America that have subsidiaries, what is the maximum revenue?",
    "cypher": "MATCH (:Country {name: 'United States of America'})<-[:IN_COUNTRY]-(:City)<-[:IN_CITY]-(org:Organization)-[:HAS_SUBSIDIARY]->() WHERE org.revenue IS NOT NULL RETURN max(org.revenue) AS max_revenue_us_parent_company",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "max_revenue_us_parent_company": 198270000000.0
      }
    ],
    "answer": "The maximum revenue among U.S. companies with subsidiaries is $198,270,000,000."
  },
  {
    "question": "Sum the number of employees of all organizations that are suppliers to companies in the 'Electronic Products Manufacturers' category.",
    "cypher": "MATCH (:IndustryCategory {name: 'Electronic Products Manufacturers'})<-[:HAS_CATEGORY]-(org)-[:HAS_SUPPLIER]->(sup) WHERE sup.nbrEmployees IS NOT NULL RETURN sum(sup.nbrEmployees) AS total_supplier_employees",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_supplier_employees": 20493176
      }
    ],
    "answer": "The total number of employees in suppliers to companies in the 'Electronic Products Manufacturers' category is 20,493,176."
  },
  {
    "question": "What is the industry name for one of SAPs competitors?",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(comp)-[:HAS_CATEGORY]->(cat) RETURN cat.name AS competitor_industry_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "competitor_industry_name": "Electronic Products Manufacturers"
      }
    ],
    "answer": "Electronic Products Manufacturers"
  },
  {
    "question": "Find the title of the article with the most positive sentiment that mentions Microsoft Corporation.",
    "cypher": "MATCH (a:Article)-[:MENTIONS]->(:Organization {name: 'Microsoft Corporation'}) WHERE a.sentiment IS NOT NULL RETURN a.title AS most_positive_article_title ORDER BY a.sentiment DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "most_positive_article_title": "Microsoft acquires LogicForce Partner Equivio"
      }
    ],
    "answer": "The article with the most positive sentiment that mentions Microsoft Corporation is \"Microsoft acquires LogicForce Partner Equivio\"."
  },
  {
    "question": "How many suppliers does Accenture share with its competitors?",
    "cypher": "MATCH (:Organization {name: 'Accenture'})-[:HAS_SUPPLIER]->(s), (:Organization {name: 'Accenture'})-[:HAS_COMPETITOR]->(c)-[:HAS_SUPPLIER]->(s) RETURN count(DISTINCT s) AS shared_supplier_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "shared_supplier_count": 95
      }
    ],
    "answer": "Accenture shares 95 suppliers with its competitors."
  },
  {
    "question": "Count the total number of board members on companies that are suppliers to competitors of Acenture.",
    "cypher": "MATCH (:Organization {name: 'Accenture'})-[:HAS_COMPETITOR]->(comp)-[:HAS_SUPPLIER]->(sup)-[:HAS_BOARD_MEMBER]->(p) RETURN count(DISTINCT p) AS total_board_members",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_board_members": 2377
      }
    ],
    "answer": "The total number of board members on companies that are suppliers to competitors of Accenture is 2,377."
  },
  {
    "question": "What is the name of the city where a company that has Oracle as a supplier is located?",
    "cypher": "MATCH (:Organization {name: 'Oracle'})<-[:HAS_SUPPLIER]-(org)-[:IN_CITY]->(c) RETURN c.name AS customer_city_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "customer_city_name": "Chennai"
      }
    ],
    "answer": "Chennai is the city where a company that has Oracle as a supplier is located."
  },
  {
    "question": "Find the name of the country where the subsidiary with the most workers for a competitor of IBM is located.",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(comp)-[:HAS_SUBSIDIARY]->(sub)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(country) WHERE sub.nbrEmployees IS NOT NULL RETURN country.name AS top_subsidiary_country ORDER BY sub.nbrEmployees DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "top_subsidiary_country": "India"
      }
    ],
    "answer": "India is the country where the subsidiary with the most workers for a competitor of IBM is located."
  },
  {
    "question": "What is the total number of employees for all of IBMs competitors subsidiaries?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(comp)-[:HAS_SUBSIDIARY]->(sub) WHERE sub.nbrEmployees IS NOT NULL RETURN sum(sub.nbrEmployees) AS total_employee_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_employee_count": 1266810
      }
    ],
    "answer": "Based on the query result, the total number of employees for all of IBM's competitors' subsidiaries is 1,266,810."
  },
  {
    "question": "What is the summary for the person who is the CEO of Accenture?",
    "cypher": "MATCH (:Organization {name: 'Accenture'})-[:HAS_CEO]->(p:Person) RETURN p.summary AS ceo_summary",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_summary": "CEO at Accenture"
      }
    ],
    "answer": "The summary for the CEO of Accenture is \"CEO at Accenture\"."
  },
  {
    "question": "Which supplier of Oracel has the lowest revenue? Return its name.",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(s:Organization) WHERE s.revenue IS NOT NULL RETURN s.name AS lowest_revenue_supplier ORDER BY s.revenue ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "lowest_revenue_supplier": "Hadean"
      }
    ],
    "answer": "Hadean is the Oracle supplier with the lowest revenue."
  },
  {
    "question": "Count how many distinct suppliers link Microsoft Corporation to Oracle.",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(m)<-[:HAS_SUPPLIER]-(:Organization {name: 'Oracle'}) RETURN count(DISTINCT m) AS bridge_companies_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "bridge_companies_count": 78
      }
    ],
    "answer": "There are 78 distinct suppliers that link Microsoft Corporation to Oracle."
  },
  {
    "question": "Count the number of firms that are competitors to SAP.",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(c) RETURN count(c) AS number_of_competitors",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_competitors": 18
      }
    ],
    "answer": "SAP has 18 competitors according to the data."
  },
  {
    "question": "What is the name of the CEO of a subsidiary of a supplier to Microsoft Corporation?",
    "cypher": "MATCH (:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(sup)-[:HAS_SUBSIDIARY]->(sub)-[:HAS_CEO]->(ceo) RETURN ceo.name AS ceo_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Christopher Lydiard-Wilson"
      }
    ],
    "answer": "The name of the CEO of a subsidiary of a supplier to Microsoft Corporation is Christopher Lydiard-Wilson."
  },
  {
    "question": "Whats the name of the city with the most number of employees for companys that are suppliers to IBM?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(s)-[:IN_CITY]->(c) WHERE s.nbrEmployees IS NOT NULL RETURN c.name AS city_with_most_employees ORDER BY s.nbrEmployees DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_with_most_employees": "S\u00e3o Leopoldo"
      }
    ],
    "answer": "S\u00e3o Leopoldo is the city with the most number of employees for companies that are suppliers to IBM."
  },
  {
    "question": "What is the total revenue of all companies located in Seattle that have a supplier relationship with IMB?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(s)-[:IN_CITY]->(:City {name: 'Seattle'}) WHERE s.revenue IS NOT NULL RETURN sum(s.revenue) AS total_revenue_of_seattle_suppliers",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_revenue_of_seattle_suppliers": 1861643000.0
      }
    ],
    "answer": "The total revenue of companies located in Seattle that have a supplier relationship with IBM is $1,861,643,000."
  },
  {
    "question": "Find the country for a biz that has a subsidiary which is a competitor to Oracle.",
    "cypher": "MATCH (:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(comp)<-[:HAS_SUBSIDIARY]-(parent)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(country) RETURN country.name AS parent_company_country LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "parent_company_country": "United States of America"
      }
    ],
    "answer": "The country of the parent company that has a subsidiary competing with Oracle is the United States of America."
  },
  {
    "question": "Which company that supplies SAP has the largest number of employees?",
    "cypher": "MATCH (:Organization {name: 'SAP'})-[:HAS_SUPPLIER]->(s:Organization) WHERE s.nbrEmployees IS NOT NULL RETURN s.name AS largest_supplier_name ORDER BY s.nbrEmployees DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "largest_supplier_name": "Tata Consultancy Services (TCS)"
      }
    ],
    "answer": "Based on the query result, Tata Consultancy Services (TCS) is the largest supplier of SAP by number of employees."
  },
  {
    "question": "How many distinct cities are home to subsidiaries of Accenture?",
    "cypher": "MATCH (:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub)-[:IN_CITY]->(c) RETURN count(DISTINCT c) AS subsidiary_city_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "subsidiary_city_count": 720
      }
    ],
    "answer": "Accenture has subsidiaries located in 720 distinct cities."
  },
  {
    "question": "How many subsidiaries does IBM have that are located in the United States of America?",
    "cypher": "MATCH (:Organization {name: 'IBM'})-[:HAS_SUBSIDIARY]->(sub)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(:Country {name: 'United States of America'}) RETURN count(DISTINCT sub) AS number_of_us_subsidiaries",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "number_of_us_subsidiaries": 195
      }
    ],
    "answer": "According to the query result, IBM has 195 subsidiaries located in the United States of America."
  },
  {
    "question": "What is the total revenue of all companies that are suppliers to IBM's competitors?",
    "cypher": "MATCH (o1:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(competitor)-[:HAS_SUPPLIER]->(supplier:Organization) WHERE supplier.revenue IS NOT NULL RETURN SUM(supplier.revenue) AS total_revenue",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_revenue": 4657189104756.0
      }
    ],
    "answer": "The total revenue of all companies that are suppliers to IBM's competitors is $4,657,189,104,756."
  },
  {
    "question": "Find the name of the CEO for a company that competes with SAP.",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(competitor)-[:HAS_CEO]->(p:Person) RETURN p.name AS ceo_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Satya Nadella"
      }
    ],
    "answer": "Based on the query result, the CEO of a company that competes with SAP is Satya Nadella."
  },
  {
    "question": "Which company that supplies Oracle has the highest number of employees?",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(supplier:Organization) WHERE supplier.nbrEmployees IS NOT NULL RETURN supplier.name AS supplier_name ORDER BY supplier.nbrEmployees DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_name": "Microsoft Corporation"
      }
    ],
    "answer": "Based on the query result, Microsoft Corporation is the supplier of Oracle with the highest number of employees."
  },
  {
    "question": "What is the shortest path length in the supply chain between 'Microsoft Corporation' and 'IBM'?",
    "cypher": "MATCH path = shortestPath((o1:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER|HAS_SUBSIDIARY*]-(o2:Organization {name: 'IBM'})) RETURN length(path) AS connection_length",
    "query_type": "Existence Verification",
    "complexity": "variable-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connection_length": 2
      }
    ],
    "answer": "The shortest path length between Microsoft Corporation and IBM in the supply chain is 2."
  },
  {
    "question": "How many distinct suppliers does Acenture's subsidiaries have?",
    "cypher": "MATCH (o:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub)-[:HAS_SUPPLIER]->(supplier:Organization) RETURN COUNT(DISTINCT supplier) AS num_suppliers",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "num_suppliers": 217
      }
    ],
    "answer": "Accenture's subsidiaries have 217 distinct suppliers."
  },
  {
    "question": "What's the motto of a firm that Julie Spelman Sweet is the CEO of?",
    "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'})<-[:HAS_CEO]-(o:Organization) RETURN o.motto AS company_motto LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo, colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "company_motto": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Find the name of the CEO of the competitor of IBM with the highest revenue.",
    "cypher": "MATCH (o:Organization {name: 'IBM'})-[:HAS_COMPETITOR]->(competitor)-[:HAS_CEO]->(p:Person) WHERE competitor.revenue IS NOT NULL RETURN p.name AS ceo_name ORDER BY competitor.revenue DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Satya Nadella"
      }
    ],
    "answer": "Based on the query result, the CEO of the competitor of IBM with the highest revenue is Satya Nadella."
  },
  {
    "question": "How many shared suppliers do Mircosoft Corporation and Oracle have?",
    "cypher": "MATCH (o1:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(supplier)<-[:HAS_SUPPLIER]-(o2:Organization {name: 'Oracle'}) RETURN COUNT(DISTINCT supplier) AS common_supplier_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "common_supplier_count": 78
      }
    ],
    "answer": "Microsoft Corporation and Oracle have 78 shared suppliers."
  },
  {
    "question": "What is the average number of employees for companies located in cities within the United States of America that supply IBM?",
    "cypher": "MATCH (c:Country {name: 'United States of America'})<-[:IN_COUNTRY]-(city:City)<-[:IN_CITY]-(supplier:Organization)-[:HAS_SUPPLIER]->(o:Organization {name: 'IBM'}) WHERE supplier.nbrEmployees IS NOT NULL RETURN avg(supplier.nbrEmployees) AS average_employees",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_employees": 84162.55357142857
      }
    ],
    "answer": "Based on the query result, the average number of employees for companies located in U.S. cities that supply IBM is approximately 84,163 employees."
  },
  {
    "question": "In which country is a subsidiary of a supplier to SAP located?",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_SUPPLIER]->(supplier)-[:HAS_SUBSIDIARY]->(sub)-[:IN_CITY]->(city)-[:IN_COUNTRY]->(country:Country) RETURN country.name AS country_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "country_name": "United States of America"
      }
    ],
    "answer": "A subsidiary of a supplier to SAP is located in the United States of America."
  },
  {
    "question": "What's the smallest revenue among all subsidiaries of Microsoft Corporation's competitors?",
    "cypher": "MATCH (msft:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(comp)-[:HAS_SUBSIDIARY]->(sub) WHERE sub.revenue IS NOT NULL RETURN MIN(sub.revenue) AS lowest_revenue",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "lowest_revenue": 296456000.0
      }
    ],
    "answer": "The smallest revenue among all subsidiaries of Microsoft Corporation's competitors is $296,456,000."
  },
  {
    "question": "How many people are on the board of a company that is also an investor in SAP?",
    "cypher": "MATCH (o1:Organization {name: 'SAP'})<-[:HAS_INVESTOR]-(investor_org:Organization)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN COUNT(DISTINCT p) AS board_member_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "board_member_count": 0
      }
    ],
    "answer": "Based on the query result, there are 0 people on the board of a company that is also an investor in SAP."
  },
  {
    "question": "Count the number of companys that supply a subsidiary of Accenture.",
    "cypher": "MATCH (o:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub)-[:HAS_SUPPLIER]->(supplier:Organization) RETURN COUNT(DISTINCT supplier) AS total_suppliers",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_suppliers": 217
      }
    ],
    "answer": "217 companies supply a subsidiary of Accenture."
  },
  {
    "question": "What's the name of the city where a supplier to Oracl is located?",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(supplier)-[:IN_CITY]->(c:City) RETURN c.name AS city_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_name": "Seattle"
      }
    ],
    "answer": "Seattle is the city where a supplier to Oracle is located."
  },
  {
    "question": "What is the name of the company with the smallest workforce among all firms that supply Accenture?",
    "cypher": "MATCH (o:Organization {name: 'Accenture'})-[:HAS_SUPPLIER]->(supplier:Organization) WHERE supplier.nbrEmployees IS NOT NULL RETURN supplier.name AS company_name ORDER BY supplier.nbrEmployees ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "company_name": "Edcast"
      }
    ],
    "answer": "Edcast is the name of the company with the smallest workforce among Accenture's suppliers."
  },
  {
    "question": "What's the total number of board members for companies that are competitors to Oracle?",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(competitor)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN COUNT(DISTINCT p) AS total_board_members",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_board_members": 176
      }
    ],
    "answer": "Based on the query result, Oracle's competitor companies have a total of 176 distinct board members."
  },
  {
    "question": "Give me the industry name for a subsidiary of a supplier to Mircosoft Corporation.",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(supplier)-[:HAS_SUBSIDIARY]->(sub)-[:HAS_CATEGORY]->(cat:IndustryCategory) RETURN cat.name AS industry_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "industry_name": "Electronic Products Manufacturers"
      }
    ],
    "answer": "Electronic Products Manufacturers"
  },
  {
    "question": "What is the maximum number of employees for a company that is a supplier to a subsidiary of SAP?",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub)-[:HAS_SUPPLIER]->(supplier:Organization) WHERE supplier.nbrEmployees IS NOT NULL RETURN MAX(supplier.nbrEmployees) AS max_employees",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "max_employees": 111961
      }
    ],
    "answer": "The maximum number of employees for a company that is a supplier to a subsidiary of SAP is 111,961."
  },
  {
    "question": "What is the total revenue of all subsidiaries of companies located in Seattle?",
    "cypher": "MATCH (c:City {name: 'Seattle'})<-[:IN_CITY]-(o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.revenue IS NOT NULL RETURN SUM(sub.revenue) AS total_subsidiary_revenue",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_subsidiary_revenue": 77027443256.0
      }
    ],
    "answer": "The total revenue of all subsidiaries of companies located in Seattle is $77,027,443,256."
  },
  {
    "question": "What is the name of the CEO of the company with the most employees among the competitors of Microsoft Corporation?",
    "cypher": "MATCH (msft:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(comp)-[:HAS_CEO]->(ceo:Person) WHERE comp.nbrEmployees IS NOT NULL RETURN ceo.name AS ceo_name ORDER BY comp.nbrEmployees DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Christian Klein"
      }
    ],
    "answer": "According to the query result, the CEO of the company with the most employees among Microsoft's competitors is Christian Klein."
  },
  {
    "question": "How many cities in the United States of Amercia host subsidiaries of SAP?",
    "cypher": "MATCH (country:Country {name: 'United States of America'})<-[:IN_COUNTRY]-(city:City)<-[:IN_CITY]-(org:Organization)<-[:HAS_SUBSIDIARY]-(parent:Organization {name: 'SAP'}) RETURN COUNT(DISTINCT city) AS city_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_count": 83
      }
    ],
    "answer": "83 cities in the United States host subsidiaries of SAP."
  },
  {
    "question": "Calculate the average revenue for suppliers of Oracle's competitors.",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(competitor)-[:HAS_SUPPLIER]->(supplier:Organization) WHERE supplier.revenue IS NOT NULL RETURN avg(supplier.revenue) AS average_revenue",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_revenue": 5787170323.105009
      }
    ],
    "answer": "Based on the query result, the average revenue for suppliers of Oracle's competitors is approximately $5.79 billion."
  },
  {
    "question": "What's the title of an article mentioning a subsidiary of IBM?",
    "cypher": "MATCH (o:Organization {name: 'IBM'})-[:HAS_SUBSIDIARY]->(sub)<-[:MENTIONS]-(a:Article) RETURN a.title AS article_title LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "article_title": "Amazon Web Services: AWS Managed Services"
      }
    ],
    "answer": "An article titled \"Amazon Web Services: AWS Managed Services\" mentions a subsidiary of IBM."
  },
  {
    "question": "Find the motto of the supplier to Oracle with the fewest staff.",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(supplier:Organization) WHERE supplier.nbrEmployees IS NOT NULL RETURN supplier.motto AS company_motto ORDER BY supplier.nbrEmployees ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "company_motto": ""
      }
    ],
    "answer": "UNKNOWN\n\nThe query returned an empty motto, which does not provide a meaningful answer to the question about the supplier's motto."
  },
  {
    "question": "How many distinct supply chain links (supplier or subsidiary) are there between IBM and Oracle?",
    "cypher": "MATCH path = (o1:Organization {name: 'IBM'})-[:HAS_SUPPLIER|HAS_SUBSIDIARY]-(o2:Organization {name: 'Oracle'}) RETURN COUNT(path) AS connection_count",
    "query_type": "Existence Verification",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "connection_count": 1
      }
    ],
    "answer": "Based on the query result, there is 1 distinct supply chain link (either supplier or subsidiary) between IBM and Oracle."
  },
  {
    "question": "How many distinct people are either a CEO or a board member of SAP?",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_BOARD_MEMBER|HAS_CEO]->(p:Person) RETURN COUNT(DISTINCT p) AS leadership_count",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "leadership_count": 15
      }
    ],
    "answer": "Based on the query result, there are 15 distinct people who are either a CEO or a board member of SAP."
  },
  {
    "question": "What is the industry category for a biz that supplies a competitor of Microsoft Corporation?",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'})-[:HAS_COMPETITOR]->(competitor)-[:HAS_SUPPLIER]->(supplier)-[:HAS_CATEGORY]->(cat:IndustryCategory) RETURN cat.name AS industry_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "industry_name": "Electronic Products Manufacturers"
      }
    ],
    "answer": "The industry category for a business that supplies a competitor of Microsoft Corporation is Electronic Products Manufacturers."
  },
  {
    "question": "What's the lowest revenue among companies that have Julie Spellman Sweet as a board member and are located in a city in the United States of America?",
    "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'})<-[:HAS_BOARD_MEMBER]-(o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country {name: 'United States of America'}) WHERE o.revenue IS NOT NULL RETURN MIN(o.revenue) AS lowest_revenue",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "lowest_revenue": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returned None, which suggests that either there are no companies matching the criteria or the revenue data is not available for these companies."
  },
  {
    "question": "Count the number of CEOs who lead companys that are suppliers to firms competing with SAP.",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(competitor)<-[:HAS_SUPPLIER]-(supplier)-[:HAS_CEO]->(ceo:Person) RETURN COUNT(DISTINCT ceo) AS ceo_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "grammar, colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_count": 280
      }
    ],
    "answer": "There are 280 CEOs who lead companies that are suppliers to firms competing with SAP."
  },
  {
    "question": "What is the total number of employees for all of IBM's suppliers' subsidiaries?",
    "cypher": "MATCH (o:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(supplier)-[:HAS_SUBSIDIARY]->(sub:Organization) WHERE sub.nbrEmployees IS NOT NULL RETURN SUM(sub.nbrEmployees) AS total_employees",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_employees": 333464
      }
    ],
    "answer": "The total number of employees for all of IBM's suppliers' subsidiaries is 333,464."
  },
  {
    "question": "What is the name of the CEO of a company that is a supplier to a subsidiary of Accenture?",
    "cypher": "MATCH (o:Organization {name: 'Accenture'})-[:HAS_SUBSIDIARY]->(sub)-[:HAS_SUPPLIER]->(supplier)-[:HAS_CEO]->(p:Person) RETURN p.name AS ceo_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Cali Tran"
      }
    ],
    "answer": "Based on the query result, the CEO of a company that is a supplier to a subsidiary of Accenture is Cali Tran."
  },
  {
    "question": "What is the name of the person who is the CEO of the subsidiary of SAP with the highest revenue?",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_SUBSIDIARY]->(sub)-[:HAS_CEO]->(p:Person) WHERE sub.revenue IS NOT NULL RETURN p.name AS ceo_name ORDER BY sub.revenue DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_name": "Punit Renjen"
      }
    ],
    "answer": "Punit Renjen is the CEO of the highest-revenue subsidiary of SAP."
  },
  {
    "question": "How many common investors (people or orgs) do IBM and Oracl have?",
    "cypher": "MATCH (o1:Organization {name: 'IBM'})<-[:HAS_INVESTOR]-(investor)-[:HAS_INVESTOR]->(o2:Organization {name: 'Oracle'}) RETURN COUNT(DISTINCT investor) AS common_investor_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "common_investor_count": 0
      }
    ],
    "answer": "Based on the query result, IBM and Oracle have 0 common investors."
  },
  {
    "question": "What is the maximum revenue of any company that has Julie Spelman Sweet as a board member or CEO?",
    "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'})<-[:HAS_BOARD_MEMBER|HAS_CEO]-(o:Organization) WHERE o.revenue IS NOT NULL RETURN MAX(o.revenue) AS max_revenue",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "max_revenue": null
      }
    ],
    "answer": "UNKNOWN"
  },
  {
    "question": "Which city is home to a firm that is a supplier to a company that Julie Spellman Sweet is the CEO of?",
    "cypher": "MATCH (p:Person {name: 'Julie Spellman Sweet'})<-[:HAS_CEO]-(company)-[:HAS_SUPPLIER]->(supplier)-[:IN_CITY]->(city:City) RETURN city.name AS city_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism, typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_name": "Melbourne"
      }
    ],
    "answer": "Melbourne is the city home to a supplier of the company where Julie Spellman Sweet is the CEO."
  },
  {
    "question": "What's the name of the most recently mentioned supplier of IBM in any article?",
    "cypher": "MATCH (o:Organization {name: 'IBM'})-[:HAS_SUPPLIER]->(supplier)<-[:MENTIONS]-(a:Article) WHERE a.date IS NOT NULL RETURN supplier.name AS supplier_name ORDER BY a.date DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammar",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "supplier_name": "Blackstone"
      }
    ],
    "answer": "Blackstone is the most recently mentioned supplier of IBM in an article."
  },
  {
    "question": "What's the average sentiment of articles that mention suppliers of Microsoft Corporation?",
    "cypher": "MATCH (msft:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(supplier)<-[:MENTIONS]-(a:Article) WHERE a.sentiment IS NOT NULL RETURN avg(a.sentiment) AS average_sentiment",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "average_sentiment": NaN
      }
    ],
    "answer": "UNKNOWN\n\nExplanation: The query result returned 'nan' (Not a Number), which suggests there might be no valid sentiment data for articles mentioning Microsoft's suppliers, or there might be an issue with the data retrieval."
  },
  {
    "question": "Get the summary for the CEO of a company that competes with Oracle.",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_COMPETITOR]->(competitor)-[:HAS_CEO]->(p:Person) RETURN p.summary AS ceo_summary LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "ceo_summary": "Indian American business executive and CEO of Microsoft"
      }
    ],
    "answer": "The CEO of a company competing with Oracle is a Microsoft executive who is an Indian American business leader."
  },
  {
    "question": "What is the highest revenue found among companies located in Seattle that are also suppliers to IBM?",
    "cypher": "MATCH (c:City {name: 'Seattle'})<-[:IN_CITY]-(supplier:Organization)-[:HAS_SUPPLIER]->(o:Organization {name: 'IBM'}) WHERE supplier.revenue IS NOT NULL RETURN MAX(supplier.revenue) AS highest_revenue",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "highest_revenue": 1362379000.0
      }
    ],
    "answer": "The highest revenue among companies located in Seattle that are suppliers to IBM is $1,362,379,000."
  },
  {
    "question": "How many organizational investors connect 'Infinite Analytics' to 'IBM' through a subsidiary chain?",
    "cypher": "MATCH (ia:Organization {name: 'Infinite Analytics'})<-[:HAS_INVESTOR]-(investor:Organization)-[:HAS_SUBSIDIARY*]->(ibm_sub)-[:HAS_SUBSIDIARY]->(ibm:Organization {name: 'IBM'}) RETURN COUNT(DISTINCT investor) AS investor_count",
    "query_type": "Existence Verification",
    "complexity": "variable-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "investor_count": 0
      }
    ],
    "answer": "Based on the query result, there are 0 organizational investors that connect 'Infinite Analytics' to 'IBM' through a subsidiary chain."
  },
  {
    "question": "Count the number of distinct industry categories associated with suppliers of Microsoft Corporation.",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(supplier)-[:HAS_CATEGORY]->(cat:IndustryCategory) RETURN COUNT(DISTINCT cat) AS num_categories",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "num_categories": 184
      }
    ],
    "answer": "Microsoft Corporation has suppliers from 184 distinct industry categories."
  },
  {
    "question": "Find the country name for a biz that is a subsidiary of a competitor to SAP.",
    "cypher": "MATCH (o:Organization {name: 'SAP'})-[:HAS_COMPETITOR]->(competitor)-[:HAS_SUBSIDIARY]->(sub)-[:IN_CITY]->(city)-[:IN_COUNTRY]->(country) RETURN country.name AS country_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "5-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "country_name": "United States of America"
      }
    ],
    "answer": "A subsidiary of a competitor to SAP is located in the United States of America."
  },
  {
    "question": "Which city, that hosts a supplier to Oracle, is in the country with the longest name?",
    "cypher": "MATCH (o:Organization {name: 'Oracle'})-[:HAS_SUPPLIER]->(supplier)-[:IN_CITY]->(city)-[:IN_COUNTRY]->(country) WHERE country.name IS NOT NULL RETURN city.name AS city_name ORDER BY size(country.name) DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "city_name": "Zhengzhou"
      }
    ],
    "answer": "Zhengzhou is the city that hosts a supplier to Oracle and is in the country with the longest name."
  },
  {
    "question": "How many distinct companies act as both a supplier to IBM and a competitor to Oracl?",
    "cypher": "MATCH (o1:Organization {name: 'IBM'})<-[:HAS_SUPPLIER]-(c:Organization)-[:HAS_COMPETITOR]->(o2:Organization {name: 'Oracle'}) RETURN COUNT(DISTINCT c) AS bridge_company_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "bridge_company_count": 3
      }
    ],
    "answer": "3 distinct companies act as both a supplier to IBM and a competitor to Oracle."
  },
  {
    "question": "Sum the employee count for all public companies that are suppliers to Microsoft Corp.",
    "cypher": "MATCH (o:Organization {name: 'Microsoft Corporation'})-[:HAS_SUPPLIER]->(supplier:Organization) WHERE supplier.isPublic = true AND supplier.nbrEmployees IS NOT NULL RETURN SUM(supplier.nbrEmployees) AS total_public_employees",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "companies",
    "validated": true,
    "result": [
      {
        "total_public_employees": 3257088
      }
    ],
    "answer": "Based on the query result, the total number of employees for public companies that are suppliers to Microsoft Corporation is 3,257,088."
  },
  {
    "question": "How many followers does the streamer spiukbs have?",
    "cypher": "MATCH (s:Stream {name: 'spiukbs'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 159814
      }
    ],
    "answer": "The streamer spiukbs has 159,814 followers."
  },
  {
    "question": "What is the total view count for the itsbigchase channel?",
    "cypher": "MATCH (s:Stream {name: 'itsbigchase'}) RETURN s.total_view_count AS total_views",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 569603
      }
    ],
    "answer": "The total view count for the itsbigchase channel is 569,603 views."
  },
  {
    "question": "Show me the URL for luckyghost's stream.",
    "cypher": "MATCH (s:Stream {name: 'luckyghost'}) RETURN s.url AS stream_url",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_url": "https://www.twitch.tv/luckyghost"
      }
    ],
    "answer": "The URL for luckyghost's stream is https://www.twitch.tv/luckyghost."
  },
  {
    "question": "Can you give me the description for the streamer anaseu?",
    "cypher": "MATCH (s:Stream {name: 'anaseu'}) RETURN s.description AS stream_description",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": "Anas is a professional Fortnite player for Guild Esports. On his streams you can watch him practice and play tournaments. "
      }
    ],
    "answer": "Anaseu is a professional Fortnite player for Guild Esports. On his streams, viewers can watch him practice and play tournaments."
  },
  {
    "question": "How many subs does the streamer spuikbs have?",
    "cypher": "MATCH (s:Stream {name: 'spiukbs'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo, colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 159814
      }
    ],
    "answer": "The streamer spuikbs has 159,814 followers."
  },
  {
    "question": "What's the total number of views for the itsbigchse channel?",
    "cypher": "MATCH (s:Stream {name: 'itsbigchase'}) RETURN s.total_view_count AS total_views",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo, colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 569603
      }
    ],
    "answer": "The total number of views for the itsbigchse channel is 569,603."
  },
  {
    "question": "Find the URL for the luckygost stream.",
    "cypher": "MATCH (s:Stream {name: 'luckyghost'}) RETURN s.url AS stream_url",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_url": "https://www.twitch.tv/luckyghost"
      }
    ],
    "answer": "The URL for the luckygost stream is https://www.twitch.tv/luckyghost."
  },
  {
    "question": "Tell me the description for the streamer anaseu.",
    "cypher": "MATCH (s:Stream {name: 'anaseu'}) RETURN s.description AS stream_description",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": "Anas is a professional Fortnite player for Guild Esports. On his streams you can watch him practice and play tournaments. "
      }
    ],
    "answer": "Anas is a professional Fortnite player for Guild Esports. On his streams you can watch him practice and play tournaments."
  },
  {
    "question": "How many followers does the streamer '9linda' have?",
    "cypher": "MATCH (s:Stream {name: '9linda'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 5272
      }
    ],
    "answer": "The streamer '9linda' has 5,272 followers."
  },
  {
    "question": "What are the total views for syna's channel?",
    "cypher": "MATCH (s:Stream {name: 'syna'}) RETURN s.total_view_count AS total_views",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 2547860
      }
    ],
    "answer": "Syna's channel has a total of 2,547,860 views."
  },
  {
    "question": "What is the URL for the 'cacarov' stream?",
    "cypher": "MATCH (s:Stream {name: 'cacarov'}) RETURN s.url AS stream_url",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_url": "https://www.twitch.tv/cacarov"
      }
    ],
    "answer": "The URL for the 'cacarov' stream is https://www.twitch.tv/cacarov."
  },
  {
    "question": "Give me the channel description for 'fengrush'.",
    "cypher": "MATCH (s:Stream {name: 'fengrush'}) RETURN s.description AS stream_description",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": "Lord FENGRUSH - a living legend."
      }
    ],
    "answer": "Lord FENGRUSH - a living legend."
  },
  {
    "question": "Total follower count for agustabell212?",
    "cypher": "MATCH (s:Stream {name: 'agustabell212'}) RETURN s.followers AS follower_count",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "follower_count": 58208
      }
    ],
    "answer": "The total follower count for agustabell212 is 58,208."
  },
  {
    "question": "How many people watch deshplease in total?",
    "cypher": "MATCH (s:Stream {name: 'deshplease'}) RETURN s.total_view_count AS total_views",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 1594957
      }
    ],
    "answer": "Based on the query result, deshplease has a total of 1,594,957 views."
  },
  {
    "question": "What's the url for pavagagg's stream?",
    "cypher": "MATCH (s:Stream {name: 'pavagagg'}) RETURN s.url AS stream_url",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_url": "https://www.twitch.tv/pavagagg"
      }
    ],
    "answer": "https://www.twitch.tv/pavagagg"
  },
  {
    "question": "Check if a streamer named 'ninja614' exists.",
    "cypher": "MATCH (s:Stream {name: 'ninja614'}) RETURN count(s) AS existence_check",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "existence_check": 1
      }
    ],
    "answer": "Yes, a streamer named 'ninja614' exists in the database."
  },
  {
    "question": "Does a user named rubiz exist in the system?",
    "cypher": "MATCH (u:User {name: 'rubiz'}) RETURN count(u) AS existence_check",
    "query_type": "Direct Property Access",
    "complexity": "0-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "existence_check": 1
      }
    ],
    "answer": "Yes, a user named rubiz exists in the system, as the query result shows a count of 1 for the user."
  },
  {
    "question": "What game does the streamer 9linda play?",
    "cypher": "MATCH (:Stream {name: '9linda'})-[:PLAYS]->(g:Game) RETURN g.name AS game_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Rust"
      }
    ],
    "answer": "9linda plays Rust."
  },
  {
    "question": "What is the primary language for the 'pavagagg' stream?",
    "cypher": "MATCH (:Stream {name: 'pavagagg'})-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS language_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "ru"
      }
    ],
    "answer": "The primary language for the 'pavagagg' stream is Russian (ru)."
  },
  {
    "question": "Count the number of moderators for the 'syna' channel.",
    "cypher": "MATCH (:User)-[:MODERATOR]->(s:Stream {name: 'syna'}) RETURN count(*) AS moderator_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 20
      }
    ],
    "answer": "The 'syna' channel has 20 moderators."
  },
  {
    "question": "How many streams does the user 'imcoma' moderate?",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream) RETURN count(s) AS moderated_streams_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderated_streams_count": 1
      }
    ],
    "answer": "The user 'imcoma' moderates 1 stream."
  },
  {
    "question": "How many different games does itsbigchase play?",
    "cypher": "MATCH (:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game) RETURN count(g) AS total_games",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_games": 1
      }
    ],
    "answer": "Based on the query result, itsbigchase plays 1 different game."
  },
  {
    "question": "How many VIPs does the anaseu channel have?",
    "cypher": "MATCH (u:User)-[:VIP]->(s:Stream {name: 'anaseu'}) RETURN count(u) AS vip_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "vip_count": 0
      }
    ],
    "answer": "The anaseu channel has 0 VIPs."
  },
  {
    "question": "What game title does the streamer 9linda play?",
    "cypher": "MATCH (:Stream {name: '9linda'})-[:PLAYS]->(g:Game) RETURN g.name AS game_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Rust"
      }
    ],
    "answer": "The streamer 9linda plays Rust."
  },
  {
    "question": "Which language is the 'pavagag' stream in?",
    "cypher": "MATCH (:Stream {name: 'pavagagg'})-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS language_name",
    "query_type": "Single-hop Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "ru"
      }
    ],
    "answer": "The 'pavagag' stream is in Russian (ru)."
  },
  {
    "question": "How many mods for the 'syna' channel?",
    "cypher": "MATCH (:User)-[:MODERATOR]->(s:Stream {name: 'syna'}) RETURN count(*) AS moderator_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 20
      }
    ],
    "answer": "There are 20 mods for the 'syna' channel."
  },
  {
    "question": "Count the streams 'imcoma' is a mod for.",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream) RETURN count(s) AS moderated_streams_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderated_streams_count": 1
      }
    ],
    "answer": "imcoma moderates 1 stream."
  },
  {
    "question": "How many chatters are in the 'spiukbs' stream?",
    "cypher": "MATCH (u:User)-[:CHATTER]->(s:Stream {name: 'spiukbs'}) RETURN count(u) AS chatter_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "chatter_count": 1136
      }
    ],
    "answer": "There are 1,136 chatters in the 'spiukbs' stream."
  },
  {
    "question": "How many viewers are in the 'spuikbs' stream?",
    "cypher": "MATCH (u:User)-[:CHATTER]->(s:Stream {name: 'spiukbs'}) RETURN count(u) AS chatter_count",
    "query_type": "Single-hop Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo, colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "chatter_count": 1136
      }
    ],
    "answer": "There are 1,136 viewers in the 'spuikbs' stream."
  },
  {
    "question": "Which game is played on the stream that 'imcoma' moderates?",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) RETURN g.name AS game_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Rust"
      }
    ],
    "answer": "The game played on the stream that 'imcoma' moderates is Rust."
  },
  {
    "question": "What is the language of the stream where 'haraldinho_' is a moderator?",
    "cypher": "MATCH (:User {name: 'haraldinho_'})-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS language_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "en"
      }
    ],
    "answer": "The language of the stream where 'haraldinho_' is a moderator is English (en)."
  },
  {
    "question": "Find the name of a game played by a streamer on the 'ESO Stream Team'.",
    "cypher": "MATCH (:Team {name: 'ESO Stream Team'})<-[:HAS_TEAM]-(s:Stream)-[:PLAYS]->(g:Game) RETURN g.name AS game_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "The Elder Scrolls Online"
      }
    ],
    "answer": "The Elder Scrolls Online is a game played by a streamer on the 'ESO Stream Team'."
  },
  {
    "question": "How many unique users chat in streams that play 'Rust'?",
    "cypher": "MATCH (g:Game {name: 'Rust'})<-[:PLAYS]-(s:Stream)<-[:CHATTER]-(u:User) RETURN count(DISTINCT u) AS unique_chatters",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "unique_chatters": 295672
      }
    ],
    "answer": "295,672 unique users chat in streams that play Rust."
  },
  {
    "question": "What game is played on the stream that 'imcoma' is a mod for?",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) RETURN g.name AS game_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Rust"
      }
    ],
    "answer": "Rust is the game played on the stream where 'imcoma' is a moderator."
  },
  {
    "question": "What language is used on the stream 'haraldino_' moderates?",
    "cypher": "MATCH (:User {name: 'haraldinho_'})-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS language_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "en"
      }
    ],
    "answer": "The language used on the stream 'haraldino_' moderates is English (en)."
  },
  {
    "question": "Name one title played by a streamer from 'ESO Stream Team'.",
    "cypher": "MATCH (:Team {name: 'ESO Stream Team'})<-[:HAS_TEAM]-(s:Stream)-[:PLAYS]->(g:Game) RETURN g.name AS game_name LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "The Elder Scrolls Online"
      }
    ],
    "answer": "The Elder Scrolls Online"
  },
  {
    "question": "How many people chat in channels playing Rast?",
    "cypher": "MATCH (g:Game {name: 'Rust'})<-[:PLAYS]-(s:Stream)<-[:CHATTER]-(u:User) RETURN count(DISTINCT u) AS unique_chatters",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo, colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "unique_chatters": 295672
      }
    ],
    "answer": "295,672 people chat in channels playing Rust."
  },
  {
    "question": "What is the highest number of followers for a stream that plays 'Rust'?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) WHERE s.followers IS NOT NULL RETURN max(s.followers) AS max_followers",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "max_followers": 754330
      }
    ],
    "answer": "The highest number of followers for a stream playing 'Rust' is 754,330."
  },
  {
    "question": "Find the total view count of the stream moderated by user 'rubiz'.",
    "cypher": "MATCH (:User {name: 'rubiz'})-[:MODERATOR]->(s:Stream) RETURN s.total_view_count AS moderated_stream_views",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderated_stream_views": 1417895
      }
    ],
    "answer": "The total view count of the stream moderated by user 'rubiz' is 1,417,895 views."
  },
  {
    "question": "What's the name of the most followed streamer in the 'ESO Stream Team'?",
    "cypher": "MATCH (t:Team {name: 'ESO Stream Team'})<-[:HAS_TEAM]-(s:Stream) WHERE s.followers IS NOT NULL RETURN s.name AS top_streamer_name ORDER BY s.followers DESC LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_streamer_name": "fextralife"
      }
    ],
    "answer": "According to the data, the most followed streamer in the 'ESO Stream Team' is fextralife."
  },
  {
    "question": "How many moderators does the stream with the highest total view count have?",
    "cypher": "MATCH (s:Stream) WHERE s.total_view_count IS NOT NULL WITH s ORDER BY s.total_view_count DESC LIMIT 1 MATCH (u:User)-[:MODERATOR]->(s) RETURN count(u) AS moderator_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 7
      }
    ],
    "answer": "The stream with the highest total view count has 7 moderators."
  },
  {
    "question": "What's the highest follower count for any streamer playing Rast?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) WHERE s.followers IS NOT NULL RETURN max(s.followers) AS max_followers",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo, colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "max_followers": 754330
      }
    ],
    "answer": "The highest follower count for a streamer playing Rust is 754,330 followers."
  },
  {
    "question": "Total views for the stream that 'rubiz' is a mod for?",
    "cypher": "MATCH (:User {name: 'rubiz'})-[:MODERATOR]->(s:Stream) RETURN s.total_view_count AS moderated_stream_views",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderated_stream_views": 1417895
      }
    ],
    "answer": "The stream that 'rubiz' is a mod for has 1,417,895 total views."
  },
  {
    "question": "Name of the top streamer on the 'ESO Stream Team' by followers.",
    "cypher": "MATCH (t:Team {name: 'ESO Stream Team'})<-[:HAS_TEAM]-(s:Stream) WHERE s.followers IS NOT NULL RETURN s.name AS top_streamer_name ORDER BY s.followers DESC LIMIT 1",
    "query_type": "Two-hop Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_streamer_name": "fextralife"
      }
    ],
    "answer": "The top streamer on the 'ESO Stream Team' by followers is fextralife."
  },
  {
    "question": "Count the mods for the most viewed stream.",
    "cypher": "MATCH (s:Stream) WHERE s.total_view_count IS NOT NULL WITH s ORDER BY s.total_view_count DESC LIMIT 1 MATCH (u:User)-[:MODERATOR]->(s) RETURN count(u) AS moderator_count",
    "query_type": "Two-hop Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 7
      }
    ],
    "answer": "The most viewed stream has 7 moderators."
  },
  {
    "question": "How many unique games are played on streams that the user 'imcoma' moderates?",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) RETURN count(DISTINCT g) AS num_games",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_games": 1
      }
    ],
    "answer": "1 unique game is played on streams that the user 'imcoma' moderates."
  },
  {
    "question": "What is the name of the game played by the stream '9linda' which is moderated by a user who also moderates 'syna's stream?",
    "cypher": "MATCH (s1:Stream {name: 'syna'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream {name: '9linda'})-[:PLAYS]->(g:Game) RETURN g.name AS game_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Rust"
      }
    ],
    "answer": "The game played by the stream '9linda' is Rust."
  },
  {
    "question": "Find the highest follower count for any English language stream that plays the same game as 'itsbigchase'.",
    "cypher": "MATCH (:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) WHERE s.followers IS NOT NULL RETURN max(s.followers) AS highest_follower_count",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "highest_follower_count": 754330
      }
    ],
    "answer": "The highest follower count for an English language stream playing the same game as 'itsbigchase' is 754,330 followers."
  },
  {
    "question": "How many chatters connect the user 'business_daddy' to the 'ESO Stream Team'?",
    "cypher": "MATCH (:User {name: 'business_daddy'})-[:CHATTER]->(s1:Stream)<-[:MODERATOR]-(s2:Stream)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}) RETURN count(DISTINCT s1) AS connecting_chatter_streams",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connecting_chatter_streams": 0
      }
    ],
    "answer": "Based on the query result, there are 0 chatters connecting the user 'business_daddy' to the 'ESO Stream Team'."
  },
  {
    "question": "What's the total view count for all streams that are part of the 'ESO Sream Team'?",
    "cypher": "MATCH (s:Stream)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}) RETURN sum(s.total_view_count) AS total_views",
    "query_type": "Aggregation",
    "complexity": "1-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 1561603359
      }
    ],
    "answer": "The total view count for all streams in the 'ESO Stream Team' is 1,561,603,359 views."
  },
  {
    "question": "What's the language of the stream with the most followers that 'haraldinho_' is a moderator for?",
    "cypher": "MATCH (:User {name: 'haraldinho_'})-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.followers IS NOT NULL RETURN l.name AS top_stream_language ORDER BY s.followers DESC LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_stream_language": "en"
      }
    ],
    "answer": "The language of the stream with the most followers that 'haraldinho_' moderates is English (en)."
  },
  {
    "question": "Which game is played on the stream with the lowest total view count that 'soydas06' acts as a moderator for?",
    "cypher": "MATCH (:User {name: 'soydas06'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) WHERE s.total_view_count IS NOT NULL RETURN g.name AS game_on_least_viewed_stream ORDER BY s.total_view_count ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_on_least_viewed_stream": "Grand Theft Auto V"
      }
    ],
    "answer": "Grand Theft Auto V is the game played on the stream with the lowest total view count where 'soydas06' is a moderator."
  },
  {
    "question": "Count the number of unique users who are VIPs in streams that play 'Rust'.",
    "cypher": "MATCH (u:User)-[:VIP]->(s:Stream)-[:PLAYS]->(g:Game {name: 'Rust'}) RETURN count(DISTINCT u) AS total_vips_for_game",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_vips_for_game": 199
      }
    ],
    "answer": "199 unique VIP users are streaming the game Rust."
  },
  {
    "question": "What is the name of the user with the most followers who chats in a stream moderated by imcoma?",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s1:Stream)<-[:CHATTER]-(u:User) WHERE u.followers IS NOT NULL RETURN u.name AS top_chatter_name ORDER BY u.followers DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_chatter_name": "pestily"
      }
    ],
    "answer": "The user with the most followers who chats in a stream moderated by imcoma is pestily."
  },
  {
    "question": "How many streams are moderated by users who are VIPs on the 'anaseu' channel?",
    "cypher": "MATCH (:Stream {name: 'anaseu'})<-[:VIP]-(u:User)-[:MODERATOR]->(s:Stream) RETURN count(DISTINCT s) AS moderated_stream_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderated_stream_count": 0
      }
    ],
    "answer": "0 streams are moderated by VIP users on the 'anaseu' channel."
  },
  {
    "question": "What is the average number of followers for streams in Russian that play the same game as '9linda'?",
    "cypher": "MATCH (:Stream {name: '9linda'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'ru'}) RETURN avg(s.followers) AS average_followers",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_followers": 17623.5
      }
    ],
    "answer": "The average number of followers for Russian streams playing the same game as '9linda' is 17,624."
  },
  {
    "question": "Tell me the description of the stream 'deshplease', where 'business_daddy' is a chatter.",
    "cypher": "MATCH (:User {name: 'business_daddy'})-[:CHATTER]->(s:Stream {name: 'deshplease'}) RETURN s.description AS stream_description",
    "query_type": "Property Retrieval",
    "complexity": "1-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_description": "Cotton Candy NIGHTMARE Fuel"
      }
    ],
    "answer": "The description of the stream 'deshplease' is \"Cotton Candy NIGHTMARE Fuel\"."
  },
  {
    "question": "Find the minimum follower count of a stream that is part of the 'ESO Stream Team' and is moderated by a VIP from the 'luckyghost' stream.",
    "cypher": "MATCH (:Stream {name: 'luckyghost'})<-[:VIP]-(u:User)-[:MODERATOR]->(s:Stream)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}) WHERE s.followers IS NOT NULL RETURN min(s.followers) AS lowest_follower_count",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "lowest_follower_count": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returned None, which suggests that either no matching streams were found or the follower count data is not available for the specified conditions."
  },
  {
    "question": "How many different languages are used by streams where comettunes is a chatter?",
    "cypher": "MATCH (:User {name: 'comettunes'})-[:CHATTER]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN count(DISTINCT l) AS num_languages",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_languages": 28
      }
    ],
    "answer": "comettunes has chatted on streams in 28 different languages."
  },
  {
    "question": "Sum up the total views for streams where users who are VIPs on 'anaseu's channel also moderate.",
    "cypher": "MATCH (:Stream {name: 'anaseu'})<-[:VIP]-(u:User)-[:MODERATOR]->(s:Stream) RETURN sum(s.total_view_count) AS total_moderated_views",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_moderated_views": 0
      }
    ],
    "answer": "The total views for streams moderated by VIPs on 'anaseu's channel is 0."
  },
  {
    "question": "What's the game played on the 'itsbigchase' stream, which is moderated by 'imcoma' and has '9linda' as a fellow game player?",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s1:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(:Stream {name: '9linda'}) RETURN g.name AS shared_game_name",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "shared_game_name": "Rust"
      }
    ],
    "answer": "Based on the query result, the game played on the 'itsbigchase' stream is Rust."
  },
  {
    "question": "What is the name of the stream with the most views that plays 'The Elder Scrolls Online' and is on the 'ESO Stream Team'?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'The Elder Scrolls Online'}), (s)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}) WHERE s.total_view_count IS NOT NULL RETURN s.name AS top_stream_name ORDER BY s.total_view_count DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_stream_name": "alcasthq"
      }
    ],
    "answer": "Based on the query result, the stream with the most views that plays 'The Elder Scrolls Online' and is on the 'ESO Stream Team' is 'alcasthq'."
  },
  {
    "question": "How many paths connect the user 'rubiz' to any stream in the English language?",
    "cypher": "MATCH p=(:User {name: 'rubiz'})-[*..3]-(s:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) RETURN count(p) AS connection_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connection_count": 653717
      }
    ],
    "answer": "There are 653,717 paths connecting the user 'rubiz' to streams in the English language, traversing up to 3 relationships."
  },
  {
    "question": "Count how many folks moderate streams that play the same game as the 'anaseu' channel.",
    "cypher": "MATCH (:Stream {name: 'anaseu'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(s:Stream)<-[:MODERATOR]-(u:User) RETURN count(DISTINCT u) AS total_moderators",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_moderators": 2476
      }
    ],
    "answer": "2,476 users moderate streams that play the same game as the 'anaseu' channel."
  },
  {
    "question": "Which game is played by the oldest stream (by createdAt) that user 'soydas06' is a mod for?",
    "cypher": "MATCH (:User {name: 'soydas06'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) WHERE s.createdAt IS NOT NULL RETURN g.name AS oldest_stream_game ORDER BY s.createdAt ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "oldest_stream_game": "Grand Theft Auto V"
      }
    ],
    "answer": "Grand Theft Auto V is the game played by the oldest stream that user 'soydas06' is a moderator for."
  },
  {
    "question": "How many shared moderators are there between the 'spiukbs' stream and any stream playing Rust?",
    "cypher": "MATCH (:Stream {name: 'spiukbs'})<-[:MODERATOR]-(m:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN count(DISTINCT m) AS shared_moderator_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "shared_moderator_count": 1
      }
    ],
    "answer": "Based on the query result, there is 1 shared moderator between the 'spiukbs' stream and streams playing Rust."
  },
  {
    "question": "What is the total follower count of streamers who are moderators for the 'cacarov' stream and also play Rust?",
    "cypher": "MATCH (s1:Stream {name: 'cacarov'})<-[:MODERATOR]-(s2:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN sum(s2.followers) AS total_mod_followers",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_mod_followers": 0
      }
    ],
    "answer": "The total follower count of streamers who are moderators for the 'cacarov' stream and also play Rust is 0."
  },
  {
    "question": "What is the name of the language spoken on the stream 'creightonolsen', which has 'comettunes' as a chatter?",
    "cypher": "MATCH (:User {name: 'comettunes'})-[:CHATTER]->(s:Stream {name: 'creightonolsen'})-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS language_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "en"
      }
    ],
    "answer": "The language spoken on the stream 'creightonolsen' is English (en)."
  },
  {
    "question": "Find the name of the stream with the lowest follower count that plays 'Rust' and is moderated by a user from the 'syna' stream's mod team.",
    "cypher": "MATCH (:Stream {name: 'syna'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) WHERE s.followers IS NOT NULL RETURN s.name AS least_followed_stream ORDER BY s.followers ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "least_followed_stream": "z0l0t0ff"
      }
    ],
    "answer": "The stream with the lowest follower count that plays 'Rust' and is moderated by a user from the 'syna' stream's mod team is 'z0l0t0ff'."
  },
  {
    "question": "How many moderators does the 'itsbigchase' channel have in common with the 'anaseu' channel?",
    "cypher": "MATCH (:Stream {name: 'itsbigchase'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(:Stream {name: 'anaseu'}) RETURN count(u) AS common_moderator_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "common_moderator_count": 1
      }
    ],
    "answer": "The 'itsbigchase' and 'anaseu' channels have 1 moderator in common."
  },
  {
    "question": "What is the average total view count for streams moderated by someone who is also a VIP or moderator for the 'deshplease' stream?",
    "cypher": "MATCH (:Stream {name: 'deshplease'})<-[:MODERATOR|VIP]-(u:User)-[:MODERATOR]->(s:Stream) RETURN avg(s.total_view_count) AS average_views",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_views": 8836243.921928255
      }
    ],
    "answer": "The average total view count for streams moderated by someone who is also a VIP or moderator for the 'deshplease' stream is 8,836,244 views."
  },
  {
    "question": "Get the game played by streamer itsbigchase, who's moderated by imcoma.",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game) RETURN g.name AS game_title",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_title": "Rust"
      }
    ],
    "answer": "The game played by streamer itsbigchase is Rust."
  },
  {
    "question": "How many unique teams are associated with streams that play 'The Elder Scrolls Online' and are moderated by 'business_daddy'?",
    "cypher": "MATCH (:User {name: 'business_daddy'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(:Game {name: 'The Elder Scrolls Online'}), (s)-[:HAS_TEAM]->(t:Team) RETURN count(DISTINCT t) AS num_teams",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_teams": 0
      }
    ],
    "answer": "0 unique teams are associated with streams that play 'The Elder Scrolls Online' and are moderated by 'business_daddy'."
  },
  {
    "question": "Count all the chatters on streams that are part of the ESO Stream Team and play 'The Elder Scrolls Online'.",
    "cypher": "MATCH (u:User)-[:CHATTER]->(s:Stream)-[:PLAYS]->(:Game {name: 'The Elder Scrolls Online'}), (s)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}) RETURN count(DISTINCT u) AS total_chatters",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_chatters": 1529
      }
    ],
    "answer": "There are 1,529 unique chatters on streams that are part of the ESO Stream Team and play 'The Elder Scrolls Online'."
  },
  {
    "question": "What's the name of the game played on 'cacarovs' stream, which is moderated by someone who also moderates 'syna'?",
    "cypher": "MATCH (:Stream {name: 'syna'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s:Stream {name: 'cacarov'})-[:PLAYS]->(g:Game) RETURN g.name AS game_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Rust"
      }
    ],
    "answer": "Rust"
  },
  {
    "question": "What's the peak follower count among streamers who play Rust and are moderated by a user who is a VIP for 'anaseu'?",
    "cypher": "MATCH (:Stream {name: 'anaseu'})<-[:VIP]-(u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) WHERE s.followers IS NOT NULL RETURN max(s.followers) AS peak_followers",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "peak_followers": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query result returned None, which means no definitive peak follower count could be determined for Rust streamers moderated by a VIP of 'anaseu'."
  },
  {
    "question": "How many users moderate streams that play the same game as 'itsbigchase' and are in the same language as '9linda'?",
    "cypher": "MATCH (:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game), (:Stream {name: '9linda'})-[:HAS_LANGUAGE]->(l:Language), (u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g), (s)-[:HAS_LANGUAGE]->(l) RETURN count(DISTINCT u) AS moderator_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderator_count": 14
      }
    ],
    "answer": "14 users moderate streams that play the same game as 'itsbigchase' and are in the same language as '9linda'."
  },
  {
    "question": "What's the total number of followers for streams moderated by folks who are VIPs on the anaseu channel?",
    "cypher": "MATCH (:Stream {name: 'anaseu'})<-[:VIP]-(u:User)-[:MODERATOR]->(s:Stream) RETURN sum(s.followers) AS total_followers_of_moderated_streams",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_followers_of_moderated_streams": 0
      }
    ],
    "answer": "The total number of followers for streams moderated by VIPs on the anaseu channel is 0."
  },
  {
    "question": "How many different games are played by streams moderated by userss who chat in 'itsbigchase's stream?",
    "cypher": "MATCH (:Stream {name: 'itsbigchase'})<-[:CHATTER]-(u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) RETURN count(DISTINCT g) AS distinct_game_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "distinct_game_count": 71
      }
    ],
    "answer": "71 different games are played by streams moderated by users who chat in 'itsbigchase's stream."
  },
  {
    "question": "Count the number of streamers who play Rust and are members of a team that 'ninja614' also belongs to.",
    "cypher": "MATCH (s1:Stream {name: 'ninja614'})-[:HAS_TEAM]->(t:Team)<-[:HAS_TEAM]-(s2:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN count(DISTINCT s2) AS team_streamer_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_streamer_count": 0
      }
    ],
    "answer": "0 streamers who play Rust are members of the same team as 'ninja614'."
  },
  {
    "question": "How many moderators for the stream 'syna' also moderate streams that play the game 'Rust'?",
    "cypher": "MATCH (:Stream {name: 'syna'})<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN count(DISTINCT u) AS crossover_moderator_count",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "crossover_moderator_count": 3
      }
    ],
    "answer": "3 moderators for the stream 'syna' also moderate streams that play the game 'Rust'."
  },
  {
    "question": "What's the average view count for streams playing 'Rust' that have a chatter who also chats on 'deshplease's stream?",
    "cypher": "MATCH (:Stream {name: 'deshplease'})<-[:CHATTER]-(u:User)-[:CHATTER]->(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN avg(s.total_view_count) AS average_view_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_view_count": 4709906.1386861345
      }
    ],
    "answer": "The average view count for streams playing 'Rust' that have a chatter who also chats on 'deshplease's stream is approximately 4,709,906 views."
  },
  {
    "question": "Find the minimum number of followers for a stream that plays the same game as 'fengrush' and is moderated by a user who is a VIP on 'anaseu's stream.",
    "cypher": "MATCH (:Stream {name: 'anaseu'})<-[:VIP]-(u:User)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game)<-[:PLAYS]-(:Stream {name: 'fengrush'}) WHERE s.followers IS NOT NULL RETURN min(s.followers) AS minimum_followers",
    "query_type": "Sorting",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "minimum_followers": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query returned None for the minimum number of followers, which could mean either no streams match the specified conditions or the followers data is not available."
  },
  {
    "question": "How many total chatters are there in streams moderated by a user who is also a VIP on the stream 'anaseu'?",
    "cypher": "MATCH (:Stream {name: 'anaseu'})<-[:VIP]-(u:User)-[:MODERATOR]->(s:Stream)<-[:CHATTER]-(c:User) RETURN count(DISTINCT c) AS total_chatters",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_chatters": 0
      }
    ],
    "answer": "0 chatters are in streams moderated by a VIP user from the 'anaseu' stream."
  },
  {
    "question": "What is the game played by the streamer with the most followers who is moderated by the user 'evariss'?",
    "cypher": "MATCH (:User {name: 'evariss'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers IS NOT NULL RETURN g.name AS top_streamer_game ORDER BY s.followers DESC LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_streamer_game": "Grand Theft Auto V"
      }
    ],
    "answer": "The game played by the streamer with the most followers who is moderated by 'evariss' is Grand Theft Auto V."
  },
  {
    "question": "How many distinct games are played by streams that the user `imcoma` moderates?",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) RETURN COUNT(DISTINCT g.name) AS num_games",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_games": 1
      }
    ],
    "answer": "The user `imcoma` moderates streams that play 1 distinct game."
  },
  {
    "question": "Count the number of mods in channels where the user `business_daddy` hangs out.",
    "cypher": "MATCH (:User {name: 'business_daddy'})-[:CHATTER]->(s:Stream)<-[:MODERATOR]-(u:User) RETURN COUNT(DISTINCT u) AS total_mods",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_mods": 10077
      }
    ],
    "answer": "The user `business_daddy` moderates in channels with a total of 10,077 distinct moderators."
  },
  {
    "question": "What is the total number of followers for all streamers who play the same games as the streams moderated by `evariss`?",
    "cypher": "MATCH (:User {name: 'evariss'})-[:MODERATOR]->(s1:Stream)-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream) RETURN SUM(s2.followers) AS combined_followers",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "combined_followers": 111814025
      }
    ],
    "answer": "The total number of followers for all streamers who play the same games as the streams moderated by `evariss` is 111,814,025."
  },
  {
    "question": "What is the language of the stream that `raymundogalves` is a moderator for?",
    "cypher": "MATCH (:User {name: 'raymundogalvez'})-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN l.name AS stream_language LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "stream_language": "es"
      }
    ],
    "answer": "The language of the stream that `raymundogalves` moderates is Spanish (es)."
  },
  {
    "question": "Among streams moderated by users who chat in English-language channels, what is the minimum total view count?",
    "cypher": "MATCH (:Language {name: 'en'})<-[:HAS_LANGUAGE]-(s1:Stream)<-[:CHATTER]-(u:User)-[:MODERATOR]->(s2:Stream) WHERE s2.total_view_count IS NOT NULL RETURN MIN(s2.total_view_count) AS lowest_view_count",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "lowest_view_count": 101
      }
    ],
    "answer": "The minimum total view count among streams moderated by users who chat in English-language channels is 101 views."
  },
  {
    "question": "What is the shortest path length between user `imcoma` and the game 'Rust'?",
    "cypher": "MATCH p = shortestPath((:User {name: 'imcoma'})-[*]-(:Game {name: 'Rust'})) RETURN length(p) AS connection_length",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "connection_length": 2
      }
    ],
    "answer": "The shortest path length between user 'imcoma' and the game 'Rust' is 2 connections."
  },
  {
    "question": "How many folks chat in streams that are playing the game 'Rust'?",
    "cypher": "MATCH (:Game {name: 'Rust'})<-[:PLAYS]-(s:Stream)<-[:CHATTER]-(u:User) RETURN COUNT(DISTINCT u) AS total_chatters",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_chatters": 295672
      }
    ],
    "answer": "295,672 people chat in streams playing the game 'Rust'."
  },
  {
    "question": "What game is played on a stream that is chattered in by a streamer that `rubiz` moderates?",
    "cypher": "MATCH (:User {name: 'rubiz'})-[:MODERATOR]->(s1:Stream)-[:CHATTER]->(s2:Stream)-[:PLAYS]->(g:Game) RETURN g.name AS chattered_stream_game LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "chattered_stream_game": "Clash Royale"
      }
    ],
    "answer": "Clash Royale"
  },
  {
    "question": "Count the number of users who chat in streams belonging to the same team as the stream moderated by `soydas06`.",
    "cypher": "MATCH (:User {name: 'soydas06'})-[:MODERATOR]->(s1:Stream)-[:HAS_TEAM]->(t:Team)<-[:HAS_TEAM]-(s2:Stream)<-[:CHATTER]-(u2:User) RETURN COUNT(DISTINCT u2) AS team_chatter_count",
    "query_type": "Existence Verification",
    "complexity": "4-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_chatter_count": 0
      }
    ],
    "answer": "0 users chat in streams belonging to the same team as the stream moderated by `soydas06`."
  },
  {
    "question": "What is the average view count for streamers who broadcast in the same language as channels playing 'Rast'?",
    "cypher": "MATCH (:Game {name: 'Rust'})<-[:PLAYS]-(s1:Stream)-[:HAS_LANGUAGE]->(l:Language)<-[:HAS_LANGUAGE]-(s2:Stream) RETURN AVG(s2.total_view_count) AS average_views",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_views": 11260268.346980115
      }
    ],
    "answer": "The average view count for streamers broadcasting in the same language as channels playing 'Rust' is approximately 11,260,268 views."
  },
  {
    "question": "Find the name of a game that both `itsbigchase` and `9linda` play.",
    "cypher": "MATCH (:Stream {name: 'itsbigchase'})-[:PLAYS]->(g:Game)<-[:PLAYS]-(:Stream {name: '9linda'}) RETURN g.name AS common_game_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "common_game_name": "Rust"
      }
    ],
    "answer": "Rust"
  },
  {
    "question": "How many other streamers are on the same team as `ninja614`?",
    "cypher": "MATCH (:Stream {name: 'ninja614'})-[:HAS_TEAM]->(t:Team)<-[:HAS_TEAM]-(s2:Stream) WHERE s2.name <> 'ninja614' RETURN COUNT(DISTINCT s2) AS num_teammates",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_teammates": 8
      }
    ],
    "answer": "There are 8 other streamers on the same team as `ninja614`."
  },
  {
    "question": "Count the number of users who moderate Russian-language streams.",
    "cypher": "MATCH (:Language {name: 'ru'})<-[:HAS_LANGUAGE]-(s:Stream)<-[:MODERATOR]-(u:User) RETURN COUNT(DISTINCT u) AS num_ru_moderators",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_ru_moderators": 1875
      }
    ],
    "answer": "There are 1,875 users who moderate Russian-language streams."
  },
  {
    "question": "What's the number of moderation connections it takes to link the user `raymundogalvez` to the streamer `itsbigchace`?",
    "cypher": "MATCH p = shortestPath((:User {name: 'raymundogalvez'})-[:MODERATOR*]-(:Stream {name: 'itsbigchase'})) RETURN length(p) AS moderation_path_length",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderation_path_length": 3
      }
    ],
    "answer": "It takes 3 moderation connections to link the user `raymundogalvez` to the streamer `itsbigchace`."
  },
  {
    "question": "Calculate the total view count of all English-speaking streamers who are on the same team as someone who plays 'The Elder Scrolls Online'.",
    "cypher": "MATCH (:Game {name: 'The Elder Scrolls Online'})<-[:PLAYS]-(:Stream)-[:HAS_TEAM]->(t:Team)<-[:HAS_TEAM]-(s2:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) RETURN SUM(s2.total_view_count) AS total_team_views",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_team_views": 5852745012
      }
    ],
    "answer": "The total view count of all English-speaking streamers on teams with a streamer playing 'The Elder Scrolls Online' is 5,852,745,012 views."
  },
  {
    "question": "What's the description of a channel that `anaseu` chats in, given that `haraldinho_` moderates for `anaseu`?",
    "cypher": "MATCH (:User {name: 'haraldinho_'})-[:MODERATOR]->(s1:Stream {name: 'anaseu'})-[:CHATTER]->(s2:Stream) RETURN s2.description AS chattered_stream_description LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammatical",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "chattered_stream_description": ""
      }
    ],
    "answer": "UNKNOWN - While the query attempted to find a description for a channel `anaseu` chats in, the result shows an empty description string, which does not provide meaningful information to answer the question."
  },
  {
    "question": "Find the stream with the highest total view count that is moderated by someone who also moderates a channel where `wickedbad4u` chats.",
    "cypher": "MATCH (:User {name: 'wickedbad4u'})-[:CHATTER]->(s1:Stream)<-[:MODERATOR]-(u:User)-[:MODERATOR]->(s2:Stream) WHERE s2.total_view_count IS NOT NULL RETURN s2.name AS top_moderated_stream ORDER BY s2.total_view_count DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_moderated_stream": "fextralife"
      }
    ],
    "answer": "Based on the query result, the stream with the highest total view count moderated by someone who also moderates a channel where `wickedbad4u` chats is 'fextralife'."
  },
  {
    "question": "How many streams playing 'Rust' does the user `evaris` interact with (as a chatter or moderator)?",
    "cypher": "MATCH (:User {name: 'evariss'})-[:CHATTER|MODERATOR]->(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN COUNT(DISTINCT s) AS interaction_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "interaction_count": 0
      }
    ],
    "answer": "0. The user `evaris` does not interact with any streams playing 'Rust' as a chatter or moderator."
  },
  {
    "question": "What's the average number of followers for members of the 'ESO Stream Team' who play 'The Elder Scrolls Online'?",
    "cypher": "MATCH (:Game {name: 'The Elder Scrolls Online'})<-[:PLAYS]-(s:Stream)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}) RETURN AVG(s.followers) AS average_team_followers",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_team_followers": 52177.666666666664
      }
    ],
    "answer": "The average number of followers for members of the 'ESO Stream Team' who play 'The Elder Scrolls Online' is 52,178."
  },
  {
    "question": "Among all users who moderate English-language streams, find the name of the one who moderates the stream with the most followers.",
    "cypher": "MATCH (:Language {name: 'en'})<-[:HAS_LANGUAGE]-(s:Stream)<-[:MODERATOR]-(u:User) WHERE s.followers IS NOT NULL RETURN u.name AS top_moderator_name ORDER BY s.followers DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_moderator_name": "meyersleonard"
      }
    ],
    "answer": "The name of the user who moderates the English-language stream with the most followers is \"meyersleonard\"."
  },
  {
    "question": "How many other users chat in the same streams as `comettunes`?",
    "cypher": "MATCH (:User {name: 'comettunes'})-[:CHATTER]->(s:Stream)<-[:CHATTER]-(u2:User) WHERE u2.name <> 'comettunes' RETURN COUNT(DISTINCT u2) AS mutual_chatters_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "mutual_chatters_count": 6945194
      }
    ],
    "answer": "6,945,194 other users chat in the same streams as `comettunes`."
  },
  {
    "question": "Count the number of unique chatters in streams moderated by the user `rubizs`.",
    "cypher": "MATCH (:User {name: 'rubiz'})-[:MODERATOR]->(s:Stream)<-[:CHATTER]-(u:User) RETURN COUNT(DISTINCT u) AS total_chatter_count",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_chatter_count": 1136
      }
    ],
    "answer": "There are 1,136 unique chatters in streams moderated by the user `rubizs`."
  },
  {
    "question": "Find the URL of another streamer who is on the same team as the channel moderated by `raymundogalvez`.",
    "cypher": "MATCH (:User {name: 'raymundogalvez'})-[:MODERATOR]->(s1:Stream)-[:HAS_TEAM]->(t:Team)<-[:HAS_TEAM]-(s2:Stream) WHERE s1.name <> s2.name RETURN s2.url AS teammate_stream_url LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "teammate_stream_url": "https://www.twitch.tv/serenexo"
      }
    ],
    "answer": "The URL of another streamer on the same team as the channel moderated by raymundogalvez is https://www.twitch.tv/serenexo."
  },
  {
    "question": "How many teammates of `ninja614` also play 'The Elder Scrolls Online'?",
    "cypher": "MATCH (:Stream {name: 'ninja614'})-[:HAS_TEAM]->(t:Team)<-[:HAS_TEAM]-(s2:Stream)-[:PLAYS]->(:Game {name: 'The Elder Scrolls Online'}) WHERE s2.name <> 'ninja614' RETURN COUNT(DISTINCT s2) AS num_playing_teammates",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_playing_teammates": 2
      }
    ],
    "answer": "2 teammates of ninja614 also play 'The Elder Scrolls Online'."
  },
  {
    "question": "What is the total follower count of all streams that chat in channels where `elokratz` is a VIP?",
    "cypher": "MATCH (:User {name: 'elokratz'})-[:VIP]->(s1:Stream)<-[:CHATTER]-(s2:Stream) RETURN SUM(s2.followers) AS total_chatter_stream_followers",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_chatter_stream_followers": 0
      }
    ],
    "answer": "The total follower count of all streams where users chat in channels where `elokratz` is a VIP is 0."
  },
  {
    "question": "What game's played by the streamer `9linda` who streams in Russian?",
    "cypher": "MATCH (g:Game)<-[:PLAYS]-(s:Stream {name: '9linda'})-[:HAS_LANGUAGE]->(:Language {name: 'ru'}) RETURN g.name AS game_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "grammatical",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "game_name": "Rust"
      }
    ],
    "answer": "Rust is the game played by the streamer 9linda who streams in Russian."
  },
  {
    "question": "How many games are played on channels moderated by user `imcom`?",
    "cypher": "MATCH (:User {name: 'imcoma'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) RETURN COUNT(DISTINCT g) AS num_games",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_games": 1
      }
    ],
    "answer": "1 game is played on channels moderated by user `imcom`."
  },
  {
    "question": "What is the total number of chatters in streams that share the same language as the stream moderated by `soydas06`?",
    "cypher": "MATCH (:User {name: 'soydas06'})-[:MODERATOR]->(s1:Stream)-[:HAS_LANGUAGE]->(l:Language)<-[:HAS_LANGUAGE]-(s2:Stream)<-[:CHATTER]-(u:User) RETURN COUNT(DISTINCT u) AS total_language_chatters",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_language_chatters": 304423
      }
    ],
    "answer": "There are 304,423 unique chatters in streams that share the same language as the stream moderated by `soydas06`."
  },
  {
    "question": "What is the name of the game played by the stream that user `evariss` moderates?",
    "cypher": "MATCH (:User {name: 'evariss'})-[:MODERATOR]->(s:Stream)-[:PLAYS]->(g:Game) RETURN g.name AS moderated_stream_game LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderated_stream_game": "Grand Theft Auto V"
      }
    ],
    "answer": "Grand Theft Auto V"
  },
  {
    "question": "Which chatter in 'Rust' streams is in a channel with the lowest total views?",
    "cypher": "MATCH (:Game {name: 'Rust'})<-[:PLAYS]-(s:Stream)<-[:CHATTER]-(u:User) WHERE s.total_view_count IS NOT NULL RETURN u.name AS chatter_name ORDER BY s.total_view_count ASC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "chatter_name": "godseallla"
      }
    ],
    "answer": "Based on the query result, the chatter in 'Rust' streams with the lowest total views is godseallla."
  },
  {
    "question": "How many teams are associated with streams that moderate channels where `business_daddy` chats?",
    "cypher": "MATCH (:User {name: 'business_daddy'})-[:CHATTER]->(s1:Stream)<-[:MODERATOR]-(s2:Stream)-[:HAS_TEAM]->(t:Team) RETURN COUNT(DISTINCT t) AS num_teams",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_teams": 160
      }
    ],
    "answer": "160 teams are associated with streams that moderate channels where `business_daddy` chats."
  },
  {
    "question": "What's the total view count for all channels that play 'The Elder Scrolls Online' and are part of the 'ESO Stream Tame'?",
    "cypher": "MATCH (:Team {name: 'ESO Stream Team'})<-[:HAS_TEAM]-(s:Stream)-[:PLAYS]->(:Game {name: 'The Elder Scrolls Online'}) RETURN SUM(s.total_view_count) AS total_team_game_views",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_team_game_views": 108521146
      }
    ],
    "answer": "The total view count for channels playing 'The Elder Scrolls Online' that are part of the 'ESO Stream Team' is 108,521,146 views."
  },
  {
    "question": "A user chats in `creightonolsen`'s English-language stream and also moderates another stream. What is the name of that other stream?",
    "cypher": "MATCH (:Language {name: 'en'})<-[:HAS_LANGUAGE]-(:Stream {name: 'creightonolsen'})<-[:CHATTER]-(u:User)-[:MODERATOR]->(s2:Stream) RETURN s2.name AS moderated_stream_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "moderated_stream_name": "tru3ndriu"
      }
    ],
    "answer": "The user moderates the stream named 'tru3ndriu'."
  },
  {
    "question": "Of all the English-speaking streamers who play Rust, who has the most peeps following them?",
    "cypher": "MATCH (:Language {name: 'en'})<-[:HAS_LANGUAGE]-(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) WHERE s.followers IS NOT NULL RETURN s.name AS top_streamer_name ORDER BY s.followers DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_streamer_name": "shiphtur"
      }
    ],
    "answer": "According to the data, Shiphtur is the English-speaking Rust streamer with the most followers."
  },
  {
    "question": "How many users moderate streams that play the game 'Rust'?",
    "cypher": "MATCH (:Game {name: 'Rust'})<-[:PLAYS]-(s:Stream)<-[:MODERATOR]-(u:User) RETURN COUNT(DISTINCT u) AS num_moderators",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_moderators": 332
      }
    ],
    "answer": "332 users moderate streams that play the game 'Rust'."
  },
  {
    "question": "What's the average number of followers for streamers who are VIPs in `deshplese`'s channel and play Rust?",
    "cypher": "MATCH (:Stream {name: 'deshplease'})<-[:VIP]-(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) RETURN AVG(s.followers) AS average_vip_followers",
    "query_type": "Aggregation",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "average_vip_followers": null
      }
    ],
    "answer": "UNKNOWN\n\nThe query returned None for the average number of followers, which could mean either no VIP streamers play Rust in deshplese's channel, or there is insufficient data to calculate an average."
  },
  {
    "question": "What team is the streamer on, who's channel `business_daddy` chats in?",
    "cypher": "MATCH (:User {name: 'business_daddy'})-[:CHATTER]->(s:Stream)-[:HAS_TEAM]->(t:Team) RETURN t.name AS team_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": true,
    "noise_type": "colloquialism",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_name": "Team Vitality"
      }
    ],
    "answer": "Team Vitality"
  },
  {
    "question": "Among streamers who moderate channels that play 'Rust', which one has the highest follower count?",
    "cypher": "MATCH (:Game {name: 'Rust'})<-[:PLAYS]-(:Stream)<-[:MODERATOR]-(s2:Stream) WHERE s2.followers IS NOT NULL RETURN s2.name AS top_moderator_streamer ORDER BY s2.followers DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "top_moderator_streamer": "sleepy"
      }
    ],
    "answer": "Based on the query result, the streamer 'sleepy' has the highest follower count among moderators of channels that play 'Rust'."
  },
  {
    "question": "How many languages' are used by streamers on the team that `fengrush` is a part of?",
    "cypher": "MATCH (:Stream {name: 'fengrush'})-[:HAS_TEAM]->(t:Team)<-[:HAS_TEAM]-(s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN COUNT(DISTINCT l) AS num_languages",
    "query_type": "Existence Verification",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "grammatical",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "num_languages": 2
      }
    ],
    "answer": "The team that `fengrush` is a part of uses 2 distinct languages."
  },
  {
    "question": "Count the total number of unique chatters in streams that play 'The Elder Scrols Online' and are in English.",
    "cypher": "MATCH (u:User)-[:CHATTER]->(s:Stream)-[:PLAYS]->(:Game {name: 'The Elder Scrolls Online'}), (s)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) RETURN COUNT(DISTINCT u) AS total_chatters",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_chatters": 2447
      }
    ],
    "answer": "There are 2,447 unique chatters in streams that play 'The Elder Scrolls Online' and are in English."
  },
  {
    "question": "Find the name of a user who chats in a stream that plays the same game as a stream moderated by `raymundogalvez`.",
    "cypher": "MATCH (:User {name: 'raymundogalvez'})-[:MODERATOR]->(:Stream)-[:PLAYS]->(g:Game)<-[:PLAYS]-(s2:Stream)<-[:CHATTER]-(u2:User) RETURN u2.name AS related_chatter_name LIMIT 1",
    "query_type": "Property Retrieval",
    "complexity": "4-hop",
    "noise_applied": false,
    "noise_type": "none",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "related_chatter_name": "eeevvvsss"
      }
    ],
    "answer": "eeevvvsss"
  },
  {
    "question": "How many distinct games are played by streamers who belong to the 'ESO Stream Team' and are moderated by the user 'business_daddy'?",
    "cypher": "MATCH (u:User {name: 'business_daddy'})-[:MODERATOR]->(s:Stream)-[:HAS_TEAM]->(:Team {name: 'ESO Stream Team'}), (s)-[:PLAYS]->(g:Game) RETURN count(DISTINCT g) AS distinct_games_count",
    "query_type": "Aggregation",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": null,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "distinct_games_count": 0
      }
    ],
    "answer": "The query result shows 0 distinct games. This means that there are no distinct games played by streamers in the 'ESO Stream Team' who are moderated by the user 'business_daddy'."
  },
  {
    "question": "What is the name of the team associated with the streamer 'luckyghost', who plays 'The Elder Scrolls Online'?",
    "cypher": "MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream {name: 'luckyghost'})-[:PLAYS]->(g:Game {name: 'The Elder Scrolls Online'}) RETURN t.name AS team_name",
    "query_type": "Property Retrieval",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": null,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "team_name": "ESO Stream Team"
      }
    ],
    "answer": "The team associated with the streamer 'luckyghost' who plays 'The Elder Scrolls Online' is the 'ESO Stream Team'."
  },
  {
    "question": "Find the maximum number of followers for a streamer who plays 'Rust' and is moderated by a user who also moderates 'cacarov'.",
    "cypher": "MATCH (:User)-[:MODERATOR]->(:Stream {name: 'cacarov'}), (u)-[:MODERATOR]->(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}) WHERE s.followers IS NOT NULL RETURN max(s.followers) AS max_follower_count",
    "query_type": "Sorting",
    "complexity": "3-hop",
    "noise_applied": false,
    "noise_type": null,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "max_follower_count": 754330
      }
    ],
    "answer": "The maximum number of followers for a streamer who plays 'Rust' and is moderated by a user who also moderates 'cacarov' is 754,330."
  },
  {
    "question": "How many streamers from the 'ESO Stream Team' broadcast in the 'en' language?",
    "cypher": "MATCH (:Team {name: 'ESO Stream Team'})<-[:HAS_TEAM]-(s:Stream)-[:HAS_LANGUAGE]->(:Language {name: 'en'}) RETURN count(s) AS streamer_count",
    "query_type": "Existence Verification",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": null,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "streamer_count": 5
      }
    ],
    "answer": "5 streamers from the 'ESO Stream Team' broadcast in the 'en' (English) language."
  },
  {
    "question": "What's the total view count for all channels that play Rast, are streamed in 'ru', and have a VIP who also is a VIP for 'itsbigchase'?",
    "cypher": "MATCH (v:User)-[:VIP]->(:Stream {name: 'itsbigchase'}), (v)-[:VIP]->(s:Stream)-[:PLAYS]->(:Game {name: 'Rust'}), (s)-[:HAS_LANGUAGE]->(:Language {name: 'ru'}) RETURN sum(s.total_view_count) AS total_views",
    "query_type": "Aggregation",
    "complexity": "4-hop",
    "noise_applied": true,
    "noise_type": "typo",
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "total_views": 0
      }
    ],
    "answer": "The total view count for channels that meet the specified criteria is 0."
  },
  {
    "question": "What is the language of the stream with the most followers that plays 'The Elder Scrolls Online'?",
    "cypher": "MATCH (s:Stream)-[:PLAYS]->(:Game {name: 'The Elder Scrolls Online'}), (s)-[:HAS_LANGUAGE]->(l:Language) WHERE s.followers IS NOT NULL RETURN l.name AS language_name ORDER BY s.followers DESC LIMIT 1",
    "query_type": "Sorting",
    "complexity": "2-hop",
    "noise_applied": false,
    "noise_type": null,
    "model": "chat-google-generative-ai",
    "database": "twitch",
    "validated": true,
    "result": [
      {
        "language_name": "en"
      }
    ],
    "answer": "The language of the stream with the most followers that plays 'The Elder Scrolls Online' is English (en)."
  }
]